[
  {
    "id": 1443305,
    "slug": "tyd7ul",
    "title": "mysql 的 服务层和存储引擎层",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "* Mysql 主要分为Server曾和引擎层，Server层主要包括连接器、查询缓存、分析器、优化器、执行器，同时还有一个日志模块（binlog），这个日志模块所有执行引擎都可以共用。\n* 引擎层是插件式的，目前主要包括，MyISAM,InnoDB,Memory等。\n* sql等执行过程分为两类，一类对于查询等过程如下：权限校验---》查询缓存---》分析器---》优化器---》权限校验---》执行器---》引擎\n* 对于更新等语句执行流程如下：分析器----》权限校验----》执行器---》引擎---redo log prepare---》binlog---》redo log commit\n",
    "body_draft": "",
    "body_html": "<ul style=\"text-align: justify;\"><li>Mysql 主要分为Server曾和引擎层，Server层主要包括连接器、查询缓存、分析器、优化器、执行器，同时还有一个日志模块（binlog），这个日志模块所有执行引擎都可以共用。</li><li>引擎层是插件式的，目前主要包括，MyISAM,InnoDB,Memory等。</li><li>sql等执行过程分为两类，一类对于查询等过程如下：权限校验---》查询缓存---》分析器---》优化器---》权限校验---》执行器---》引擎</li><li>对于更新等语句执行流程如下：分析器----》权限校验----》执行器---》引擎---redo log prepare---》binlog---》redo log commit</li></ul>",
    "body_lake": "<!doctype lake><ul style=\"text-align: justify;\"><li>Mysql 主要分为Server曾和引擎层，Server层主要包括连接器、查询缓存、分析器、优化器、执行器，同时还有一个日志模块（binlog），这个日志模块所有执行引擎都可以共用。</li><li>引擎层是插件式的，目前主要包括，MyISAM,InnoDB,Memory等。</li><li>sql等执行过程分为两类，一类对于查询等过程如下：权限校验---》查询缓存---》分析器---》优化器---》权限校验---》执行器---》引擎</li><li>对于更新等语句执行流程如下：分析器----》权限校验----》执行器---》引擎---redo log prepare---》binlog---》redo log commit<cursor /></li></ul>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-28T18:32:30.000Z",
    "deleted_at": null,
    "created_at": "2019-03-28T18:31:33.000Z",
    "updated_at": "2019-03-28T18:32:30.000Z",
    "published_at": "2019-03-28T18:32:30.000Z",
    "first_published_at": "2019-03-28T18:32:30.000Z",
    "word_count": 155,
    "cover": null,
    "description": "Mysql 主要分为Server曾和引擎层，Server层主要包括连接器、查询缓存、分析器、优化器、执行器，同时还有一个日志模块（binlog），这个日志模块所有执行引擎都可以共用。引擎层是插件式的，目前主要包括，MyISAM,InnoDB,Memory等。sql等执行过程分为两类，一类对于查...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1422785,
    "slug": "nihkgh",
    "title": "JDK11新特性",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"38f13363\"></a>\n# 一、JDK11新特性一览\n* 181: Nest-Based Access Control\n* 309: Dynamic Class-File Constants\n* 315: Improve Aarch64 Intrinsics\n* 318: Epsilon: A No-Op Garbage Collector\n* 320: Remove the Java EE and CORBA Modules\n* 321: HTTP Client (Standard)\n* 323: Local-Variable Syntax for Lambda Parameters\n* 324: Key Agreement with Curve25519 and Curve448\n* 327: Unicode 10\n* 328: Flight Recorder\n* 329: ChaCha20 and Poly1305 Cryptographic Algorithms\n* 330: Launch Single-File Source-Code Programs\n* 331: Low-Overhead Heap Profiling\n* 332: Transport Layer Security (TLS) 1.3\n* 333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental)\n* 335: Deprecate the Nashorn JavaScript Engine\n* 336: Deprecate the Pack200 Tools and API\n<a name=\"2af02823\"></a>\n# 二、JDK11发布计划\n| 日期 | 阶段 | 说明 |\n| --- | --- | --- |\n| 2018/06/28 | Rampdown Phase One (fork from main line) | 对进入Rampdown阶段的变化会应用越来越严格的审查。在阶段1中，只能修复 P1-P3 错误。 |\n| 2018/07/26 | Rampdown Phase Two | 在阶段2中，只能修复 showstopper 错误 |\n| 2018/08/16 | Initial Release Candidate |  |\n| 2018/08/30 | Final Release Candidate | 在此阶段必须宣布最终候选版的发布日期并提交以进行测试 |\n| 2018/09/25 | General Availability | 最终版本，可在生产环境正式使用 |\n\n<a name=\"ba736b03\"></a>\n# 三、JDK11特性解读\n<a name=\"f1d9d9ad\"></a>\n## JEP 181: Nest-Based Access Control（基于嵌套的访问控制）\n<a name=\"08efa7ec\"></a>\n## JEP 309: Dynamic Class-File Constants（动态类文件常量）\nJava的类型文件格式将被拓展，支持一种新的常量池格式：CONSTANT_Dynamic，加载CONSTANT_Dynamic会将创建委托给bootstrap方法。\n<a name=\"73e82552\"></a>\n### 目标\n其目标是降低开发新形式的可实现类文件约束带来的成本和干扰。\n<a name=\"7a427c0f\"></a>\n## JEP 315: Improve Aarch64 Intrinsics（改进 Aarch64 函数）\n<a name=\"682cd5d6\"></a>\n## JEP 318: Epsilon: A No-Op Garbage Collector（Epsilon — 一个无操作的垃圾收集器）\nJDK上对这个特性的描述是：开发一个处理内存分配但不实现任何实际内存回收机制的GC，一旦可用堆内存用完，JVM就会退出。<br />如果有System.gc()的调用，实际上什么也不会发生（这种场景下和-XX:+DisableExplicitGC效果一样），因为没有内存回收，这个实现可能会警告用户尝试强制GC是徒劳。<br />用法非常简单：\n```\n-XX:+UseEpsilonGC。\n```\n<a name=\"5fec942d\"></a>\n### 动机\n提供完全被动的GC实现，具有有限的分配限制和尽可能低的延迟开销，但代价是内存占用和内存吞吐量。<br />众所周知，Java实现可广泛选择高度可配置的GC实现。 各种可用的收集器最终满足不同的需求，即使它们的可配置性使它们的功能相交。 有时更容易维护单独的实现，而不是在现有GC实现上堆积另一个配置选项。<br />它的主要用途如下：\n* 性能测试（它可以帮助过滤掉GC引起的性能假象）；\n* 内存压力测试（例如，知道测试用例应该分配不超过1 GB的内存，我们可以使用-Xmx1g配置-XX:+UseEpsilonGC，如果违反了该约束，则会heap dump并崩溃）；\n* 非常短的JOB任务（对于这种任务，接受GC清理堆那都是浪费空间）；\n* VM接口测试；\n* Last-drop 延迟&吞吐改进；\n<a name=\"dc894810\"></a>\n## JEP 320: Remove the Java EE and CORBA Modules（删除 Java EE 和 CORBA 模块）\nJava EE和CORBA两个模块在JDK9中已经标记\"deprecated\"，在JDK11中正式移除。JDK中deprecated的意思是在不建议使用，在未来的release版本会被删除。\n<a name=\"5fec942d-1\"></a>\n### 动机\nJavaEE由4部分组成：\n* JAX-WS (Java API for XML-Based Web Services),\n* JAXB (Java Architecture for XML Binding)\n* JAF (the JavaBeans Activation Framework)\n* Common Annotations.\n\n但是这个特性和JavaSE关系不大。并且JavaEE被维护在Github（[https://github.com/javaee](https://github.com/javaee)）中，版本同步造成维护困难。最后，JavaEE可以单独引用，maven中心仓库也提供了JavaEE（[http://mvnrepository.com/artifact/javax/javaee-api/8.0](http://mvnrepository.com/artifact/javax/javaee-api/8.0)），所以没必要把JavaEE包含到JavaSE中。<br />至于CORBA，使用Java中的CORBA开发程序没有太大的兴趣。因此，在JavaEE就把CORBA标记为\"Proposed Optional\"，这就表明将来可能会放弃对这些技术的必要支持。\n<a name=\"5898ff09\"></a>\n## JEP 321: HTTP Client (Standard)（标准HTTP客户端）\n将JDK9引进并孵化的HTTP客户端API作为标准，即HTTP/2 Client。它定义了一个全新的实现了HTTP/2和WebSocket的HTTP客户端API，并且可以取代HttpURLConnection。<br />动机<br />已经存在的HttpURLConnection有如下问题:\n* 在设计时考虑了多种协议，但是现在几乎所有协议现已不存在。\n* API早于HTTP/1.1并且太抽象；\n* 使用很不友好；\n* 只能以阻塞模式工作；\n* 非常难维护；\n<a name=\"ff675a7b\"></a>\n## JEP 323: Local-Variable Syntax for Lambda Parameters（用于 Lambda 参数的局部变量语法）\n在声明隐式类型的lambda表达式的形参时允许使用var。\n<a name=\"5fec942d-2\"></a>\n### 动机\nlamdba表达式可能是隐式类型的，它形参的所有类型全部靠推到出来的。隐式类型lambda表达式如下：\n```\n(x, y) -> x.process(y)\n```\nJava SE 10让隐式类型变量可用于本地变量:\n```\nvar foo = new Foo();\nfor (var foo : foos) { ... }\ntry (var foo = ...) { ... } catch ...\n```\n为了和本地变量保持一致，我们希望允许var作为隐式类型lambda表达式的形参：\n```\n(var x, var y) -> x.process(y)\n```\n统一格式的一个好处就是modifiers和notably注解能被加在本地变量和lambda表达式的形参上，并且不会丢失简洁性：\n```\n@Nonnull var x = new Foo();\n(@Nonnull var x, @Nullable var y) -> x.process(y)\n```\n<a name=\"c5b2468b\"></a>\n## JEP 324: Key Agreement with Curve25519 and Curve448（Curve25519 和 Curve448 算法的密钥协议）\n用RFC 7748中描述到的 Curve25519 和Curve448 实现秘钥协议。RFC 7748定义的秘钥协商方案更高效，更安全。这个JEP的主要目标就是为这个标准定义API和实现。\n<a name=\"5fec942d-3\"></a>\n### 动机\n密码学要求使用 Curve25519 和Curve448 是因为它们的安全性和性能。JDK会增加两个新的接口XECPublicKey 和 XECPrivateKey，示例代码如下：\n```\nKeyPairGenerator kpg = KeyPairGenerator.getInstance(\"XDH\");\nNamedParameterSpec paramSpec = new NamedParameterSpec(\"X25519\");\nkpg.initialize(paramSpec); // equivalent to kpg.initialize(255)\n// alternatively: kpg = KeyPairGenerator.getInstance(\"X25519\")\nKeyPair kp = kpg.generateKeyPair();\nKeyFactory kf = KeyFactory.getInstance(\"XDH\");\nBigInteger u = ...\nXECPublicKeySpec pubSpec = new XECPublicKeySpec(paramSpec, u);\nPublicKey pubKey = kf.generatePublic(pubSpec);\nKeyAgreement ka = KeyAgreement.getInstance(\"XDH\");\nka.init(kp.getPrivate());\nka.doPhase(pubKey, true);\nbyte[] secret = ka.generateSecret();\n```\n<a name=\"8e8f3059\"></a>\n## JEP 327: Unicode 10\n更新平台API支持Unicode 10.0版本（Unicode 10.0概述：Unicode 10.0 增加了8518 个字符, 总计达到了136,690个字符. 并且增加了4个脚本, 总结139个脚本, 同时还有56个新的emoji表情符号。参考：[http://unicode.org/versions/Unicode10.0.0/](http://unicode.org/versions/Unicode10.0.0/)）。\n<a name=\"5fec942d-4\"></a>\n### 动机\nUnicode是一个不断进化的工业标准，因此必须不断保持Java和Unicode最新版本同步。\n<a name=\"31b48229\"></a>\n## JEP 328: Flight Recorder（飞行记录器）\n提供一个低开销的，为了排错Java应用问题，以及JVM问题的数据收集框架，希望达到的目标如下：\n* 提供用于生产和消费数据作为事件的API；\n* 提供缓存机制和二进制数据格式；\n* 允许事件配置和事件过滤；\n* 提供OS，JVM和JDK库的事件；\n<a name=\"5fec942d-5\"></a>\n### 动机\n排错，监控，性能分析是整个开发生命周期必不可少的一部分，但是某些问题只会在大量真实数据压力下才会发生在生产环境。<br />Flight Recorder记录源自应用程序，JVM和OS的事件。 事件存储在一个文件中，该文件可以附加到错误报告中并由支持工程师进行检查，允许事后分析导致问题的时期内的问题。工具可以使用API从记录文件中提取信息。\n<a name=\"7604ff7a\"></a>\n## JEP 329: ChaCha20 and Poly1305 Cryptographic Algorithms（ChaCha20 和 Poly1305 加密算法）\n实现RFC 7539中指定的 ChaCha20 和 ChaCha20-Poly1305 两种加密算法。\n<a name=\"5fec942d-6\"></a>\n### 动机\n唯一一个其他广泛采用的RC4长期以来一直被认为是不安全的，业界一致认为当下ChaCha20-Poly1305是安全的。\n<a name=\"d1b6ddf7\"></a>\n## JEP 330: Launch Single-File Source-Code Programs（启动单一文件的源代码程序）\n增强Java启动器支持运行单个Java源代码文件的程序。\n<a name=\"5fec942d-7\"></a>\n### 动机\n单文件程序是指整个程序只有一个源码文件，通常是早期学习Java阶段，或者写一个小型工具类。以HelloWorld.java为例，运行它之前需要先编译。我们希望Java启动器能直接运行这个源码级的程序：\n```\njava HelloWorld.java\n```\n等价于：\n```\njavac -d <memory> HelloWorld.java\njava -cp <memory> helloWorld\njava Factorial.java 3 4 5\n```\n等价于：\n```\njavac -d <memory> Factorial.java\njava -cp <memory> Factorial 3 4 5\n```\n到JDK10为止，Java启动器能以三种方式运行：\n1. 启动一个class文件；\n1. 启动一个JAR中的main方法类；\n1. 启动一个模块中的main方法类；\n\nJDK11再加一个，即第四种方式：启动一个源文件申明的类。\n<a name=\"20cb9647\"></a>\n## JEP 331: Low-Overhead Heap Profiling（低开销的 Heap Profiling）\n提供一种低开销的Java堆分配采样方法，得到堆分配的Java对象信息，可通过JVMTI访问。希望达到的目标如下：\n* 足够低的开销，可以默认且一直开启；\n* 能通过定义好的程序接口访问；\n* 能采样所有分配；\n* 能给出生存和死亡的Java对象信息；\n* 动机\n\n对用户来说，了解它们堆里的内存是很重要的需求。目前有一些已经开发的工具，允许用户窥探它们的堆，比如：Java Flight Recorder, jmap, YourKit, 以及VisualVM tools.。但是这工具都有一个很大的缺点：无法得到对象的分配位置。headp dump以及heap histo都没有这个信息，但是这个信息对于调试内存问题至关重要。因为它能告诉开发者，他们的代码发生（尤其是坏的）分配的确切位置。\n<a name=\"ddf1cc36\"></a>\n## JEP 332: Transport Layer Security (TLS) 1.3（支持 TLS 1.3）\n实现TLS协议1.3版本。（TLS允许客户端和服务端通过互联网以一种防止窃听，篡改以及消息伪造的方式进行通信）。\n<a name=\"5fec942d-8\"></a>\n### 动机\nTLS 1.3是TLS协议的重大改进，与以前的版本相比，它提供了显着的安全性和性能改进。其他供应商的几个早期实现已经可用。我们需要支持TLS 1.3以保持竞争力并与最新标准保持同步。这个特性的实现动机和Unicode 10一样，也是紧跟历史潮流。\n<a name=\"beb47936\"></a>\n## JEP 333: ZGC: A Scalable Low-Latency Garbage Collector (可伸缩低延迟垃圾收集器)\nZGC：这应该是JDK11最为瞩目的特性，没有之一。但是后面带了Experimental，说明还不建议用到生产环境。看看官方对这个特性的目标描述：\n* GC暂停时间不会超过10ms；\n* 即能处理几百兆小堆，也能处理几个T的大堆（OMG）；\n* 和G1相比，应用吞吐能力不会下降超过15%；\n* 为未来的GC功能和利用colord指针以及Load barriers优化奠定基础；\n* 初始只支持64位系统；\n<a name=\"5fec942d-9\"></a>\n### 动机\nGC是Java主要优势之一。然而，当GC停顿太长，就会开始影响应用的响应时间。消除或者减少GC停顿时长，Java将对更广泛的应用场景是一个更有吸引力的平台。此外，现代系统中可用内存不断增长， 用户和程序员希望JVM能够以高效的方式充分利用这些内存，并且无需长时间的GC暂停时间。<br />ZGC一个并发，基于region，压缩型的垃圾收集器，只有root扫描阶段会STW，因此GC停顿时间不会随着堆的增长和存活对象的增长而变长。<br />ZGC和G1停顿时间比较：\n```\nZGC\n                avg: 1.091ms (+/-0.215ms)\n    95th percentile: 1.380ms\n    99th percentile: 1.512ms\n  99.9th percentile: 1.663ms\n 99.99th percentile: 1.681ms\n                max: 1.681ms\nG1\n                avg: 156.806ms (+/-71.126ms)\n    95th percentile: 316.672ms\n    99th percentile: 428.095ms\n  99.9th percentile: 543.846ms\n 99.99th percentile: 543.846ms\n                max: 543.846ms\n```\n用法：\n```\n-XX:+UnlockExperimentalVMOptions -XX:+UseZGC\n```\n因为ZGC还处于实验阶段，所以需要通过JVM参数UnlockExperimentalVMOptions 来解锁这个特性。\n<a name=\"73a9aae1\"></a>\n## JEP 335: Deprecate the Nashorn JavaScript Engine（弃用 Nashorn JavaScript 引擎）\n<a name=\"6f87a8bf\"></a>\n## JEP 336: Deprecate the Pack200 Tools and API（弃用 Pack200 工具和 API）\n> 参考:[http://openjdk.java.net/projects/jdk/11/](http://openjdk.java.net/projects/jdk/11/)\n\n\n\n作者：IT4Life<br />链接：https://www.jianshu.com/p/ae60abb6752d<br />来源：简书<br />简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。\n",
    "body_draft": "",
    "body_html": "<h1 id=\"38f13363\">一、JDK11新特性一览</h1><ul><li>181: Nest-Based Access Control</li><li>309: Dynamic Class-File Constants</li><li>315: Improve Aarch64 Intrinsics</li><li>318: Epsilon: A No-Op Garbage Collector</li><li>320: Remove the Java EE and CORBA Modules</li><li>321: HTTP Client (Standard)</li><li>323: Local-Variable Syntax for Lambda Parameters</li><li>324: Key Agreement with Curve25519 and Curve448</li><li>327: Unicode 10</li><li>328: Flight Recorder</li><li>329: ChaCha20 and Poly1305 Cryptographic Algorithms</li><li>330: Launch Single-File Source-Code Programs</li><li>331: Low-Overhead Heap Profiling</li><li>332: Transport Layer Security (TLS) 1.3</li><li>333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental)</li><li>335: Deprecate the Nashorn JavaScript Engine</li><li>336: Deprecate the Pack200 Tools and API</li></ul><h1 id=\"2af02823\">二、JDK11发布计划</h1><table class=\"lake-table\" style=\"width: 721px;\"><colgroup><col width=\"240\"></col><col width=\"240\"></col><col width=\"240\"></col></colgroup><tr><td>日期</td><td>阶段</td><td>说明</td></tr><tbody><tr><td>2018/06/28</td><td>Rampdown Phase One (fork from main line)</td><td>对进入Rampdown阶段的变化会应用越来越严格的审查。在阶段1中，只能修复 P1-P3 错误。</td></tr><tr><td>2018/07/26</td><td>Rampdown Phase Two</td><td>在阶段2中，只能修复 showstopper 错误</td></tr><tr><td>2018/08/16</td><td>Initial Release Candidate</td><td></td></tr><tr><td>2018/08/30</td><td>Final Release Candidate</td><td>在此阶段必须宣布最终候选版的发布日期并提交以进行测试</td></tr><tr><td>2018/09/25</td><td>General Availability</td><td>最终版本，可在生产环境正式使用</td></tr></tbody></table><h1 id=\"ba736b03\">三、JDK11特性解读</h1><h2 id=\"f1d9d9ad\">JEP 181: Nest-Based Access Control（基于嵌套的访问控制）</h2><h2 id=\"08efa7ec\">JEP 309: Dynamic Class-File Constants（动态类文件常量）</h2><p>Java的类型文件格式将被拓展，支持一种新的常量池格式：CONSTANT_Dynamic，加载CONSTANT_Dynamic会将创建委托给bootstrap方法。</p><h3 id=\"73e82552\">目标</h3><p>其目标是降低开发新形式的可实现类文件约束带来的成本和干扰。</p><h2 id=\"7a427c0f\">JEP 315: Improve Aarch64 Intrinsics（改进 Aarch64 函数）</h2><h2 id=\"682cd5d6\">JEP 318: Epsilon: A No-Op Garbage Collector（Epsilon — 一个无操作的垃圾收集器）</h2><p>JDK上对这个特性的描述是：开发一个处理内存分配但不实现任何实际内存回收机制的GC，一旦可用堆内存用完，JVM就会退出。</p><p>如果有System.gc()的调用，实际上什么也不会发生（这种场景下和-XX:+DisableExplicitGC效果一样），因为没有内存回收，这个实现可能会警告用户尝试强制GC是徒劳。</p><p>用法非常简单：</p><pre><code>-XX:+UseEpsilonGC。</code></pre><h3 id=\"5fec942d\">动机</h3><p>提供完全被动的GC实现，具有有限的分配限制和尽可能低的延迟开销，但代价是内存占用和内存吞吐量。</p><p>众所周知，Java实现可广泛选择高度可配置的GC实现。 各种可用的收集器最终满足不同的需求，即使它们的可配置性使它们的功能相交。 有时更容易维护单独的实现，而不是在现有GC实现上堆积另一个配置选项。</p><p>它的主要用途如下：</p><ul><li>性能测试（它可以帮助过滤掉GC引起的性能假象）；</li><li>内存压力测试（例如，知道测试用例应该分配不超过1 GB的内存，我们可以使用-Xmx1g配置-XX:+UseEpsilonGC，如果违反了该约束，则会heap dump并崩溃）；</li><li>非常短的JOB任务（对于这种任务，接受GC清理堆那都是浪费空间）；</li><li>VM接口测试；</li><li>Last-drop 延迟&amp;吞吐改进；</li></ul><h2 id=\"dc894810\">JEP 320: Remove the Java EE and CORBA Modules（删除 Java EE 和 CORBA 模块）</h2><p>Java EE和CORBA两个模块在JDK9中已经标记&quot;deprecated&quot;，在JDK11中正式移除。JDK中deprecated的意思是在不建议使用，在未来的release版本会被删除。</p><h3 id=\"5fec942d-1\">动机</h3><p>JavaEE由4部分组成：</p><ul><li>JAX-WS (Java API for XML-Based Web Services),</li><li>JAXB (Java Architecture for XML Binding)</li><li>JAF (the JavaBeans Activation Framework)</li><li>Common Annotations.</li></ul><p>但是这个特性和JavaSE关系不大。并且JavaEE被维护在Github（<a href=\"https://github.com/javaee\" target=\"_blank\">https://github.com/javaee</a>）中，版本同步造成维护困难。最后，JavaEE可以单独引用，maven中心仓库也提供了JavaEE（<a href=\"http://mvnrepository.com/artifact/javax/javaee-api/8.0\" target=\"_blank\">http://mvnrepository.com/artifact/javax/javaee-api/8.0</a>），所以没必要把JavaEE包含到JavaSE中。</p><p>至于CORBA，使用Java中的CORBA开发程序没有太大的兴趣。因此，在JavaEE就把CORBA标记为&quot;Proposed Optional&quot;，这就表明将来可能会放弃对这些技术的必要支持。</p><h2 id=\"5898ff09\">JEP 321: HTTP Client (Standard)（标准HTTP客户端）</h2><p>将JDK9引进并孵化的HTTP客户端API作为标准，即HTTP/2 Client。它定义了一个全新的实现了HTTP/2和WebSocket的HTTP客户端API，并且可以取代HttpURLConnection。</p><p>动机</p><p>已经存在的HttpURLConnection有如下问题:</p><ul><li>在设计时考虑了多种协议，但是现在几乎所有协议现已不存在。</li><li>API早于HTTP/1.1并且太抽象；</li><li>使用很不友好；</li><li>只能以阻塞模式工作；</li><li>非常难维护；</li></ul><h2 id=\"ff675a7b\">JEP 323: Local-Variable Syntax for Lambda Parameters（用于 Lambda 参数的局部变量语法）</h2><p>在声明隐式类型的lambda表达式的形参时允许使用var。</p><h3 id=\"5fec942d-2\">动机</h3><p>lamdba表达式可能是隐式类型的，它形参的所有类型全部靠推到出来的。隐式类型lambda表达式如下：</p><pre><code>(x, y) -&gt; x.process(y)</code></pre><p>Java SE 10让隐式类型变量可用于本地变量:</p><pre><code>var foo = new Foo();\nfor (var foo : foos) { ... }\ntry (var foo = ...) { ... } catch ...</code></pre><p>为了和本地变量保持一致，我们希望允许var作为隐式类型lambda表达式的形参：</p><pre><code>(var x, var y) -&gt; x.process(y)</code></pre><p>统一格式的一个好处就是modifiers和notably注解能被加在本地变量和lambda表达式的形参上，并且不会丢失简洁性：</p><pre><code>@Nonnull var x = new Foo();\n(@Nonnull var x, @Nullable var y) -&gt; x.process(y)</code></pre><h2 id=\"c5b2468b\">JEP 324: Key Agreement with Curve25519 and Curve448（Curve25519 和 Curve448 算法的密钥协议）</h2><p>用RFC 7748中描述到的 Curve25519 和Curve448 实现秘钥协议。RFC 7748定义的秘钥协商方案更高效，更安全。这个JEP的主要目标就是为这个标准定义API和实现。</p><h3 id=\"5fec942d-3\">动机</h3><p>密码学要求使用 Curve25519 和Curve448 是因为它们的安全性和性能。JDK会增加两个新的接口XECPublicKey 和 XECPrivateKey，示例代码如下：</p><pre><code>KeyPairGenerator kpg = KeyPairGenerator.getInstance(&quot;XDH&quot;);\nNamedParameterSpec paramSpec = new NamedParameterSpec(&quot;X25519&quot;);\nkpg.initialize(paramSpec); // equivalent to kpg.initialize(255)\n// alternatively: kpg = KeyPairGenerator.getInstance(&quot;X25519&quot;)\nKeyPair kp = kpg.generateKeyPair();\nKeyFactory kf = KeyFactory.getInstance(&quot;XDH&quot;);\nBigInteger u = ...\nXECPublicKeySpec pubSpec = new XECPublicKeySpec(paramSpec, u);\nPublicKey pubKey = kf.generatePublic(pubSpec);\nKeyAgreement ka = KeyAgreement.getInstance(&quot;XDH&quot;);\nka.init(kp.getPrivate());\nka.doPhase(pubKey, true);\nbyte[] secret = ka.generateSecret();</code></pre><h2 id=\"8e8f3059\">JEP 327: Unicode 10</h2><p>更新平台API支持Unicode 10.0版本（Unicode 10.0概述：Unicode 10.0 增加了8518 个字符, 总计达到了136,690个字符. 并且增加了4个脚本, 总结139个脚本, 同时还有56个新的emoji表情符号。参考：<a href=\"http://unicode.org/versions/Unicode10.0.0/\" target=\"_blank\">http://unicode.org/versions/Unicode10.0.0/</a>）。</p><h3 id=\"5fec942d-4\">动机</h3><p>Unicode是一个不断进化的工业标准，因此必须不断保持Java和Unicode最新版本同步。</p><h2 id=\"31b48229\">JEP 328: Flight Recorder（飞行记录器）</h2><p>提供一个低开销的，为了排错Java应用问题，以及JVM问题的数据收集框架，希望达到的目标如下：</p><ul><li>提供用于生产和消费数据作为事件的API；</li><li>提供缓存机制和二进制数据格式；</li><li>允许事件配置和事件过滤；</li><li>提供OS，JVM和JDK库的事件；</li></ul><h3 id=\"5fec942d-5\">动机</h3><p>排错，监控，性能分析是整个开发生命周期必不可少的一部分，但是某些问题只会在大量真实数据压力下才会发生在生产环境。</p><p>Flight Recorder记录源自应用程序，JVM和OS的事件。 事件存储在一个文件中，该文件可以附加到错误报告中并由支持工程师进行检查，允许事后分析导致问题的时期内的问题。工具可以使用API从记录文件中提取信息。</p><h2 id=\"7604ff7a\">JEP 329: ChaCha20 and Poly1305 Cryptographic Algorithms（ChaCha20 和 Poly1305 加密算法）</h2><p>实现RFC 7539中指定的 ChaCha20 和 ChaCha20-Poly1305 两种加密算法。</p><h3 id=\"5fec942d-6\">动机</h3><p>唯一一个其他广泛采用的RC4长期以来一直被认为是不安全的，业界一致认为当下ChaCha20-Poly1305是安全的。</p><h2 id=\"d1b6ddf7\">JEP 330: Launch Single-File Source-Code Programs（启动单一文件的源代码程序）</h2><p>增强Java启动器支持运行单个Java源代码文件的程序。</p><h3 id=\"5fec942d-7\">动机</h3><p>单文件程序是指整个程序只有一个源码文件，通常是早期学习Java阶段，或者写一个小型工具类。以HelloWorld.java为例，运行它之前需要先编译。我们希望Java启动器能直接运行这个源码级的程序：</p><pre><code>java HelloWorld.java</code></pre><p>等价于：</p><pre><code>javac -d &lt;memory&gt; HelloWorld.java\njava -cp &lt;memory&gt; helloWorld\njava Factorial.java 3 4 5</code></pre><p>等价于：</p><pre><code>javac -d &lt;memory&gt; Factorial.java\njava -cp &lt;memory&gt; Factorial 3 4 5</code></pre><p>到JDK10为止，Java启动器能以三种方式运行：</p><ol><li>启动一个class文件；</li><li>启动一个JAR中的main方法类；</li><li>启动一个模块中的main方法类；</li></ol><p>JDK11再加一个，即第四种方式：启动一个源文件申明的类。</p><h2 id=\"20cb9647\">JEP 331: Low-Overhead Heap Profiling（低开销的 Heap Profiling）</h2><p>提供一种低开销的Java堆分配采样方法，得到堆分配的Java对象信息，可通过JVMTI访问。希望达到的目标如下：</p><ul><li>足够低的开销，可以默认且一直开启；</li><li>能通过定义好的程序接口访问；</li><li>能采样所有分配；</li><li>能给出生存和死亡的Java对象信息；</li><li>动机</li></ul><p>对用户来说，了解它们堆里的内存是很重要的需求。目前有一些已经开发的工具，允许用户窥探它们的堆，比如：Java Flight Recorder, jmap, YourKit, 以及VisualVM tools.。但是这工具都有一个很大的缺点：无法得到对象的分配位置。headp dump以及heap histo都没有这个信息，但是这个信息对于调试内存问题至关重要。因为它能告诉开发者，他们的代码发生（尤其是坏的）分配的确切位置。</p><h2 id=\"ddf1cc36\">JEP 332: Transport Layer Security (TLS) 1.3（支持 TLS 1.3）</h2><p>实现TLS协议1.3版本。（TLS允许客户端和服务端通过互联网以一种防止窃听，篡改以及消息伪造的方式进行通信）。</p><h3 id=\"5fec942d-8\">动机</h3><p>TLS 1.3是TLS协议的重大改进，与以前的版本相比，它提供了显着的安全性和性能改进。其他供应商的几个早期实现已经可用。我们需要支持TLS 1.3以保持竞争力并与最新标准保持同步。这个特性的实现动机和Unicode 10一样，也是紧跟历史潮流。</p><h2 id=\"beb47936\">JEP 333: ZGC: A Scalable Low-Latency Garbage Collector (可伸缩低延迟垃圾收集器)</h2><p>ZGC：这应该是JDK11最为瞩目的特性，没有之一。但是后面带了Experimental，说明还不建议用到生产环境。看看官方对这个特性的目标描述：</p><ul><li>GC暂停时间不会超过10ms；</li><li>即能处理几百兆小堆，也能处理几个T的大堆（OMG）；</li><li>和G1相比，应用吞吐能力不会下降超过15%；</li><li>为未来的GC功能和利用colord指针以及Load barriers优化奠定基础；</li><li>初始只支持64位系统；</li></ul><h3 id=\"5fec942d-9\">动机</h3><p>GC是Java主要优势之一。然而，当GC停顿太长，就会开始影响应用的响应时间。消除或者减少GC停顿时长，Java将对更广泛的应用场景是一个更有吸引力的平台。此外，现代系统中可用内存不断增长， 用户和程序员希望JVM能够以高效的方式充分利用这些内存，并且无需长时间的GC暂停时间。</p><p>ZGC一个并发，基于region，压缩型的垃圾收集器，只有root扫描阶段会STW，因此GC停顿时间不会随着堆的增长和存活对象的增长而变长。</p><p>ZGC和G1停顿时间比较：</p><pre><code>ZGC\n                avg: 1.091ms (+/-0.215ms)\n    95th percentile: 1.380ms\n    99th percentile: 1.512ms\n  99.9th percentile: 1.663ms\n 99.99th percentile: 1.681ms\n                max: 1.681ms\nG1\n                avg: 156.806ms (+/-71.126ms)\n    95th percentile: 316.672ms\n    99th percentile: 428.095ms\n  99.9th percentile: 543.846ms\n 99.99th percentile: 543.846ms\n                max: 543.846ms</code></pre><p>用法：</p><pre><code>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code></pre><p>因为ZGC还处于实验阶段，所以需要通过JVM参数UnlockExperimentalVMOptions 来解锁这个特性。</p><h2 id=\"73a9aae1\">JEP 335: Deprecate the Nashorn JavaScript Engine（弃用 Nashorn JavaScript 引擎）</h2><h2 id=\"6f87a8bf\">JEP 336: Deprecate the Pack200 Tools and API（弃用 Pack200 工具和 API）</h2><blockquote><p>参考:<a href=\"http://openjdk.java.net/projects/jdk/11/\" target=\"_blank\">http://openjdk.java.net/projects/jdk/11/</a></p></blockquote><p><br /></p><p><br /></p><p>作者：IT4Life</p><p>链接：https://www.jianshu.com/p/ae60abb6752d</p><p>来源：简书</p><p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>",
    "body_lake": "<!doctype lake><h1 id=\"38f13363\">一、JDK11新特性一览</h1><ul><li>181: Nest-Based Access Control</li><li>309: Dynamic Class-File Constants</li><li>315: Improve Aarch64 Intrinsics</li><li>318: Epsilon: A No-Op Garbage Collector</li><li>320: Remove the Java EE and CORBA Modules</li><li>321: HTTP Client (Standard)</li><li>323: Local-Variable Syntax for Lambda Parameters</li><li>324: Key Agreement with Curve25519 and Curve448</li><li>327: Unicode 10</li><li>328: Flight Recorder</li><li>329: ChaCha20 and Poly1305 Cryptographic Algorithms</li><li>330: Launch Single-File Source-Code Programs</li><li>331: Low-Overhead Heap Profiling</li><li>332: Transport Layer Security (TLS) 1.3</li><li>333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental)</li><li>335: Deprecate the Nashorn JavaScript Engine</li><li>336: Deprecate the Pack200 Tools and API</li></ul><h1 id=\"2af02823\">二、JDK11发布计划</h1><card type=\"block\" name=\"table\" value=\"data:%7B%22rows%22%3A6%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20721px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20span%3D%5C%221%5C%22%20width%3D%5C%22240%5C%22%20%2F%3E%3Ccol%20span%3D%5C%221%5C%22%20width%3D%5C%22240%5C%22%20%2F%3E%3Ccol%20span%3D%5C%221%5C%22%20width%3D%5C%22240%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Cthead%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E%E6%97%A5%E6%9C%9F%3C%2Ftd%3E%3Ctd%3E%E9%98%B6%E6%AE%B5%3C%2Ftd%3E%3Ctd%3E%E8%AF%B4%E6%98%8E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Fthead%3E%3Ctbody%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E2018%2F06%2F28%3C%2Ftd%3E%3Ctd%3ERampdown%20Phase%20One%20(fork%20from%20main%20line)%3C%2Ftd%3E%3Ctd%3E%E5%AF%B9%E8%BF%9B%E5%85%A5Rampdown%E9%98%B6%E6%AE%B5%E7%9A%84%E5%8F%98%E5%8C%96%E4%BC%9A%E5%BA%94%E7%94%A8%E8%B6%8A%E6%9D%A5%E8%B6%8A%E4%B8%A5%E6%A0%BC%E7%9A%84%E5%AE%A1%E6%9F%A5%E3%80%82%E5%9C%A8%E9%98%B6%E6%AE%B51%E4%B8%AD%EF%BC%8C%E5%8F%AA%E8%83%BD%E4%BF%AE%E5%A4%8D%20P1-P3%20%E9%94%99%E8%AF%AF%E3%80%82%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E2018%2F07%2F26%3C%2Ftd%3E%3Ctd%3ERampdown%20Phase%20Two%3C%2Ftd%3E%3Ctd%3E%E5%9C%A8%E9%98%B6%E6%AE%B52%E4%B8%AD%EF%BC%8C%E5%8F%AA%E8%83%BD%E4%BF%AE%E5%A4%8D%20showstopper%20%E9%94%99%E8%AF%AF%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E2018%2F08%2F16%3C%2Ftd%3E%3Ctd%3EInitial%20Release%20Candidate%3C%2Ftd%3E%3Ctd%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E2018%2F08%2F30%3C%2Ftd%3E%3Ctd%3EFinal%20Release%20Candidate%3C%2Ftd%3E%3Ctd%3E%E5%9C%A8%E6%AD%A4%E9%98%B6%E6%AE%B5%E5%BF%85%E9%A1%BB%E5%AE%A3%E5%B8%83%E6%9C%80%E7%BB%88%E5%80%99%E9%80%89%E7%89%88%E7%9A%84%E5%8F%91%E5%B8%83%E6%97%A5%E6%9C%9F%E5%B9%B6%E6%8F%90%E4%BA%A4%E4%BB%A5%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20style%3D%5C%22height%3A%2033px%3B%5C%22%3E%3Ctd%3E2018%2F09%2F25%3C%2Ftd%3E%3Ctd%3EGeneral%20Availability%3C%2Ftd%3E%3Ctd%3E%E6%9C%80%E7%BB%88%E7%89%88%E6%9C%AC%EF%BC%8C%E5%8F%AF%E5%9C%A8%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E6%AD%A3%E5%BC%8F%E4%BD%BF%E7%94%A8%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22id%22%3A%22hjtJn%22%7D\"></card><h1 id=\"ba736b03\">三、JDK11特性解读</h1><h2 id=\"f1d9d9ad\">JEP 181: Nest-Based Access Control（基于嵌套的访问控制）</h2><h2 id=\"08efa7ec\">JEP 309: Dynamic Class-File Constants（动态类文件常量）</h2><p>Java的类型文件格式将被拓展，支持一种新的常量池格式：CONSTANT_Dynamic，加载CONSTANT_Dynamic会将创建委托给bootstrap方法。</p><h3 id=\"73e82552\">目标</h3><p>其目标是降低开发新形式的可实现类文件约束带来的成本和干扰。</p><h2 id=\"7a427c0f\">JEP 315: Improve Aarch64 Intrinsics（改进 Aarch64 函数）</h2><h2 id=\"682cd5d6\">JEP 318: Epsilon: A No-Op Garbage Collector（Epsilon — 一个无操作的垃圾收集器）</h2><p>JDK上对这个特性的描述是：开发一个处理内存分配但不实现任何实际内存回收机制的GC，一旦可用堆内存用完，JVM就会退出。</p><p>如果有System.gc()的调用，实际上什么也不会发生（这种场景下和-XX:+DisableExplicitGC效果一样），因为没有内存回收，这个实现可能会警告用户尝试强制GC是徒劳。</p><p>用法非常简单：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22-XX%3A%2BUseEpsilonGC%E3%80%82%22%7D\"></card><h3 id=\"5fec942d\">动机</h3><p>提供完全被动的GC实现，具有有限的分配限制和尽可能低的延迟开销，但代价是内存占用和内存吞吐量。</p><p>众所周知，Java实现可广泛选择高度可配置的GC实现。 各种可用的收集器最终满足不同的需求，即使它们的可配置性使它们的功能相交。 有时更容易维护单独的实现，而不是在现有GC实现上堆积另一个配置选项。</p><p>它的主要用途如下：</p><ul><li>性能测试（它可以帮助过滤掉GC引起的性能假象）；</li><li>内存压力测试（例如，知道测试用例应该分配不超过1 GB的内存，我们可以使用-Xmx1g配置-XX:+UseEpsilonGC，如果违反了该约束，则会heap dump并崩溃）；</li><li>非常短的JOB任务（对于这种任务，接受GC清理堆那都是浪费空间）；</li><li>VM接口测试；</li><li>Last-drop 延迟&amp;吞吐改进；</li></ul><h2 id=\"dc894810\">JEP 320: Remove the Java EE and CORBA Modules（删除 Java EE 和 CORBA 模块）</h2><p>Java EE和CORBA两个模块在JDK9中已经标记&quot;deprecated&quot;，在JDK11中正式移除。JDK中deprecated的意思是在不建议使用，在未来的release版本会被删除。</p><h3 id=\"5fec942d-1\">动机</h3><p>JavaEE由4部分组成：</p><ul><li>JAX-WS (Java API for XML-Based Web Services),</li><li>JAXB (Java Architecture for XML Binding)</li><li>JAF (the JavaBeans Activation Framework)</li><li>Common Annotations.</li></ul><p>但是这个特性和JavaSE关系不大。并且JavaEE被维护在Github（<a href=\"https://github.com/javaee\" target=\"_blank\">https://github.com/javaee</a>）中，版本同步造成维护困难。最后，JavaEE可以单独引用，maven中心仓库也提供了JavaEE（<a href=\"http://mvnrepository.com/artifact/javax/javaee-api/8.0\" target=\"_blank\">http://mvnrepository.com/artifact/javax/javaee-api/8.0</a>），所以没必要把JavaEE包含到JavaSE中。</p><p>至于CORBA，使用Java中的CORBA开发程序没有太大的兴趣。因此，在JavaEE就把CORBA标记为&quot;Proposed Optional&quot;，这就表明将来可能会放弃对这些技术的必要支持。</p><h2 id=\"5898ff09\">JEP 321: HTTP Client (Standard)（标准HTTP客户端）</h2><p>将JDK9引进并孵化的HTTP客户端API作为标准，即HTTP/2 Client。它定义了一个全新的实现了HTTP/2和WebSocket的HTTP客户端API，并且可以取代HttpURLConnection。</p><p>动机</p><p>已经存在的HttpURLConnection有如下问题:</p><ul><li>在设计时考虑了多种协议，但是现在几乎所有协议现已不存在。</li><li>API早于HTTP/1.1并且太抽象；</li><li>使用很不友好；</li><li>只能以阻塞模式工作；</li><li>非常难维护；</li></ul><h2 id=\"ff675a7b\">JEP 323: Local-Variable Syntax for Lambda Parameters（用于 Lambda 参数的局部变量语法）</h2><p>在声明隐式类型的lambda表达式的形参时允许使用var。</p><h3 id=\"5fec942d-2\">动机</h3><p>lamdba表达式可能是隐式类型的，它形参的所有类型全部靠推到出来的。隐式类型lambda表达式如下：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22(x%2C%20y)%20-%3E%20x.process(y)%22%7D\"></card><p>Java SE 10让隐式类型变量可用于本地变量:</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22var%20foo%20%3D%20new%20Foo()%3B%5Cnfor%20(var%20foo%20%3A%20foos)%20%7B%20...%20%7D%5Cntry%20(var%20foo%20%3D%20...)%20%7B%20...%20%7D%20catch%20...%22%7D\"></card><p>为了和本地变量保持一致，我们希望允许var作为隐式类型lambda表达式的形参：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22(var%20x%2C%20var%20y)%20-%3E%20x.process(y)%22%7D\"></card><p>统一格式的一个好处就是modifiers和notably注解能被加在本地变量和lambda表达式的形参上，并且不会丢失简洁性：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%40Nonnull%20var%20x%20%3D%20new%20Foo()%3B%5Cn(%40Nonnull%20var%20x%2C%20%40Nullable%20var%20y)%20-%3E%20x.process(y)%22%7D\"></card><h2 id=\"c5b2468b\">JEP 324: Key Agreement with Curve25519 and Curve448（Curve25519 和 Curve448 算法的密钥协议）</h2><p>用RFC 7748中描述到的 Curve25519 和Curve448 实现秘钥协议。RFC 7748定义的秘钥协商方案更高效，更安全。这个JEP的主要目标就是为这个标准定义API和实现。</p><h3 id=\"5fec942d-3\">动机</h3><p>密码学要求使用 Curve25519 和Curve448 是因为它们的安全性和性能。JDK会增加两个新的接口XECPublicKey 和 XECPrivateKey，示例代码如下：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22KeyPairGenerator%20kpg%20%3D%20KeyPairGenerator.getInstance(%5C%22XDH%5C%22)%3B%5CnNamedParameterSpec%20paramSpec%20%3D%20new%20NamedParameterSpec(%5C%22X25519%5C%22)%3B%5Cnkpg.initialize(paramSpec)%3B%20%2F%2F%20equivalent%20to%20kpg.initialize(255)%5Cn%2F%2F%20alternatively%3A%20kpg%20%3D%20KeyPairGenerator.getInstance(%5C%22X25519%5C%22)%5CnKeyPair%20kp%20%3D%20kpg.generateKeyPair()%3B%5CnKeyFactory%20kf%20%3D%20KeyFactory.getInstance(%5C%22XDH%5C%22)%3B%5CnBigInteger%20u%20%3D%20...%5CnXECPublicKeySpec%20pubSpec%20%3D%20new%20XECPublicKeySpec(paramSpec%2C%20u)%3B%5CnPublicKey%20pubKey%20%3D%20kf.generatePublic(pubSpec)%3B%5CnKeyAgreement%20ka%20%3D%20KeyAgreement.getInstance(%5C%22XDH%5C%22)%3B%5Cnka.init(kp.getPrivate())%3B%5Cnka.doPhase(pubKey%2C%20true)%3B%5Cnbyte%5B%5D%20secret%20%3D%20ka.generateSecret()%3B%22%7D\"></card><h2 id=\"8e8f3059\">JEP 327: Unicode 10</h2><p>更新平台API支持Unicode 10.0版本（Unicode 10.0概述：Unicode 10.0 增加了8518 个字符, 总计达到了136,690个字符. 并且增加了4个脚本, 总结139个脚本, 同时还有56个新的emoji表情符号。参考：<a href=\"http://unicode.org/versions/Unicode10.0.0/\" target=\"_blank\">http://unicode.org/versions/Unicode10.0.0/</a>）。</p><h3 id=\"5fec942d-4\">动机</h3><p>Unicode是一个不断进化的工业标准，因此必须不断保持Java和Unicode最新版本同步。</p><h2 id=\"31b48229\">JEP 328: Flight Recorder（飞行记录器）</h2><p>提供一个低开销的，为了排错Java应用问题，以及JVM问题的数据收集框架，希望达到的目标如下：</p><ul><li>提供用于生产和消费数据作为事件的API；</li><li>提供缓存机制和二进制数据格式；</li><li>允许事件配置和事件过滤；</li><li>提供OS，JVM和JDK库的事件；</li></ul><h3 id=\"5fec942d-5\">动机</h3><p>排错，监控，性能分析是整个开发生命周期必不可少的一部分，但是某些问题只会在大量真实数据压力下才会发生在生产环境。</p><p>Flight Recorder记录源自应用程序，JVM和OS的事件。 事件存储在一个文件中，该文件可以附加到错误报告中并由支持工程师进行检查，允许事后分析导致问题的时期内的问题。工具可以使用API从记录文件中提取信息。</p><h2 id=\"7604ff7a\">JEP 329: ChaCha20 and Poly1305 Cryptographic Algorithms（ChaCha20 和 Poly1305 加密算法）</h2><p>实现RFC 7539中指定的 ChaCha20 和 ChaCha20-Poly1305 两种加密算法。</p><h3 id=\"5fec942d-6\">动机</h3><p>唯一一个其他广泛采用的RC4长期以来一直被认为是不安全的，业界一致认为当下ChaCha20-Poly1305是安全的。</p><h2 id=\"d1b6ddf7\">JEP 330: Launch Single-File Source-Code Programs（启动单一文件的源代码程序）</h2><p>增强Java启动器支持运行单个Java源代码文件的程序。</p><h3 id=\"5fec942d-7\">动机</h3><p>单文件程序是指整个程序只有一个源码文件，通常是早期学习Java阶段，或者写一个小型工具类。以HelloWorld.java为例，运行它之前需要先编译。我们希望Java启动器能直接运行这个源码级的程序：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22java%20HelloWorld.java%22%7D\"></card><p>等价于：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22javac%20-d%20%3Cmemory%3E%20HelloWorld.java%5Cnjava%20-cp%20%3Cmemory%3E%20helloWorld%5Cnjava%20Factorial.java%203%204%205%22%7D\"></card><p>等价于：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22javac%20-d%20%3Cmemory%3E%20Factorial.java%5Cnjava%20-cp%20%3Cmemory%3E%20Factorial%203%204%205%22%7D\"></card><p>到JDK10为止，Java启动器能以三种方式运行：</p><ol><li>启动一个class文件；</li><li>启动一个JAR中的main方法类；</li><li>启动一个模块中的main方法类；</li></ol><p>JDK11再加一个，即第四种方式：启动一个源文件申明的类。</p><h2 id=\"20cb9647\">JEP 331: Low-Overhead Heap Profiling（低开销的 Heap Profiling）</h2><p>提供一种低开销的Java堆分配采样方法，得到堆分配的Java对象信息，可通过JVMTI访问。希望达到的目标如下：</p><ul><li>足够低的开销，可以默认且一直开启；</li><li>能通过定义好的程序接口访问；</li><li>能采样所有分配；</li><li>能给出生存和死亡的Java对象信息；</li><li>动机</li></ul><p>对用户来说，了解它们堆里的内存是很重要的需求。目前有一些已经开发的工具，允许用户窥探它们的堆，比如：Java Flight Recorder, jmap, YourKit, 以及VisualVM tools.。但是这工具都有一个很大的缺点：无法得到对象的分配位置。headp dump以及heap histo都没有这个信息，但是这个信息对于调试内存问题至关重要。因为它能告诉开发者，他们的代码发生（尤其是坏的）分配的确切位置。</p><h2 id=\"ddf1cc36\">JEP 332: Transport Layer Security (TLS) 1.3（支持 TLS 1.3）</h2><p>实现TLS协议1.3版本。（TLS允许客户端和服务端通过互联网以一种防止窃听，篡改以及消息伪造的方式进行通信）。</p><h3 id=\"5fec942d-8\">动机</h3><p>TLS 1.3是TLS协议的重大改进，与以前的版本相比，它提供了显着的安全性和性能改进。其他供应商的几个早期实现已经可用。我们需要支持TLS 1.3以保持竞争力并与最新标准保持同步。这个特性的实现动机和Unicode 10一样，也是紧跟历史潮流。</p><h2 id=\"beb47936\">JEP 333: ZGC: A Scalable Low-Latency Garbage Collector (可伸缩低延迟垃圾收集器)</h2><p>ZGC：这应该是JDK11最为瞩目的特性，没有之一。但是后面带了Experimental，说明还不建议用到生产环境。看看官方对这个特性的目标描述：</p><ul><li>GC暂停时间不会超过10ms；</li><li>即能处理几百兆小堆，也能处理几个T的大堆（OMG）；</li><li>和G1相比，应用吞吐能力不会下降超过15%；</li><li>为未来的GC功能和利用colord指针以及Load barriers优化奠定基础；</li><li>初始只支持64位系统；</li></ul><h3 id=\"5fec942d-9\">动机</h3><p>GC是Java主要优势之一。然而，当GC停顿太长，就会开始影响应用的响应时间。消除或者减少GC停顿时长，Java将对更广泛的应用场景是一个更有吸引力的平台。此外，现代系统中可用内存不断增长， 用户和程序员希望JVM能够以高效的方式充分利用这些内存，并且无需长时间的GC暂停时间。</p><p>ZGC一个并发，基于region，压缩型的垃圾收集器，只有root扫描阶段会STW，因此GC停顿时间不会随着堆的增长和存活对象的增长而变长。</p><p>ZGC和G1停顿时间比较：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22ZGC%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20avg%3A%201.091ms%20(%2B%2F-0.215ms)%5Cn%20%20%20%2095th%20percentile%3A%201.380ms%5Cn%20%20%20%2099th%20percentile%3A%201.512ms%5Cn%20%2099.9th%20percentile%3A%201.663ms%5Cn%2099.99th%20percentile%3A%201.681ms%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20max%3A%201.681ms%5CnG1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20avg%3A%20156.806ms%20(%2B%2F-71.126ms)%5Cn%20%20%20%2095th%20percentile%3A%20316.672ms%5Cn%20%20%20%2099th%20percentile%3A%20428.095ms%5Cn%20%2099.9th%20percentile%3A%20543.846ms%5Cn%2099.99th%20percentile%3A%20543.846ms%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20max%3A%20543.846ms%22%7D\"></card><p>用法：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22-XX%3A%2BUnlockExperimentalVMOptions%20-XX%3A%2BUseZGC%22%7D\"></card><p>因为ZGC还处于实验阶段，所以需要通过JVM参数UnlockExperimentalVMOptions 来解锁这个特性。</p><h2 id=\"73a9aae1\">JEP 335: Deprecate the Nashorn JavaScript Engine（弃用 Nashorn JavaScript 引擎）</h2><h2 id=\"6f87a8bf\">JEP 336: Deprecate the Pack200 Tools and API（弃用 Pack200 工具和 API）</h2><blockquote><p>参考:<a href=\"http://openjdk.java.net/projects/jdk/11/\" target=\"_blank\">http://openjdk.java.net/projects/jdk/11/</a></p></blockquote><p><br /></p><p><br /></p><p>作者：IT4Life</p><p>链接：https://www.jianshu.com/p/ae60abb6752d</p><p>来源：简书</p><p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-25T05:32:59.000Z",
    "deleted_at": null,
    "created_at": "2019-03-25T05:28:09.000Z",
    "updated_at": "2019-03-25T05:32:59.000Z",
    "published_at": "2019-03-25T05:32:59.000Z",
    "first_published_at": "2019-03-25T05:32:59.000Z",
    "word_count": 3062,
    "cover": null,
    "description": "一、JDK11新特性一览181: Nest-Based Access Control309: Dynamic Class-File Constants315: Improve Aarch64 Intrinsics318: Epsilon: A No-Op Garbage Collector32...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1422000,
    "slug": "mxdhng",
    "title": "JDK12新特性",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "作为“功能性版本”，JDK 12 总共包含 8 个新的 JEP ，分别为：\n* 189: [Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)](http://openjdk.java.net/jeps/189) ：新增一个名为 Shenandoah 的垃圾回收器，它通过在 Java 线程运行的同时进行疏散 (evacuation) 工作来减少停顿时间。<br />\n* 230: [Microbenchmark Suite](http://openjdk.java.net/jeps/230)：新增一套微基准测试，使开发者能够基于现有的 Java Microbenchmark Harness（JMH）轻松测试 JDK 的性能，并创建新的基准测试。<br />\n* 325: [Switch Expressions (Preview)](http://openjdk.java.net/jeps/325) ：对 switch 语句进行扩展，使其可以用作语句或表达式，简化日常代码。<br />\n* 334: [JVM Constants API](http://openjdk.java.net/jeps/334) ：引入一个 API 来对关键类文件 (key class-file) 和运行时工件的名义描述（nominal descriptions）进行建模，特别是那些可从常量池加载的常量。<br />\n* 340: [One AArch64 Port, Not Two](http://openjdk.java.net/jeps/340) ：删除与 arm64 端口相关的所有源码，保留 32 位 ARM 移植和 64 位 aarch64 移植。<br />\n* 341: [Default CDS Archives](http://openjdk.java.net/jeps/341) ：默认生成类数据共享（CDS）存档。<br />\n* 344: [Abortable Mixed Collections for G1](http://openjdk.java.net/jeps/344) ：当 G1 垃圾回收器的回收超过暂停目标，则能中止垃圾回收过程。<br />\n* 346: [Promptly Return Unused Committed Memory from G1](http://openjdk.java.net/jeps/346) ：改进 G1 垃圾回收器，以便在空闲时自动将 Java 堆内存返回给操作系统。\n\n总结<br />1.JDK12新增了一个垃圾回收器<br />2.新增一套微基准测试，方便测试JDK性能<br />3.对switch进行扩展，使其可以作语句的表达式。<br />4.新增一个API来对关键类和运行时共建进行建模<br />5.删除arm64 源码，保留arm64和aarch64移植<br />6.默认生成类数据共享存档<br />7.当G1垃圾回收超过暂停目标，则能终止垃圾回收过程<br />8.改进G1垃圾回收机制，以便在空闲时自动将JAVA堆内存韩会给操作系统\n",
    "body_draft": "",
    "body_html": "<p style=\"text-align: left;\">作为“功能性版本”，JDK 12 总共包含 8 个新的 JEP ，分别为：</p><ul style=\"text-align: left;\"><li>189: <a href=\"http://openjdk.java.net/jeps/189\" target=\"_blank\">Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)</a> ：新增一个名为 Shenandoah 的垃圾回收器，它通过在 Java 线程运行的同时进行疏散 (evacuation) 工作来减少停顿时间。<br /></li><li>230: <a href=\"http://openjdk.java.net/jeps/230\" target=\"_blank\">Microbenchmark Suite</a>：新增一套微基准测试，使开发者能够基于现有的 Java Microbenchmark Harness（JMH）轻松测试 JDK 的性能，并创建新的基准测试。<br /></li><li>325: <a href=\"http://openjdk.java.net/jeps/325\" target=\"_blank\">Switch Expressions (Preview)</a> ：对 switch 语句进行扩展，使其可以用作语句或表达式，简化日常代码。<br /></li><li>334: <a href=\"http://openjdk.java.net/jeps/334\" target=\"_blank\">JVM Constants API</a> ：引入一个 API 来对关键类文件 (key class-file) 和运行时工件的名义描述（nominal descriptions）进行建模，特别是那些可从常量池加载的常量。<br /></li><li>340: <a href=\"http://openjdk.java.net/jeps/340\" target=\"_blank\">One AArch64 Port, Not Two</a> ：删除与 arm64 端口相关的所有源码，保留 32 位 ARM 移植和 64 位 aarch64 移植。<br /></li><li>341: <a href=\"http://openjdk.java.net/jeps/341\" target=\"_blank\">Default CDS Archives</a> ：默认生成类数据共享（CDS）存档。<br /></li><li>344: <a href=\"http://openjdk.java.net/jeps/344\" target=\"_blank\">Abortable Mixed Collections for G1</a> ：当 G1 垃圾回收器的回收超过暂停目标，则能中止垃圾回收过程。<br /></li><li>346: <a href=\"http://openjdk.java.net/jeps/346\" target=\"_blank\">Promptly Return Unused Committed Memory from G1</a> ：改进 G1 垃圾回收器，以便在空闲时自动将 Java 堆内存返回给操作系统。</li></ul><p><br /></p><p>总结</p><p>1.JDK12新增了一个垃圾回收器</p><p>2.新增一套微基准测试，方便测试JDK性能</p><p>3.对switch进行扩展，使其可以作语句的表达式。</p><p>4.新增一个API来对关键类和运行时共建进行建模</p><p>5.删除arm64 源码，保留arm64和aarch64移植</p><p>6.默认生成类数据共享存档</p><p>7.当G1垃圾回收超过暂停目标，则能终止垃圾回收过程</p><p>8.改进G1垃圾回收机制，以便在空闲时自动将JAVA堆内存韩会给操作系统</p>",
    "body_lake": "<!doctype lake><p style=\"text-align: left;\">作为“功能性版本”，JDK 12 总共包含 8 个新的 JEP ，分别为：</p><ul style=\"text-align: left;\"><li>189: <a href=\"http://openjdk.java.net/jeps/189\" target=\"_blank\">Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)</a> ：新增一个名为 Shenandoah 的垃圾回收器，它通过在 Java 线程运行的同时进行疏散 (evacuation) 工作来减少停顿时间。<br /></li><li>230: <a href=\"http://openjdk.java.net/jeps/230\" target=\"_blank\">Microbenchmark Suite</a>：新增一套微基准测试，使开发者能够基于现有的 Java Microbenchmark Harness（JMH）轻松测试 JDK 的性能，并创建新的基准测试。<br /></li><li>325: <a href=\"http://openjdk.java.net/jeps/325\" target=\"_blank\">Switch Expressions (Preview)</a> ：对 switch 语句进行扩展，使其可以用作语句或表达式，简化日常代码。<br /></li><li>334: <a href=\"http://openjdk.java.net/jeps/334\" target=\"_blank\">JVM Constants API</a> ：引入一个 API 来对关键类文件 (key class-file) 和运行时工件的名义描述（nominal descriptions）进行建模，特别是那些可从常量池加载的常量。<br /></li><li>340: <a href=\"http://openjdk.java.net/jeps/340\" target=\"_blank\">One AArch64 Port, Not Two</a> ：删除与 arm64 端口相关的所有源码，保留 32 位 ARM 移植和 64 位 aarch64 移植。<br /></li><li>341: <a href=\"http://openjdk.java.net/jeps/341\" target=\"_blank\">Default CDS Archives</a> ：默认生成类数据共享（CDS）存档。<br /></li><li>344: <a href=\"http://openjdk.java.net/jeps/344\" target=\"_blank\">Abortable Mixed Collections for G1</a> ：当 G1 垃圾回收器的回收超过暂停目标，则能中止垃圾回收过程。<br /></li><li>346: <a href=\"http://openjdk.java.net/jeps/346\" target=\"_blank\">Promptly Return Unused Committed Memory from G1</a> ：改进 G1 垃圾回收器，以便在空闲时自动将 Java 堆内存返回给操作系统。</li></ul><p><br /></p><p>总结</p><p>1.JDK12新增了一个垃圾回收器</p><p>2.新增一套微基准测试，方便测试JDK性能</p><p>3.对switch进行扩展，使其可以作语句的表达式。</p><p>4.新增一个API来对关键类和运行时共建进行建模</p><p>5.删除arm64 源码，保留arm64和aarch64移植</p><p>6.默认生成类数据共享存档</p><p>7.当G1垃圾回收超过暂停目标，则能终止垃圾回收过程</p><p>8.改进G1垃圾回收机制，以便在空闲时自动将JAVA堆内存韩会给操作系统<cursor /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-25T05:04:55.000Z",
    "deleted_at": null,
    "created_at": "2019-03-25T04:44:59.000Z",
    "updated_at": "2019-03-25T05:04:55.000Z",
    "published_at": "2019-03-25T05:04:55.000Z",
    "first_published_at": "2019-03-25T05:04:55.000Z",
    "word_count": 458,
    "cover": null,
    "description": "作为“功能性版本”，JDK 12 总共包含 8 个新的 JEP ，分别为：189: Shenandoah: A Low-Pause-Time Garbage Collector (Experimental) ：新增一个名为 Shenandoah 的垃圾回收器，它通过在 Java 线程运行的同时...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1390388,
    "slug": "mpk7ll",
    "title": "redis锁与zookeerper锁区别（1）",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "最近完成毕设过程中对redis锁有所了解，随后呢想到著名的分布式锁zk<br />为了巩固自己的知识领域，为此写这么一篇小文章\n\n<a name=\"39fadae3\"></a>\n# Redis实现分布式锁\n　　1.根据lockKey区进行setnx（set not exist，如果key值为空，则正常设置，返回1，否则不会进行设置并返回0）操作，如果设置成功，表示已经获得锁，否则并没有获取锁。<br />　　2.如果没有获得锁，去Redis上拿到该key对应的值，在该key上我们存储一个时间戳（用毫秒表示，t1），为了避免死锁以及其他客户端占用该锁超过一定时间（5秒），使用该客户端当前时间戳，与存储的时间戳作比较。<br />　　3.如果没有超过该key的使用时限，返回false，表示其他人正在占用该key，不能强制使用；如果已经超过时限，那我们就可以进行解锁，使用我们的时间戳来代替该字段的值。<br />　　4.但是如果在setnx失败后，get该值却无法拿到该字段时，说明操作之前该锁已经被释放，这个时候，最好的办法就是重新执行一遍setnx方法来获取其值以获得该锁。<br />　　释放锁：删除redis中key\n<a name=\"43d34fd3\"></a>\n# Zookeeper实现分布式锁\n基于临时顺序节点：<br />　　1.客户端调用create()方法创建名为“locknode/guid-lock-”的节点，需要注意的是，这里节点的创建类型需要设置为EPHEMERAL_SEQUENTIAL。<br />　　2.客户端调用getChildren(“locknode”)方法来获取所有已经创建的子节点。<br />　　3.客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点是所有节点中序号最小的，那么就认为这个客户端获得了锁。<br />　　4.如果创建的节点不是所有节点中序号最小的，那么则监视比自己创建节点的序列号小的最大的节点，进入等待。直到下次监视的子节点变更的时候，再进行子节点的获取，判断是否获取锁。<br />　　释放锁的过程相对比较简单，就是删除自己创建的那个子节点即可。\n<a name=\"25f9c7fa\"></a>\n## 总结\nredis分布式锁，其实需要自己不断去尝试获取锁，比较消耗性能<br />　　zk分布式锁，获取不到锁，注册个监听器即可，不需要不断主动尝试获取锁，性能开销较小<br />　　另外一点就是，如果是redis获取锁的那个客户端bug了或者挂了，那么只能等待超时时间之后才能释放锁；而zk的话，因为创建的是临时znode，只要客户端挂了，znode就没了，此时就自动释放锁\n\n由于自己资金有限，毕设项目redis先行。\n",
    "body_draft": "",
    "body_html": "<p>最近完成毕设过程中对redis锁有所了解，随后呢想到著名的分布式锁zk</p><p>为了巩固自己的知识领域，为此写这么一篇小文章</p><p><br /></p><h1 id=\"39fadae3\">Redis实现分布式锁</h1><p><span class=\"lake-fontsize-14\">　　1.根据lockKey区进行setnx（set not exist，如果key值为空，则正常设置，返回1，否则不会进行设置并返回0）操作，如果设置成功，表示已经获得锁，否则并没有获取锁。</span></p><p><span class=\"lake-fontsize-14\">　　2.如果没有获得锁，去Redis上拿到该key对应的值，在该key上我们存储一个时间戳（用毫秒表示，t1），为了避免死锁以及其他客户端占用该锁超过一定时间（5秒），使用该客户端当前时间戳，与存储的时间戳作比较。</span></p><p><span class=\"lake-fontsize-14\">　　3.如果没有超过该key的使用时限，返回false，表示其他人正在占用该key，不能强制使用；如果已经超过时限，那我们就可以进行解锁，使用我们的时间戳来代替该字段的值。</span></p><p><span class=\"lake-fontsize-14\">　　4.但是如果在setnx失败后，get该值却无法拿到该字段时，说明操作之前该锁已经被释放，这个时候，最好的办法就是重新执行一遍setnx方法来获取其值以获得该锁。</span></p><p><span class=\"lake-fontsize-14\">　　释放锁：删除redis中key</span></p><h1 id=\"43d34fd3\">Zookeeper实现分布式锁</h1><p><span class=\"lake-fontsize-14\">基于临时顺序节点：</span></p><p><span class=\"lake-fontsize-14\">　　1.客户端调用create()方法创建名为“locknode/guid-lock-”的节点，需要注意的是，这里节点的创建类型需要设置为EPHEMERAL_SEQUENTIAL。</span></p><p><span class=\"lake-fontsize-14\">　　2.客户端调用getChildren(“locknode”)方法来获取所有已经创建的子节点。</span></p><p><span class=\"lake-fontsize-14\">　　3.客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点是所有节点中序号最小的，那么就认为这个客户端获得了锁。</span></p><p><span class=\"lake-fontsize-14\">　　4.如果创建的节点不是所有节点中序号最小的，那么则监视比自己创建节点的序列号小的最大的节点，进入等待。直到下次监视的子节点变更的时候，再进行子节点的获取，判断是否获取锁。</span></p><p><span class=\"lake-fontsize-14\">　　释放锁的过程相对比较简单，就是删除自己创建的那个子节点即可。</span></p><h2 id=\"25f9c7fa\">总结</h2><p style=\"text-indent: 2em;\"><span class=\"lake-fontsize-11\">redis分布式锁，其实需要自己不断去尝试获取锁，比较消耗性能</span></p><p><span class=\"lake-fontsize-11\">　　zk分布式锁，获取不到锁，注册个监听器即可，不需要不断主动尝试获取锁，性能开销较小</span></p><p><span class=\"lake-fontsize-11\">　　另外一点就是，如果是redis获取锁的那个客户端bug了或者挂了，那么只能等待超时时间之后才能释放锁；而zk的话，因为创建的是临时znode，只要客户端挂了，znode就没了，此时就自动释放锁</span></p><p><br /></p><p><span>由于自己资金有限，毕设项目redis先行。</span></p>",
    "body_lake": "<!doctype lake><p>最近完成毕设过程中对redis锁有所了解，随后呢想到著名的分布式锁zk</p><p>为了巩固自己的知识领域，为此写这么一篇小文章</p><p><br /></p><h1 id=\"39fadae3\">Redis实现分布式锁</h1><p><span class=\"lake-fontsize-14\">　　1.根据lockKey区进行setnx（set not exist，如果key值为空，则正常设置，返回<cursor />1，否则不会进行设置并返回0）操作，如果设置成功，表示已经获得锁，否则并没有获取锁。</span></p><p><span class=\"lake-fontsize-14\">　　2.如果没有获得锁，去Redis上拿到该key对应的值，在该key上我们存储一个时间戳（用毫秒表示，t1），为了避免死锁以及其他客户端占用该锁超过一定时间（5秒），使用该客户端当前时间戳，与存储的时间戳作比较。</span></p><p><span class=\"lake-fontsize-14\">　　3.如果没有超过该key的使用时限，返回false，表示其他人正在占用该key，不能强制使用；如果已经超过时限，那我们就可以进行解锁，使用我们的时间戳来代替该字段的值。</span></p><p><span class=\"lake-fontsize-14\">　　4.但是如果在setnx失败后，get该值却无法拿到该字段时，说明操作之前该锁已经被释放，这个时候，最好的办法就是重新执行一遍setnx方法来获取其值以获得该锁。</span></p><p><span class=\"lake-fontsize-14\">　　释放锁：删除redis中key</span></p><h1 id=\"43d34fd3\">Zookeeper实现分布式锁</h1><p><span class=\"lake-fontsize-14\">基于临时顺序节点：</span></p><p><span class=\"lake-fontsize-14\">　　1.客户端调用create()方法创建名为“locknode/guid-lock-”的节点，需要注意的是，这里节点的创建类型需要设置为EPHEMERAL_SEQUENTIAL。</span></p><p><span class=\"lake-fontsize-14\">　　2.客户端调用getChildren(“locknode”)方法来获取所有已经创建的子节点。</span></p><p><span class=\"lake-fontsize-14\">　　3.客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点是所有节点中序号最小的，那么就认为这个客户端获得了锁。</span></p><p><span class=\"lake-fontsize-14\">　　4.如果创建的节点不是所有节点中序号最小的，那么则监视比自己创建节点的序列号小的最大的节点，进入等待。直到下次监视的子节点变更的时候，再进行子节点的获取，判断是否获取锁。</span></p><p><span class=\"lake-fontsize-14\">　　释放锁的过程相对比较简单，就是删除自己创建的那个子节点即可。</span></p><h2 id=\"25f9c7fa\">总结</h2><p style=\"text-indent: 2em;\"><span class=\"lake-fontsize-11\">redis分布式锁，其实需要自己不断去尝试获取锁，比较消耗性能</span></p><p><span class=\"lake-fontsize-11\">　　zk分布式锁，获取不到锁，注册个监听器即可，不需要不断主动尝试获取锁，性能开销较小</span></p><p><span class=\"lake-fontsize-11\">　　另外一点就是，如果是redis获取锁的那个客户端bug了或者挂了，那么只能等待超时时间之后才能释放锁；而zk的话，因为创建的是临时znode，只要客户端挂了，znode就没了，此时就自动释放锁</span></p><p><br /></p><p><span>由于自己资金有限，毕设项目redis先行。</span></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-18T14:55:36.000Z",
    "deleted_at": null,
    "created_at": "2019-03-18T14:47:08.000Z",
    "updated_at": "2019-03-18T14:55:36.000Z",
    "published_at": "2019-03-18T14:55:36.000Z",
    "first_published_at": null,
    "word_count": 735,
    "cover": null,
    "description": "最近完成毕设过程中对redis锁有所了解，随后呢想到著名的分布式锁zk为了巩固自己的知识领域，为此写这么一篇小文章Redis实现分布式锁　　1.根据lockKey区进行setnx（set not exist，如果key值为空，则正常设置，返回1，否则不会进行设置并返回0）操作，如果设置成功，表...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1330719,
    "slug": "geed01",
    "title": "Java 小抄（三）",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"3c457761\"></a>\n### Java 基础\n<a name=\"d0719a86\"></a>\n#### 1.JDK 和 JRE 有什么区别？\n* JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。\n* JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。\n\n具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。\n<a name=\"1cf5aa9e\"></a>\n#### 2.== 和 equals 的区别是什么？\n**== 解读**<br />对于基本类型和引用类型 == 的作用效果是不同的，如下所示：\n* 基本类型：比较的是值是否相同；\n* 引用类型：比较的是引用是否相同；\n\n代码示例：\n```\nString x = \"string\";\nString y = \"string\";\nString z = new String(\"string\");\nSystem.out.println(x==y); // true\nSystem.out.println(x==z); // false\nSystem.out.println(x.equals(y)); // true\nSystem.out.println(x.equals(z)); // true\n复制代码\n```\n代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。<br />**equals 解读**<br />equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。<br />首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：\n```\nclass Cat {\n    public Cat(String name) {\n        this.name = name;\n    }\n    private String name;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\nCat c1 = new Cat(\"王磊\");\nCat c2 = new Cat(\"王磊\");\nSystem.out.println(c1.equals(c2)); // false\n复制代码\n```\n输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：\n```\npublic boolean equals(Object obj) {\n\t\treturn (this == obj);\n}\n复制代码\n```\n原来 equals 本质上就是 ==。<br />那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：\n```\nString s1 = new String(\"老王\");\nString s2 = new String(\"老王\");\nSystem.out.println(s1.equals(s2)); // true\n复制代码\n```\n同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：\n```\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n复制代码\n```\n原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。<br />**总结** ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。\n<a name=\"453317f0\"></a>\n#### 3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？\n不对，两个对象的 hashCode()相同，equals()不一定 true。<br />代码示例：\n```\nString str1 = \"通话\";\nString str2 = \"重地\";\nSystem.out.println(String.format(\"str1：%d | str2：%d\",  str1.hashCode(),str2.hashCode()));\nSystem.out.println(str1.equals(str2));\n复制代码\n```\n执行的结果：<br />str1：1179395 | str2：1179395<br />false<br />代码解读：很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。\n<a name=\"6e78f598\"></a>\n#### 4.final 在 java 中有什么作用？\n* final 修饰的类叫最终类，该类不能被继承。\n* final 修饰的方法不能被重写。\n* final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。\n<a name=\"73717a54\"></a>\n#### 5.java 中的 Math.round(-1.5) 等于多少？\n等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。\n<a name=\"c619c305\"></a>\n#### 6.String 属于基础的数据类型吗？\nString 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。\n<a name=\"cb40cbd8\"></a>\n#### 7.java 中操作字符串都有哪些类？它们之间有什么区别？\n操作字符串的类有：String、StringBuffer、StringBuilder。<br />String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。<br />StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。\n<a name=\"e2e83c21\"></a>\n#### 8.String str=\"i\"与 String str=new String(\"i\")一样吗？\n不一样，因为内存的分配方式不一样。String str=\"i\"的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(\"i\") 则会被分到堆内存中。\n<a name=\"a26f8762\"></a>\n#### 9.如何将字符串反转？\n使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。<br />示例代码：\n```\n// StringBuffer reverse\nStringBuffer stringBuffer = new StringBuffer();\nstringBuffer.append(\"abcdefg\");\nSystem.out.println(stringBuffer.reverse()); // gfedcba\n// StringBuilder reverse\nStringBuilder stringBuilder = new StringBuilder();\nstringBuilder.append(\"abcdefg\");\nSystem.out.println(stringBuilder.reverse()); // gfedcba\n复制代码\n```\n<a name=\"6c1ce179\"></a>\n#### 10.String 类的常用方法都有那些？\n* indexOf()：返回指定字符的索引。\n* charAt()：返回指定索引处的字符。\n* replace()：字符串替换。\n* trim()：去除字符串两端空白。\n* split()：分割字符串，返回一个分割后的字符串数组。\n* getBytes()：返回字符串的 byte 类型数组。\n* length()：返回字符串长度。\n* toLowerCase()：将字符串转成小写字母。\n* toUpperCase()：将字符串转成大写字符。\n* substring()：截取字符串。\n* equals()：字符串比较。\n<a name=\"73898f3b\"></a>\n#### 11.抽象类必须要有抽象方法吗？\n不需要，抽象类不一定非要有抽象方法。<br />示例代码：\n```\nabstract class Cat {\n    public static void sayHi() {\n        System.out.println(\"hi~\");\n    }\n}\n复制代码\n```\n上面代码，抽象类并没有抽象方法但完全可以正常运行。\n<a name=\"c2fc9ff1\"></a>\n#### 12.普通类和抽象类有哪些区别？\n* 普通类不能包含抽象方法，抽象类可以包含抽象方法。\n* 抽象类不能直接实例化，普通类可以直接实例化。\n<a name=\"85988001\"></a>\n#### 13.抽象类能使用 final 修饰吗？\n不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息：\n\n<a name=\"897de127\"></a>\n#### 14.接口和抽象类有什么区别？\n* 实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。\n* 构造函数：抽象类可以有构造函数；接口不能有。\n* main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。\n* 实现数量：类可以实现很多个接口；但是只能继承一个抽象类。\n* 访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。\n<a name=\"0860bf8f\"></a>\n#### 15.java 中 IO 流分为几种？\n按功能来分：输入流（input）、输出流（output）。<br />按类型来分：字节流和字符流。<br />字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。\n<a name=\"10e431a1\"></a>\n#### 16.BIO、NIO、AIO 有什么区别？\n* BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。\n* NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。\n* AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。\n<a name=\"d21ffc41\"></a>\n#### 17.Files的常用方法都有哪些？\n* Files.exists()：检测文件路径是否存在。\n* Files.createFile()：创建文件。\n* Files.createDirectory()：创建文件夹。\n* Files.delete()：删除一个文件或目录。\n* Files.copy()：复制文件。\n* Files.move()：移动文件。\n* Files.size()：查看文件个数。\n* Files.read()：读取文件。\n* Files.write()：写入文件。\n\n作者：王磊的博客<br />链接：https://juejin.im/post/5c7cfdef6fb9a049f746ed47<br />来源：掘金<br />著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n",
    "body_draft": "",
    "body_html": "<h3 id=\"3c457761\">Java 基础</h3><h4 id=\"d0719a86\">1.JDK 和 JRE 有什么区别？</h4><ul><li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li><li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</li></ul><p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p><h4 id=\"1cf5aa9e\">2.== 和 equals 的区别是什么？</h4><p><strong>== 解读</strong></p><p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p><ul><li>基本类型：比较的是值是否相同；</li><li>引用类型：比较的是引用是否相同；</li></ul><p>代码示例：</p><pre><code>String x = &quot;string&quot;;\nString y = &quot;string&quot;;\nString z = new String(&quot;string&quot;);\nSystem.out.println(x==y); // true\nSystem.out.println(x==z); // false\nSystem.out.println(x.equals(y)); // true\nSystem.out.println(x.equals(z)); // true\n复制代码</code></pre><p>代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。</p><p><strong>equals 解读</strong></p><p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。</p><p>首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：</p><pre><code>class Cat {\n    public Cat(String name) {\n        this.name = name;\n    }\n    private String name;\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n}\nCat c1 = new Cat(&quot;王磊&quot;);\nCat c2 = new Cat(&quot;王磊&quot;);\nSystem.out.println(c1.equals(c2)); // false\n复制代码</code></pre><p>输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：</p><pre><code>public boolean equals(Object obj) {\n\t\treturn (this == obj);\n}\n复制代码</code></pre><p>原来 equals 本质上就是 ==。</p><p>那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：</p><pre><code>String s1 = new String(&quot;老王&quot;);\nString s2 = new String(&quot;老王&quot;);\nSystem.out.println(s1.equals(s2)); // true\n复制代码</code></pre><p>同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：</p><pre><code>public boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n复制代码</code></pre><p>原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。</p><p><strong>总结</strong> ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p><h4 id=\"453317f0\">3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h4><p>不对，两个对象的 hashCode()相同，equals()不一定 true。</p><p>代码示例：</p><pre><code>String str1 = &quot;通话&quot;;\nString str2 = &quot;重地&quot;;\nSystem.out.println(String.format(&quot;str1：%d | str2：%d&quot;,  str1.hashCode(),str2.hashCode()));\nSystem.out.println(str1.equals(str2));\n复制代码</code></pre><p>执行的结果：</p><p>str1：1179395 | str2：1179395</p><p>false</p><p>代码解读：很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p><h4 id=\"6e78f598\">4.final 在 java 中有什么作用？</h4><ul><li>final 修饰的类叫最终类，该类不能被继承。</li><li>final 修饰的方法不能被重写。</li><li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li></ul><h4 id=\"73717a54\">5.java 中的 Math.round(-1.5) 等于多少？</h4><p>等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。</p><h4 id=\"c619c305\">6.String 属于基础的数据类型吗？</h4><p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p><h4 id=\"cb40cbd8\">7.java 中操作字符串都有哪些类？它们之间有什么区别？</h4><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p><p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p><p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p><h4 id=\"e2e83c21\">8.String str=&quot;i&quot;与 String str=new String(&quot;i&quot;)一样吗？</h4><p>不一样，因为内存的分配方式不一样。String str=&quot;i&quot;的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(&quot;i&quot;) 则会被分到堆内存中。</p><h4 id=\"a26f8762\">9.如何将字符串反转？</h4><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><p>示例代码：</p><pre><code>// StringBuffer reverse\nStringBuffer stringBuffer = new StringBuffer();\nstringBuffer.append(&quot;abcdefg&quot;);\nSystem.out.println(stringBuffer.reverse()); // gfedcba\n// StringBuilder reverse\nStringBuilder stringBuilder = new StringBuilder();\nstringBuilder.append(&quot;abcdefg&quot;);\nSystem.out.println(stringBuilder.reverse()); // gfedcba\n复制代码</code></pre><h4 id=\"6c1ce179\">10.String 类的常用方法都有那些？</h4><ul><li>indexOf()：返回指定字符的索引。</li><li>charAt()：返回指定索引处的字符。</li><li>replace()：字符串替换。</li><li>trim()：去除字符串两端空白。</li><li>split()：分割字符串，返回一个分割后的字符串数组。</li><li>getBytes()：返回字符串的 byte 类型数组。</li><li>length()：返回字符串长度。</li><li>toLowerCase()：将字符串转成小写字母。</li><li>toUpperCase()：将字符串转成大写字符。</li><li>substring()：截取字符串。</li><li>equals()：字符串比较。</li></ul><h4 id=\"73898f3b\">11.抽象类必须要有抽象方法吗？</h4><p>不需要，抽象类不一定非要有抽象方法。</p><p>示例代码：</p><pre><code>abstract class Cat {\n    public static void sayHi() {\n        System.out.println(&quot;hi~&quot;);\n    }\n}\n复制代码</code></pre><p>上面代码，抽象类并没有抽象方法但完全可以正常运行。</p><h4 id=\"c2fc9ff1\">12.普通类和抽象类有哪些区别？</h4><ul><li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li><li>抽象类不能直接实例化，普通类可以直接实例化。</li></ul><h4 id=\"85988001\">13.抽象类能使用 final 修饰吗？</h4><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息：</p><p></p><h4 id=\"897de127\">14.接口和抽象类有什么区别？</h4><ul><li>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</li><li>构造函数：抽象类可以有构造函数；接口不能有。</li><li>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。</li><li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</li><li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li></ul><h4 id=\"0860bf8f\">15.java 中 IO 流分为几种？</h4><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p><h4 id=\"10e431a1\">16.BIO、NIO、AIO 有什么区别？</h4><ul><li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li><li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li><li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li></ul><h4 id=\"d21ffc41\">17.Files的常用方法都有哪些？</h4><ul><li>Files.exists()：检测文件路径是否存在。</li><li>Files.createFile()：创建文件。</li><li>Files.createDirectory()：创建文件夹。</li><li>Files.delete()：删除一个文件或目录。</li><li>Files.copy()：复制文件。</li><li>Files.move()：移动文件。</li><li>Files.size()：查看文件个数。</li><li>Files.read()：读取文件。</li><li>Files.write()：写入文件。</li></ul><p>作者：王磊的博客</p><p>链接：https://juejin.im/post/5c7cfdef6fb9a049f746ed47</p><p>来源：掘金</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>",
    "body_lake": "<!doctype lake><h3 id=\"3c457761\">Java 基础</h3><h4 id=\"d0719a86\">1.JDK 和 JRE 有什么区别？</h4><ul><li>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</li><li>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</li></ul><p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。</p><h4 id=\"1cf5aa9e\">2.== 和 equals 的区别是什么？</h4><p><strong>== 解读</strong></p><p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p><ul><li>基本类型：比较的是值是否相同；</li><li>引用类型：比较的是引用是否相同；</li></ul><p>代码示例：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22String%20x%20%3D%20%5C%22string%5C%22%3B%5CnString%20y%20%3D%20%5C%22string%5C%22%3B%5CnString%20z%20%3D%20new%20String(%5C%22string%5C%22)%3B%5CnSystem.out.println(x%3D%3Dy)%3B%20%2F%2F%20true%5CnSystem.out.println(x%3D%3Dz)%3B%20%2F%2F%20false%5CnSystem.out.println(x.equals(y))%3B%20%2F%2F%20true%5CnSystem.out.println(x.equals(z))%3B%20%2F%2F%20true%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p>代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。</p><p><strong>equals 解读</strong></p><p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。</p><p>首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22class%20Cat%20%7B%5Cn%20%20%20%20public%20Cat(String%20name)%20%7B%5Cn%20%20%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20private%20String%20name%3B%5Cn%20%20%20%20public%20String%20getName()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20name%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20public%20void%20setName(String%20name)%20%7B%5Cn%20%20%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%7D%5Cn%7D%5CnCat%20c1%20%3D%20new%20Cat(%5C%22%E7%8E%8B%E7%A3%8A%5C%22)%3B%5CnCat%20c2%20%3D%20new%20Cat(%5C%22%E7%8E%8B%E7%A3%8A%5C%22)%3B%5CnSystem.out.println(c1.equals(c2))%3B%20%2F%2F%20false%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p>输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22public%20boolean%20equals(Object%20obj)%20%7B%5Cn%5Ct%5Ctreturn%20(this%20%3D%3D%20obj)%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p>原来 equals 本质上就是 ==。</p><p>那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22String%20s1%20%3D%20new%20String(%5C%22%E8%80%81%E7%8E%8B%5C%22)%3B%5CnString%20s2%20%3D%20new%20String(%5C%22%E8%80%81%E7%8E%8B%5C%22)%3B%5CnSystem.out.println(s1.equals(s2))%3B%20%2F%2F%20true%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p>同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22public%20boolean%20equals(Object%20anObject)%20%7B%5Cn%20%20%20%20if%20(this%20%3D%3D%20anObject)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20true%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20if%20(anObject%20instanceof%20String)%20%7B%5Cn%20%20%20%20%20%20%20%20String%20anotherString%20%3D%20(String)anObject%3B%5Cn%20%20%20%20%20%20%20%20int%20n%20%3D%20value.length%3B%5Cn%20%20%20%20%20%20%20%20if%20(n%20%3D%3D%20anotherString.value.length)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20char%20v1%5B%5D%20%3D%20value%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20char%20v2%5B%5D%20%3D%20anotherString.value%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20int%20i%20%3D%200%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20while%20(n--%20!%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(v1%5Bi%5D%20!%3D%20v2%5Bi%5D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20false%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20i%2B%2B%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20true%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20false%3B%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p>原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。</p><p><strong>总结</strong> ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p><h4 id=\"453317f0\">3.两个对象的 hashCode()相同，则 equals()也一定为 true，对吗？</h4><p>不对，两个对象的 hashCode()相同，equals()不一定 true。</p><p>代码示例：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22String%20str1%20%3D%20%5C%22%E9%80%9A%E8%AF%9D%5C%22%3B%5CnString%20str2%20%3D%20%5C%22%E9%87%8D%E5%9C%B0%5C%22%3B%5CnSystem.out.println(String.format(%5C%22str1%EF%BC%9A%25d%20%7C%20str2%EF%BC%9A%25d%5C%22%2C%20%20str1.hashCode()%2Cstr2.hashCode()))%3B%5CnSystem.out.println(str1.equals(str2))%3B%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p>执行的结果：</p><p>str1：1179395 | str2：1179395</p><p>false</p><p>代码解读：很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p><h4 id=\"6e78f598\">4.final 在 java 中有什么作用？</h4><ul><li>final 修饰的类叫最终类，该类不能被继承。</li><li>final 修饰的方法不能被重写。</li><li>final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</li></ul><h4 id=\"73717a54\">5.java 中的 Math.round(-1.5) 等于多少？</h4><p>等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。</p><h4 id=\"c619c305\">6.String 属于基础的数据类型吗？</h4><p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p><h4 id=\"cb40cbd8\">7.java 中操作字符串都有哪些类？它们之间有什么区别？</h4><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p><p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p><p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p><h4 id=\"e2e83c21\">8.String str=&quot;i&quot;与 String str=new String(&quot;i&quot;)一样吗？</h4><p>不一样，因为内存的分配方式不一样。String str=&quot;i&quot;的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(&quot;i&quot;) 则会被分到堆内存中。</p><h4 id=\"a26f8762\">9.如何将字符串反转？</h4><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p><p>示例代码：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20StringBuffer%20reverse%5CnStringBuffer%20stringBuffer%20%3D%20new%20StringBuffer()%3B%5CnstringBuffer.append(%5C%22abcdefg%5C%22)%3B%5CnSystem.out.println(stringBuffer.reverse())%3B%20%2F%2F%20gfedcba%5Cn%2F%2F%20StringBuilder%20reverse%5CnStringBuilder%20stringBuilder%20%3D%20new%20StringBuilder()%3B%5CnstringBuilder.append(%5C%22abcdefg%5C%22)%3B%5CnSystem.out.println(stringBuilder.reverse())%3B%20%2F%2F%20gfedcba%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><h4 id=\"6c1ce179\">10.String 类的常用方法都有那些？</h4><ul><li>indexOf()：返回指定字符的索引。</li><li>charAt()：返回指定索引处的字符。</li><li>replace()：字符串替换。</li><li>trim()：去除字符串两端空白。</li><li>split()：分割字符串，返回一个分割后的字符串数组。</li><li>getBytes()：返回字符串的 byte 类型数组。</li><li>length()：返回字符串长度。</li><li>toLowerCase()：将字符串转成小写字母。</li><li>toUpperCase()：将字符串转成大写字符。</li><li>substring()：截取字符串。</li><li>equals()：字符串比较。</li></ul><h4 id=\"73898f3b\">11.抽象类必须要有抽象方法吗？</h4><p>不需要，抽象类不一定非要有抽象方法。</p><p>示例代码：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22abstract%20class%20Cat%20%7B%5Cn%20%20%20%20public%20static%20void%20sayHi()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22hi~%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%E5%A4%8D%E5%88%B6%E4%BB%A3%E7%A0%81%22%7D\"></card><p>上面代码，抽象类并没有抽象方法但完全可以正常运行。</p><h4 id=\"c2fc9ff1\">12.普通类和抽象类有哪些区别？</h4><ul><li>普通类不能包含抽象方法，抽象类可以包含抽象方法。</li><li>抽象类不能直接实例化，普通类可以直接实例化。</li></ul><h4 id=\"85988001\">13.抽象类能使用 final 修饰吗？</h4><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息：</p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22%22%2C%22originWidth%22%3A331%2C%22originHeight%22%3A117%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22error%22%2C%22width%22%3A331%2C%22height%22%3A117%2C%22message%22%3A%22%E5%9B%BE%E7%89%87%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8B%B7%E8%B4%9D%E5%A4%8D%E5%88%B6%EF%BC%8C%E8%AF%B7%E5%8D%95%E7%8B%AC%E5%A4%8D%E5%88%B6%E4%B8%8A%E4%BC%A0%22%2C%22size%22%3A0%7D\"></card><cursor /></p><h4 id=\"897de127\">14.接口和抽象类有什么区别？</h4><ul><li>实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</li><li>构造函数：抽象类可以有构造函数；接口不能有。</li><li>main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。</li><li>实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</li><li>访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</li></ul><h4 id=\"0860bf8f\">15.java 中 IO 流分为几种？</h4><p>按功能来分：输入流（input）、输出流（output）。</p><p>按类型来分：字节流和字符流。</p><p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p><h4 id=\"10e431a1\">16.BIO、NIO、AIO 有什么区别？</h4><ul><li>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</li><li>NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</li><li>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</li></ul><h4 id=\"d21ffc41\">17.Files的常用方法都有哪些？</h4><ul><li>Files.exists()：检测文件路径是否存在。</li><li>Files.createFile()：创建文件。</li><li>Files.createDirectory()：创建文件夹。</li><li>Files.delete()：删除一个文件或目录。</li><li>Files.copy()：复制文件。</li><li>Files.move()：移动文件。</li><li>Files.size()：查看文件个数。</li><li>Files.read()：读取文件。</li><li>Files.write()：写入文件。</li></ul><p>作者：王磊的博客</p><p>链接：https://juejin.im/post/5c7cfdef6fb9a049f746ed47</p><p>来源：掘金</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-06T01:51:08.000Z",
    "deleted_at": null,
    "created_at": "2019-03-06T01:50:29.000Z",
    "updated_at": "2019-03-06T01:51:08.000Z",
    "published_at": "2019-03-06T01:51:08.000Z",
    "first_published_at": "2019-03-06T01:51:08.000Z",
    "word_count": 2175,
    "cover": null,
    "description": "Java 基础1.JDK 和 JRE 有什么区别？JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。具...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1326715,
    "slug": "ousfde",
    "title": "mybait xml 配置谨记",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "select* from table where '字段1'>=10怎么表示，那么问题来啦<br />xml转义可以使用<br />![](https://cdn.nlark.com/yuque/0/2019/png/190217/1551755611316-53cb3fe4-54c4-4a18-89c7-611a8b9f7746.png#align=left&display=inline&height=253&originHeight=265&originWidth=781&size=0&status=done&width=746)<br />根据这个规则上面的sql写法应该变成<br />select *from table where ‘字段1’&gt; =10\n",
    "body_draft": "",
    "body_html": "<p>select* from table where '字段1'&gt;=10怎么表示，那么问题来啦</p><p>xml转义可以使用</p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/190217/1551755611316-53cb3fe4-54c4-4a18-89c7-611a8b9f7746.png#align=left&amp;display=inline&amp;height=253&amp;originHeight=265&amp;originWidth=781&amp;size=0&amp;status=done&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p>根据这个规则上面的sql写法应该变成</p><p>select *from table where ‘字段1’&amp;gt; =10</p>",
    "body_lake": "<!doctype lake><p>select* from table where '字段1'&gt;=10怎么表示，那么问题来啦</p><p>xml转义可以使用</p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F190217%2F1551755611316-53cb3fe4-54c4-4a18-89c7-611a8b9f7746.png%22%2C%22originWidth%22%3A781%2C%22originHeight%22%3A265%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22status%22%3A%22done%22%2C%22width%22%3A746%2C%22height%22%3A253%7D\"></card><cursor /></p><p>根据这个规则上面的sql写法应该变成</p><p>select *from table where ‘字段1’&amp;gt; =10</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-03-05T09:42:24.000Z",
    "deleted_at": null,
    "created_at": "2019-03-05T03:13:26.000Z",
    "updated_at": "2019-03-06T10:27:38.000Z",
    "published_at": "2019-03-06T10:27:38.000Z",
    "first_published_at": "2019-03-05T09:42:24.000Z",
    "word_count": 52,
    "cover": null,
    "description": "select* from table where '字段1'&gt;=10怎么表示，那么问题来啦xml转义可以使用根据这个规则上面的sql写法应该变成select *from table where ‘字段1’&amp;gt; =10",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1293016,
    "slug": "nuud0x",
    "title": "mysql-docker配置",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "",
    "body_draft": "",
    "body_html": "",
    "body_lake": "",
    "public": 1,
    "status": 0,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-25T08:12:03.000Z",
    "deleted_at": null,
    "created_at": "2019-02-25T08:08:24.000Z",
    "updated_at": "2019-02-25T08:12:03.000Z",
    "published_at": null,
    "first_published_at": null,
    "word_count": 0,
    "cover": null,
    "description": "DockerDescription/var/lib/mysqlMySQL data dir/var/log/mysqlMySQL log dir/var/sock/mysqldMySQL socket dir/etc/mysql/conf.dMySQL configuration direct...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1259418,
    "slug": "yi5xnz",
    "title": "如何写一个优雅的文档",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"423ecc15\"></a>\n# 1. 文档体系\n\n<a name=\"8a95a6d1\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#g5t3el)结构\n\n软件手册是一部完整的书，建议采用下面的结构。\n\n* **简介**（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明<br />\n* **快速上手**（Getting Started）：[可选] [文件] 如何最快速地使用产品<br />\n* **入门篇**（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程\n  * **环境准备**（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件<br />\n  * **安装**（Installation）：[可选] [文件] 软件的安装方法<br />\n  * **设置**（Configuration）：[必备] [文件] 软件的设置<br />\n* **进阶篇**（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程<br />\n* **API**（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍<br />\n* **FAQ**：[可选] [文件] 常见问题解答<br />\n* **附录**（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容\n  * **Glossary**：[可选] [文件] 名词解释<br />\n  * **Recipes**：[可选] [文件] 最佳实践<br />\n  * **Troubleshooting**：[可选] [文件] 故障处理<br />\n  * **ChangeLog**：[可选] [文件] 版本说明<br />\n  * **Feedback**：[可选] [文件] 反馈方式<br />\n\n下面是两个真实范例，可参考。\n\n* [Redux 手册](http://redux.js.org/index.html)<br />\n* [Atom 手册](http://flight-manual.atom.io/)<br />\n\n<a name=\"29139c2a\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#rotylz)文件名\n\n文档的文件名不得含有空格。\n\n文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。\n\n```\n错误： 名词解释.md\n正确： glossary.md\n```\n\n文件名建议只使用小写字母，不使用大写字母。\n\n```\n错误：TroubleShooting.md\n正确：troubleshooting.md\n```\n\n为了醒目，某些说明文件的文件名，可以使用大写字母，比如`README`、`LICENSE`。\n\n文件名包含多个单词时，单词之间建议使用半角的连词线（`-`）分隔。\n\n```\n不佳：advanced_usage.md\n正确：advanced-usage.md\n```\n\n<a name=\"2aa1328d\"></a>\n# [](https://souche.yuque.com/arch/ted/tsxvkc#zt2ggt)2. 标题\n\n<a name=\"6896da74\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#zhzyvu)层级\n\n标题分为四级。\n\n* 一级标题：文章的标题<br />\n* 二级标题：文章主要部分的大标题<br />\n* 三级标题：二级标题下面一级的小标题<br />\n* 四级标题：三级标题下面某一方面的小标题<br />\n\n下面是示例。\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n```\n\n<a name=\"9b1d0244\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#zx2ggo)原则\n\n（1）一级标题下，不能直接出现三级标题。\n\n示例：下面的文章结构，缺少二级标题。\n\n```markdown\n# 一级标题\n### 三级标题\n```\n\n（2）标题要避免孤立编号（即同级标题只有一个）。\n\n示例：下面的文章结构，`二级标题 A`只包含一个三级标题，完全可以省略`三级标题 A`。\n\n```markdown\n## 二级标题 A\n### 三级标题 A\n## 二级标题 B\n```\n\n（3）下级标题不重复上一级标题的名字。\n\n示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。\n\n```markdown\n## 概述\n### 概述\n```\n\n（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。\n\n如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。\n\n示例：下面的结构二要好于结构一。后者适用的场景，主要是较长篇幅的内容。\n\n```markdown\n结构一\n### 三级标题\n#### 四级标题 A\n#### 四级标题 B\n#### 四级标题 C\n结构二\n### 三级标题\n**（1）A**\n**（2）B**\n**（3）C**\n```\n\n\n<a name=\"9e81e0fa\"></a>\n# [](https://souche.yuque.com/arch/ted/tsxvkc#nko7ak)3. 文本\n\n<a name=\"60f2dcff\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#73gsmu)字间距\n\n全角中文字符与半角英文字符之间，应有一个半角空格。\n\n```\n错误：本文介绍如何快速启动Windows系统。\n正确：本文介绍如何快速启动 Windows 系统。\n```\n\n全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。\n\n```\n正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。\n正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。\n```\n\n半角的百分号，视同阿拉伯数字。\n\n英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。\n\n```\n错误：一部容量为 16 GB 的智能手机\n正确：一部容量为 16GB 的智能手机\n```\n\n半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。\n\n```\n错误：他的电脑是 MacBook Air 。\n正确：他的电脑是 MacBook Air。\n```\n\n<a name=\"f5e4551f\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#avclqz)句子\n\n* 避免使用长句。句子内部不使用逗号时，总长度不应该超过 40 个字；使用逗号时，总长度不应该超过 100 字或者正文的 3 行。<br />\n* 尽量使用简单句和并列句，避免使用复合句。<br />\n\n<a name=\"b61bb926\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#n553kl)写作风格\n\n1、尽量不使用被动语态，改为使用主动语态。\n\n```\n错误：假如此软件尚未被安装，\n正确：假如尚未安装这个软件，\n```\n\n2、不使用非正式的语言风格。\n\n```\n错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！\n正确：无法参加本次活动，我深感遗憾。\n```\n\n3、不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。\n\n```\n错误：这是唯二的快速启动的方法。\n正确：这是仅有的两种快速启动的方法。\n```\n\n4、用对“的”、“地”、“得”。\n\n```\n她露出了开心的笑容。\n（形容词＋的＋名词）\n她开心地笑了。\n（副词＋地＋动词）\n她笑得很开心。\n（动词＋得＋副词）\n```\n\n5、使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。\n\n```\n错误：从管理系统可以监视中继系统和受其直接控制的分配系统。\n正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。\n```\n\n6、名词前不要使用过多的形容词。\n\n```\n错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。\n正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。\n```\n\n7、不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。\n\n```\n错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。\n正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。\n```\n\n8、同样一个意思，尽量使用肯定句表达，不使用否定句表达。\n\n```\n错误：请确认没有接通装置的电源。\n正确：请确认装置的电源已关闭。\n```\n\n9、避免使用双重否定句。\n\n```\n错误：没有删除权限的用户，不能删除此文件。\n正确：用户必须拥有删除权限，才能删除此文件。\n```\n\n<a name=\"12443922\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#9le4ud)英文处理\n\n英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。\n\n```\n英文：⋯information stored in random access memory (RAMs)⋯\n中文：……存储在随机存取存储器（RAM）里的信息……\n```\n\n外文缩写可以使用半角圆点(`.`)表示缩写。\n\n```\nU.S.A.\nApple, Inc.\n```\n\n表示中文时，英文省略号（`⋯`）应改为中文省略号（`……`）。\n\n```\n英文：5 minutes later⋯\n中文：5 分钟过去了⋯⋯\n```\n\n英文书名或电影名改用中文表达时，双引号应改为书名号。\n\n```\n英文：He published an article entitled \"The Future of the Aviation\".\n中文：他发表了一篇名为《航空业的未来》的文章。\n```\n\n第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。\n\n```\nIOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。\n```\n\n专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。\n\n```\n“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。\n“online transaction processing”（在线事务处理）不是专有名词，不应大写。\n```\n\n\n<a name=\"c607ab3f\"></a>\n# [](https://souche.yuque.com/arch/ted/tsxvkc#t1lmto)4. 段落\n\n<a name=\"9b1d0244\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#vhyglr)原则\n\n* 一个段落只能有一个主题，或一个中心句子。<br />\n* 段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。<br />\n* 一个段落的长度不能超过七行，最佳段落长度小于等于四行。<br />\n* 段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。<br />\n* 段落之间使用一个空行隔开。<br />\n* 段落开头不要留出空白字符。<br />\n\n<a name=\"3b61c966\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#qol3tu)引用\n\n引用第三方内容时，应注明出处。\n\n```\nOne man’s constant is another man’s variable. — Alan Perlis\n```\n\n如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。\n\n```\n本文转载自 WikiQuote\n```\n\n使用外部图片时，必须在图片下方或文末标明来源。\n\n```\n本文部分图片来自 Wikipedia\n```\n\n<a name=\"26c275be\"></a>\n# [](https://souche.yuque.com/arch/ted/tsxvkc#chm6ni)5. 数值\n\n<a name=\"5f13a179\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#m9heqc)半角数字\n\n数字一律使用半角形式，不得使用全角形式。\n\n```\n错误： 这件商品的价格是１０００元。\n正确： 这件商品的价格是 1000 元。\n```\n\n<a name=\"8f596391\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#gfthzv)千分号\n\n数值为千位以上，应添加千分号（半角逗号）。\n\n```\nXXX 公司的实收资本为 RMB1,258,000。\n```\n\n对于 4 ～ 6 位的数值，千分号是选用的，比如`1000`和`1,000`都可以接受。对于7位及以上的数值，千分号是必须的。\n\n多位小数要从小数点后从左向右添加千分号，比如`4.234,345`。\n\n<a name=\"8392ba7c\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#lyfmzv)货币\n\n货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。\n\n```\n$1,000\n1,000 美元\n```\n\n<a name=\"b7d43b22\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#x1oxsg)数值范围\n\n表示数值范围时，用`～`连接。参见《标点符号》一节的“连接号”部分。\n\n带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。\n\n```\n错误：132～234kg\n正确：132kg～234kg\n错误：67～89%\n正确：67%～89%\n```\n\n<a name=\"f92bb521\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#002cgu)变化程度的表示法\n\n数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。\n\n```\n增加到过去的两倍\n（过去为一，现在为二）\n增加了两倍\n（过去为一，现在为三）\n```\n\n数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。\n\n```\n降低到百分之八十\n（定额是一百，现在是八十）\n降低了百分之八十\n（原来是一百，现在是二十）\n```\n\n不能用“降低N倍”或“减少N倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。\n\n\n<a name=\"8bcc96c9\"></a>\n# [](https://souche.yuque.com/arch/ted/tsxvkc#gdtlsg)6. 标点符号\n\n<a name=\"9b1d0244\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#0355qr)原则\n\n* 中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。<br />\n* 如果整句为英文，则该句使用英文/半角标点。<br />\n* 句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。<br />\n\n<a name=\"b614b95c\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#9qr2gr)句号\n\n中文语句中的结尾处应该用全角句号（`。`）。\n\n句子末尾用括号加注时，句号应在括号之外。\n\n```\n错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）\n正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。\n```\n\n<a name=\"c2d5517a\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#6ipqhu)逗号\n\n逗号`，`表示句子内部的一般性停顿。\n\n注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。\n\n<a name=\"ce2ba916\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#7080nm)顿号\n\n句子内部的并列词，应该用全角顿号(`、`) 分隔，而不用逗号，即使并列词是英语也是如此。\n\n```\n错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。\n正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。\n```\n\n英文句子中，并列词语之间使用半角逗号（`,`）分隔。\n\n```\n例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.\n```\n\n<a name=\"cb368833\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#tthlwg)分号\n\n分号`；`表示复句内部并列分句之间的停顿。\n\n<a name=\"e9072381\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#tdkfut)引号\n\n引用时，应该使用全角双引号（`“ ”`），注意前后双引号不同。\n\n```\n例句：许多人都认为客户服务的核心是“友好”和“专业”。\n```\n\n引号里面还要用引号时，外面一层用双引号，里面一层用单引号（`‘ ’`），注意前后单引号不同。\n\n```\n例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”\n```\n\n<a name=\"abb7851d\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#0pi9qz)圆括号\n\n补充说明时，使用全角圆括号`（）`，括号前后不加空格。\n\n```\n例句：请确认所有的连接（电缆和接插件）均安装牢固。\n```\n\n<a name=\"16df9195\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#0mlqra)冒号\n\n全角冒号（`：`）常用在需要解释的词语后边，引出解释和说明。\n\n```\n例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。\n```\n\n表示时间时，应使用半角冒号（`:`）。\n\n```\n例句：早上 8:00\n```\n\n<a name=\"2db82e32\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#847zgk)省略号\n\n省略号`……`表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用`。。。`或`...`等非标准形式。\n\n省略号不应与“等”这个词一起使用。\n\n```\n错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。\n正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……\n正确：我们为会餐准备了香蕉、苹果、梨等各色水果。\n```\n\n<a name=\"725331f0\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#in7iyt)感叹号\n\n应该使用平静的语气叙述，尽量避免使用感叹号`！`。\n\n不得多个感叹号连用，比如`！！`和`!!!`。\n\n<a name=\"52621281\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#vgo6yc)破折号\n\n破折号`————`一般用于进一步解释。\n\n破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。\n\n```\n例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。\n例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。\n```\n\n<a name=\"abd9df57\"></a>\n## [](https://souche.yuque.com/arch/ted/tsxvkc#5hmrnr)连接号\n\n连接号用于连接两个类似的词。\n\n以下场合应该使用直线连接号（`-`），占一个半角字符的位置。\n\n* 两个名词的复合<br />\n* 图表编号<br />\n\n```\n例句：氧化-还原反应\n例句：图 1-1\n```\n\n以下场合应该使用波浪连接号（`～`），占一个全角字符的位置。\n\n* 数值范围（例如日期、时间或数字）<br />\n\n```\n例句：2009 年～2011 年\n```\n\n注意，波浪连接号前后两个值都应该加上单位。\n\n波浪连接号也可以用汉字“至”代替。\n\n```\n例句：周围温度：-20°C 至 -10°C\n```\n\n<a name=\"225a579a\"></a>\n# [](https://souche.yuque.com/arch/ted/tsxvkc#3uodiu)7. 参考链接\n\n* [中文技术文档的协作规范](https://github.com/ruanyf/document-style-guide), by 阮一峰<br />\n* [产品手册中文写作规范](http://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html), by 华为<br />\n* [写作规范和格式规范](http://docs.daocloud.io/write-docs/format), by DaoCloud<br />\n* [技术写作技巧在日汉翻译中的应用](http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf), by 刘方<br />\n* [简体中文规范指南](https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf), by lengoo<br />\n* [文档风格指南](https://open.leancloud.cn/copywriting-style-guide.html), by LeanCloud<br />\n* [豌豆荚文案风格指南](https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit), by 豌豆荚<br />\n* [中文文案排版指北](https://github.com/sparanoid/chinese-copywriting-guidelines), by sparanoid<br />\n* [中文排版需求](http://w3c.github.io/clreq/), by W3C<br />\n* [为什么文件名要小写？](http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html), by 阮一峰<br />\n* [Google Developer Documentation Style Guide](https://developers.google.com/style/), by Google<br />\n",
    "body_draft": "",
    "body_html": "<h1 id=\"423ecc15\">1. 文档体系</h1><p><br /></p><h2 id=\"8a95a6d1\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#g5t3el\" target=\"_blank\"></a>结构</h2><p><br /></p><p>软件手册是一部完整的书，建议采用下面的结构。</p><p><br /></p><ul><li><span><strong>简介</strong>（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</span><br /></li><li><span><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</span><br /></li><li><span><strong>入门篇</strong>（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程</span></li></ul><ul data-lake-indent=\"1\"><li><span><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</span><br /></li><li><span><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</span><br /></li><li><span><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</span><br /></li></ul><ul><li><span><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程</span><br /></li><li><span><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</span><br /></li><li><span><strong>FAQ</strong>：[可选] [文件] 常见问题解答</span><br /></li><li><span><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容</span></li></ul><ul data-lake-indent=\"1\"><li><span><strong>Glossary</strong>：[可选] [文件] 名词解释</span><br /></li><li><span><strong>Recipes</strong>：[可选] [文件] 最佳实践</span><br /></li><li><span><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</span><br /></li><li><span><strong>ChangeLog</strong>：[可选] [文件] 版本说明</span><br /></li><li><span><strong>Feedback</strong>：[可选] [文件] 反馈方式</span><br /></li></ul><p><br /></p><p>下面是两个真实范例，可参考。</p><p><br /></p><ul><li><a target=\"_blank\" href=\"http://redux.js.org/index.html\">Redux 手册</a><br /></li><li><a target=\"_blank\" href=\"http://flight-manual.atom.io/\">Atom 手册</a><br /></li></ul><p><br /></p><h2 id=\"29139c2a\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#rotylz\" target=\"_blank\"></a>文件名</h2><p><br /></p><p>文档的文件名不得含有空格。</p><p><br /></p><p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p><p><br /></p><pre><code>错误： 名词解释.md\n正确： glossary.md</code></pre><p><br /></p><p>文件名建议只使用小写字母，不使用大写字母。</p><p><br /></p><pre><code>错误：TroubleShooting.md\n正确：troubleshooting.md</code></pre><p><br /></p><p><span>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</span></p><p><br /></p><p><span>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</span></p><p><br /></p><pre><code>不佳：advanced_usage.md\n正确：advanced-usage.md</code></pre><p><br /></p><h1 id=\"2aa1328d\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#zt2ggt\" target=\"_blank\"></a>2. 标题</h1><p><br /></p><h2 id=\"6896da74\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#zhzyvu\" target=\"_blank\"></a>层级</h2><p><br /></p><p>标题分为四级。</p><p><br /></p><ul><li>一级标题：文章的标题<br /></li><li>二级标题：文章主要部分的大标题<br /></li><li>三级标题：二级标题下面一级的小标题<br /></li><li>四级标题：三级标题下面某一方面的小标题<br /></li></ul><p><br /></p><p>下面是示例。</p><p><br /></p><pre data-lang=\"markdown\"><code># 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题</code></pre><p><br /></p><h2 id=\"9b1d0244\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#zx2ggo\" target=\"_blank\"></a>原则</h2><p><br /></p><p>（1）一级标题下，不能直接出现三级标题。</p><p><br /></p><p>示例：下面的文章结构，缺少二级标题。</p><p><br /></p><pre data-lang=\"markdown\"><code># 一级标题\n### 三级标题</code></pre><p><br /></p><p>（2）标题要避免孤立编号（即同级标题只有一个）。</p><p><br /></p><p><span>示例：下面的文章结构，<code>二级标题 A</code>只包含一个三级标题，完全可以省略<code>三级标题 A</code>。</span></p><p><br /></p><pre data-lang=\"markdown\"><code>## 二级标题 A\n### 三级标题 A\n## 二级标题 B</code></pre><p><br /></p><p>（3）下级标题不重复上一级标题的名字。</p><p><br /></p><p>示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p><p><br /></p><pre data-lang=\"markdown\"><code>## 概述\n### 概述</code></pre><p><br /></p><p>（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。</p><p><br /></p><p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</p><p><br /></p><p>示例：下面的结构二要好于结构一。后者适用的场景，主要是较长篇幅的内容。</p><p><br /></p><pre data-lang=\"markdown\"><code>结构一\n### 三级标题\n#### 四级标题 A\n#### 四级标题 B\n#### 四级标题 C\n结构二\n### 三级标题\n**（1）A**\n**（2）B**\n**（3）C**</code></pre><p><br /></p><p><br /></p><h1 id=\"9e81e0fa\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#nko7ak\" target=\"_blank\"></a>3. 文本</h1><p><br /></p><h2 id=\"60f2dcff\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#73gsmu\" target=\"_blank\"></a>字间距</h2><p><br /></p><p>全角中文字符与半角英文字符之间，应有一个半角空格。</p><p><br /></p><pre><code>错误：本文介绍如何快速启动Windows系统。\n正确：本文介绍如何快速启动 Windows 系统。</code></pre><p><br /></p><p>全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p><p><br /></p><pre><code>正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。\n正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。</code></pre><p><br /></p><p>半角的百分号，视同阿拉伯数字。</p><p><br /></p><p>英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。</p><p><br /></p><pre><code>错误：一部容量为 16 GB 的智能手机\n正确：一部容量为 16GB 的智能手机</code></pre><p><br /></p><p>半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p><p><br /></p><pre><code>错误：他的电脑是 MacBook Air 。\n正确：他的电脑是 MacBook Air。</code></pre><p><br /></p><h2 id=\"f5e4551f\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#avclqz\" target=\"_blank\"></a>句子</h2><p><br /></p><ul><li>避免使用长句。句子内部不使用逗号时，总长度不应该超过 40 个字；使用逗号时，总长度不应该超过 100 字或者正文的 3 行。<br /></li><li>尽量使用简单句和并列句，避免使用复合句。<br /></li></ul><p><br /></p><h2 id=\"b61bb926\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#n553kl\" target=\"_blank\"></a>写作风格</h2><p><br /></p><p>1、尽量不使用被动语态，改为使用主动语态。</p><p><br /></p><pre><code>错误：假如此软件尚未被安装，\n正确：假如尚未安装这个软件，</code></pre><p><br /></p><p>2、不使用非正式的语言风格。</p><p><br /></p><pre><code>错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！\n正确：无法参加本次活动，我深感遗憾。</code></pre><p><br /></p><p>3、不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。</p><p><br /></p><pre><code>错误：这是唯二的快速启动的方法。\n正确：这是仅有的两种快速启动的方法。</code></pre><p><br /></p><p>4、用对“的”、“地”、“得”。</p><p><br /></p><pre><code>她露出了开心的笑容。\n（形容词＋的＋名词）\n她开心地笑了。\n（副词＋地＋动词）\n她笑得很开心。\n（动词＋得＋副词）</code></pre><p><br /></p><p>5、使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p><p><br /></p><pre><code>错误：从管理系统可以监视中继系统和受其直接控制的分配系统。\n正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。</code></pre><p><br /></p><p>6、名词前不要使用过多的形容词。</p><p><br /></p><pre><code>错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。\n正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。</code></pre><p><br /></p><p>7、不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。</p><p><br /></p><pre><code>错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。\n正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。</code></pre><p><br /></p><p>8、同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p><p><br /></p><pre><code>错误：请确认没有接通装置的电源。\n正确：请确认装置的电源已关闭。</code></pre><p><br /></p><p>9、避免使用双重否定句。</p><p><br /></p><pre><code>错误：没有删除权限的用户，不能删除此文件。\n正确：用户必须拥有删除权限，才能删除此文件。</code></pre><p><br /></p><h2 id=\"12443922\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#9le4ud\" target=\"_blank\"></a>英文处理</h2><p><br /></p><p>英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p><p><br /></p><pre><code>英文：⋯information stored in random access memory (RAMs)⋯\n中文：……存储在随机存取存储器（RAM）里的信息……</code></pre><p><br /></p><p><span>外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</span></p><p><br /></p><pre><code>U.S.A.\nApple, Inc.</code></pre><p><br /></p><p><span>表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）。</span></p><p><br /></p><pre><code>英文：5 minutes later⋯\n中文：5 分钟过去了⋯⋯</code></pre><p><br /></p><p>英文书名或电影名改用中文表达时，双引号应改为书名号。</p><p><br /></p><pre><code>英文：He published an article entitled &quot;The Future of the Aviation&quot;.\n中文：他发表了一篇名为《航空业的未来》的文章。</code></pre><p><br /></p><p>第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p><p><br /></p><pre><code>IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。</code></pre><p><br /></p><p>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p><p><br /></p><pre><code>“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。\n“online transaction processing”（在线事务处理）不是专有名词，不应大写。</code></pre><p><br /></p><p><br /></p><h1 id=\"c607ab3f\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#t1lmto\" target=\"_blank\"></a>4. 段落</h1><p><br /></p><h2 id=\"9b1d0244\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#vhyglr\" target=\"_blank\"></a>原则</h2><p><br /></p><ul><li>一个段落只能有一个主题，或一个中心句子。<br /></li><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。<br /></li><li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。<br /></li><li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。<br /></li><li>段落之间使用一个空行隔开。<br /></li><li>段落开头不要留出空白字符。<br /></li></ul><p><br /></p><h2 id=\"3b61c966\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#qol3tu\" target=\"_blank\"></a>引用</h2><p><br /></p><p>引用第三方内容时，应注明出处。</p><p><br /></p><pre><code>One man’s constant is another man’s variable. — Alan Perlis</code></pre><p><br /></p><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p><p><br /></p><pre><code>本文转载自 WikiQuote</code></pre><p><br /></p><p>使用外部图片时，必须在图片下方或文末标明来源。</p><p><br /></p><pre><code>本文部分图片来自 Wikipedia</code></pre><p><br /></p><h1 id=\"26c275be\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#chm6ni\" target=\"_blank\"></a>5. 数值</h1><p><br /></p><h2 id=\"5f13a179\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#m9heqc\" target=\"_blank\"></a>半角数字</h2><p><br /></p><p>数字一律使用半角形式，不得使用全角形式。</p><p><br /></p><pre><code>错误： 这件商品的价格是１０００元。\n正确： 这件商品的价格是 1000 元。</code></pre><p><br /></p><h2 id=\"8f596391\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#gfthzv\" target=\"_blank\"></a>千分号</h2><p><br /></p><p>数值为千位以上，应添加千分号（半角逗号）。</p><p><br /></p><pre><code>XXX 公司的实收资本为 RMB1,258,000。</code></pre><p><br /></p><p><span>对于 4 ～ 6 位的数值，千分号是选用的，比如<code>1000</code>和<code>1,000</code>都可以接受。对于7位及以上的数值，千分号是必须的。</span></p><p><br /></p><p><span>多位小数要从小数点后从左向右添加千分号，比如<code>4.234,345</code>。</span></p><p><br /></p><h2 id=\"8392ba7c\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#lyfmzv\" target=\"_blank\"></a>货币</h2><p><br /></p><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p><p><br /></p><pre><code>$1,000\n1,000 美元</code></pre><p><br /></p><h2 id=\"b7d43b22\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#x1oxsg\" target=\"_blank\"></a>数值范围</h2><p><br /></p><p><span>表示数值范围时，用<code>～</code>连接。参见《标点符号》一节的“连接号”部分。</span></p><p><br /></p><p>带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。</p><p><br /></p><pre><code>错误：132～234kg\n正确：132kg～234kg\n错误：67～89%\n正确：67%～89%</code></pre><p><br /></p><h2 id=\"f92bb521\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#002cgu\" target=\"_blank\"></a>变化程度的表示法</h2><p><br /></p><p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p><p><br /></p><pre><code>增加到过去的两倍\n（过去为一，现在为二）\n增加了两倍\n（过去为一，现在为三）</code></pre><p><br /></p><p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p><p><br /></p><pre><code>降低到百分之八十\n（定额是一百，现在是八十）\n降低了百分之八十\n（原来是一百，现在是二十）</code></pre><p><br /></p><p>不能用“降低N倍”或“减少N倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p><p><br /></p><p><br /></p><h1 id=\"8bcc96c9\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#gdtlsg\" target=\"_blank\"></a>6. 标点符号</h1><p><br /></p><h2 id=\"9b1d0244\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#0355qr\" target=\"_blank\"></a>原则</h2><p><br /></p><ul><li>中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。<br /></li><li>如果整句为英文，则该句使用英文/半角标点。<br /></li><li>句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。<br /></li></ul><p><br /></p><h2 id=\"b614b95c\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#9qr2gr\" target=\"_blank\"></a>句号</h2><p><br /></p><p><span>中文语句中的结尾处应该用全角句号（<code>。</code>）。</span></p><p><br /></p><p>句子末尾用括号加注时，句号应在括号之外。</p><p><br /></p><pre><code>错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）\n正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。</code></pre><p><br /></p><h2 id=\"c2d5517a\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#6ipqhu\" target=\"_blank\"></a>逗号</h2><p><br /></p><p><span>逗号<code>，</code>表示句子内部的一般性停顿。</span></p><p><br /></p><p>注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p><p><br /></p><h2 id=\"ce2ba916\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#7080nm\" target=\"_blank\"></a>顿号</h2><p><br /></p><p><span>句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</span></p><p><br /></p><pre><code>错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。\n正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</code></pre><p><br /></p><p><span>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</span></p><p><br /></p><pre><code>例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.</code></pre><p><br /></p><h2 id=\"cb368833\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#tthlwg\" target=\"_blank\"></a>分号</h2><p><br /></p><p><span>分号<code>；</code>表示复句内部并列分句之间的停顿。</span></p><p><br /></p><h2 id=\"e9072381\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#tdkfut\" target=\"_blank\"></a>引号</h2><p><br /></p><p><span>引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</span></p><p><br /></p><pre><code>例句：许多人都认为客户服务的核心是“友好”和“专业”。</code></pre><p><br /></p><p><span>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</span></p><p><br /></p><pre><code>例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”</code></pre><p><br /></p><h2 id=\"abb7851d\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#0pi9qz\" target=\"_blank\"></a>圆括号</h2><p><br /></p><p><span>补充说明时，使用全角圆括号<code>（）</code>，括号前后不加空格。</span></p><p><br /></p><pre><code>例句：请确认所有的连接（电缆和接插件）均安装牢固。</code></pre><p><br /></p><h2 id=\"16df9195\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#0mlqra\" target=\"_blank\"></a>冒号</h2><p><br /></p><p><span>全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</span></p><p><br /></p><pre><code>例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。</code></pre><p><br /></p><p><span>表示时间时，应使用半角冒号（<code>:</code>）。</span></p><p><br /></p><pre><code>例句：早上 8:00</code></pre><p><br /></p><h2 id=\"2db82e32\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#847zgk\" target=\"_blank\"></a>省略号</h2><p><br /></p><p><span>省略号<code>……</code>表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</span></p><p><br /></p><p>省略号不应与“等”这个词一起使用。</p><p><br /></p><pre><code>错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。\n正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……\n正确：我们为会餐准备了香蕉、苹果、梨等各色水果。</code></pre><p><br /></p><h2 id=\"725331f0\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#in7iyt\" target=\"_blank\"></a>感叹号</h2><p><br /></p><p><span>应该使用平静的语气叙述，尽量避免使用感叹号<code>！</code>。</span></p><p><br /></p><p><span>不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</span></p><p><br /></p><h2 id=\"52621281\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#vgo6yc\" target=\"_blank\"></a>破折号</h2><p><br /></p><p><span>破折号<code>————</code>一般用于进一步解释。</span></p><p><br /></p><p>破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。</p><p><br /></p><pre><code>例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。\n例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。</code></pre><p><br /></p><h2 id=\"abd9df57\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#5hmrnr\" target=\"_blank\"></a>连接号</h2><p><br /></p><p>连接号用于连接两个类似的词。</p><p><br /></p><p><span>以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</span></p><p><br /></p><ul><li>两个名词的复合<br /></li><li>图表编号<br /></li></ul><p><br /></p><pre><code>例句：氧化-还原反应\n例句：图 1-1</code></pre><p><br /></p><p><span>以下场合应该使用波浪连接号（<code>～</code>），占一个全角字符的位置。</span></p><p><br /></p><ul><li>数值范围（例如日期、时间或数字）<br /></li></ul><p><br /></p><pre><code>例句：2009 年～2011 年</code></pre><p><br /></p><p>注意，波浪连接号前后两个值都应该加上单位。</p><p><br /></p><p>波浪连接号也可以用汉字“至”代替。</p><p><br /></p><pre><code>例句：周围温度：-20°C 至 -10°C</code></pre><p><br /></p><h1 id=\"225a579a\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#3uodiu\" target=\"_blank\"></a>7. 参考链接</h1><p><br /></p><ul><li><a target=\"_blank\" href=\"https://github.com/ruanyf/document-style-guide\">中文技术文档的协作规范</a>, by 阮一峰<br /></li><li><a target=\"_blank\" href=\"http://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html\">产品手册中文写作规范</a>, by 华为<br /></li><li><a target=\"_blank\" href=\"http://docs.daocloud.io/write-docs/format\">写作规范和格式规范</a>, by DaoCloud<br /></li><li><a target=\"_blank\" href=\"http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf\">技术写作技巧在日汉翻译中的应用</a>, by 刘方<br /></li><li><a target=\"_blank\" href=\"https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf\">简体中文规范指南</a>, by lengoo<br /></li><li><a target=\"_blank\" href=\"https://open.leancloud.cn/copywriting-style-guide.html\">文档风格指南</a>, by LeanCloud<br /></li><li><a target=\"_blank\" href=\"https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit\">豌豆荚文案风格指南</a>, by 豌豆荚<br /></li><li><a target=\"_blank\" href=\"https://github.com/sparanoid/chinese-copywriting-guidelines\">中文文案排版指北</a>, by sparanoid<br /></li><li><a target=\"_blank\" href=\"http://w3c.github.io/clreq/\">中文排版需求</a>, by W3C<br /></li><li><a target=\"_blank\" href=\"http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html\">为什么文件名要小写？</a>, by 阮一峰<br /></li><li><a target=\"_blank\" href=\"https://developers.google.com/style/\">Google Developer Documentation Style Guide</a>, by Google<br /></li></ul>",
    "body_lake": "<!doctype lake><h1 id=\"423ecc15\">1. 文档体系</h1><p><br /></p><h2 id=\"8a95a6d1\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#g5t3el\" target=\"_blank\"></a>结构</h2><p><br /></p><p>软件手册是一部完整的书，建议采用下面的结构。</p><p><br /></p><ul><li><span><strong>简介</strong>（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</span><br /></li><li><span><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</span><br /></li><li><span><strong>入门篇</strong>（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程</span></li></ul><ul data-lake-indent=\"1\"><li><span><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</span><br /></li><li><span><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</span><br /></li><li><span><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</span><br /></li></ul><ul><li><span><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程</span><br /></li><li><span><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</span><br /></li><li><span><strong>FAQ</strong>：[可选] [文件] 常见问题解答</span><br /></li><li><span><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容</span></li></ul><ul data-lake-indent=\"1\"><li><span><strong>Glossary</strong>：[可选] [文件] 名词解释</span><br /></li><li><span><strong>Recipes</strong>：[可选] [文件] 最佳实践</span><br /></li><li><span><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</span><br /></li><li><span><strong>ChangeLog</strong>：[可选] [文件] 版本说明</span><br /></li><li><span><strong>Feedback</strong>：[可选] [文件] 反馈方式</span><br /></li></ul><p><br /></p><p>下面是两个真实范例，可参考。</p><p><br /></p><ul><li><a target=\"_blank\" href=\"http://redux.js.org/index.html\">Redux 手册</a><br /></li><li><a target=\"_blank\" href=\"http://flight-manual.atom.io/\">Atom 手册</a><br /></li></ul><p><br /></p><h2 id=\"29139c2a\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#rotylz\" target=\"_blank\"></a>文件名</h2><p><br /></p><p>文档的文件名不得含有空格。</p><p><br /></p><p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%20%E5%90%8D%E8%AF%8D%E8%A7%A3%E9%87%8A.md%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%20glossary.md%22%7D\"></card><p><br /></p><p>文件名建议只使用小写字母，不使用大写字母。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9ATroubleShooting.md%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9Atroubleshooting.md%22%7D\"></card><p><br /></p><p><span>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</span></p><p><br /></p><p><span>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%B8%8D%E4%BD%B3%EF%BC%9Aadvanced_usage.md%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9Aadvanced-usage.md%22%7D\"></card><p><br /></p><h1 id=\"2aa1328d\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#zt2ggt\" target=\"_blank\"></a>2. 标题</h1><p><br /></p><h2 id=\"6896da74\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#zhzyvu\" target=\"_blank\"></a>层级</h2><p><br /></p><p>标题分为四级。</p><p><br /></p><ul><li>一级标题：文章的标题<br /></li><li>二级标题：文章主要部分的大标题<br /></li><li>三级标题：二级标题下面一级的小标题<br /></li><li>四级标题：三级标题下面某一方面的小标题<br /></li></ul><p><br /></p><p>下面是示例。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22markdown%22%2C%22code%22%3A%22%23%20%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98%5Cn%23%23%20%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98%5Cn%23%23%23%20%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98%5Cn%23%23%23%23%20%E5%9B%9B%E7%BA%A7%E6%A0%87%E9%A2%98%22%7D\"></card><p><br /></p><h2 id=\"9b1d0244\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#zx2ggo\" target=\"_blank\"></a>原则</h2><p><br /></p><p>（1）一级标题下，不能直接出现三级标题。</p><p><br /></p><p>示例：下面的文章结构，缺少二级标题。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22markdown%22%2C%22code%22%3A%22%23%20%E4%B8%80%E7%BA%A7%E6%A0%87%E9%A2%98%5Cn%23%23%23%20%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98%22%7D\"></card><p><br /></p><p>（2）标题要避免孤立编号（即同级标题只有一个）。</p><p><br /></p><p><span>示例：下面的文章结构，<code>二级标题 A</code>只包含一个三级标题，完全可以省略<code>三级标题 A</code>。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22markdown%22%2C%22code%22%3A%22%23%23%20%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98%20A%5Cn%23%23%23%20%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98%20A%5Cn%23%23%20%E4%BA%8C%E7%BA%A7%E6%A0%87%E9%A2%98%20B%22%7D\"></card><p><br /></p><p>（3）下级标题不重复上一级标题的名字。</p><p><br /></p><p>示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22markdown%22%2C%22code%22%3A%22%23%23%20%E6%A6%82%E8%BF%B0%5Cn%23%23%23%20%E6%A6%82%E8%BF%B0%22%7D\"></card><p><br /></p><p>（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节。</p><p><br /></p><p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</p><p><br /></p><p>示例：下面的结构二要好于结构一。后者适用的场景，主要是较长篇幅的内容。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22markdown%22%2C%22code%22%3A%22%E7%BB%93%E6%9E%84%E4%B8%80%5Cn%23%23%23%20%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98%5Cn%23%23%23%23%20%E5%9B%9B%E7%BA%A7%E6%A0%87%E9%A2%98%20A%5Cn%23%23%23%23%20%E5%9B%9B%E7%BA%A7%E6%A0%87%E9%A2%98%20B%5Cn%23%23%23%23%20%E5%9B%9B%E7%BA%A7%E6%A0%87%E9%A2%98%20C%5Cn%E7%BB%93%E6%9E%84%E4%BA%8C%5Cn%23%23%23%20%E4%B8%89%E7%BA%A7%E6%A0%87%E9%A2%98%5Cn**%EF%BC%881%EF%BC%89A**%5Cn**%EF%BC%882%EF%BC%89B**%5Cn**%EF%BC%883%EF%BC%89C**%22%7D\"></card><p><br /></p><p><br /></p><h1 id=\"9e81e0fa\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#nko7ak\" target=\"_blank\"></a>3. 文本</h1><p><br /></p><h2 id=\"60f2dcff\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#73gsmu\" target=\"_blank\"></a>字间距</h2><p><br /></p><p>全角中文字符与半角英文字符之间，应有一个半角空格。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E6%9C%AC%E6%96%87%E4%BB%8B%E7%BB%8D%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8Windows%E7%B3%BB%E7%BB%9F%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E6%9C%AC%E6%96%87%E4%BB%8B%E7%BB%8D%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%20Windows%20%E7%B3%BB%E7%BB%9F%E3%80%82%22%7D\"></card><p><br /></p><p>全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E6%AD%A3%E7%A1%AE%EF%BC%9A2011%E5%B9%B45%E6%9C%8815%E6%97%A5%EF%BC%8C%E6%88%91%E8%AE%A2%E8%B4%AD%E4%BA%865%E5%8F%B0%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91%E4%B8%8E10%E5%8F%B0%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A2011%20%E5%B9%B4%205%20%E6%9C%88%2015%20%E6%97%A5%EF%BC%8C%E6%88%91%E8%AE%A2%E8%B4%AD%E4%BA%86%205%20%E5%8F%B0%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%94%B5%E8%84%91%E4%B8%8E%2010%20%E5%8F%B0%E5%B9%B3%E6%9D%BF%E7%94%B5%E8%84%91%E3%80%82%22%7D\"></card><p><br /></p><p>半角的百分号，视同阿拉伯数字。</p><p><br /></p><p>英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E4%B8%80%E9%83%A8%E5%AE%B9%E9%87%8F%E4%B8%BA%2016%20GB%20%E7%9A%84%E6%99%BA%E8%83%BD%E6%89%8B%E6%9C%BA%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E4%B8%80%E9%83%A8%E5%AE%B9%E9%87%8F%E4%B8%BA%2016GB%20%E7%9A%84%E6%99%BA%E8%83%BD%E6%89%8B%E6%9C%BA%22%7D\"></card><p><br /></p><p>半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E4%BB%96%E7%9A%84%E7%94%B5%E8%84%91%E6%98%AF%20MacBook%20Air%20%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E4%BB%96%E7%9A%84%E7%94%B5%E8%84%91%E6%98%AF%20MacBook%20Air%E3%80%82%22%7D\"></card><p><br /></p><h2 id=\"f5e4551f\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#avclqz\" target=\"_blank\"></a>句子</h2><p><br /></p><ul><li>避免使用长句。句子内部不使用逗号时，总长度不应该超过 40 个字；使用逗号时，总长度不应该超过 100 字或者正文的 3 行。<br /></li><li>尽量使用简单句和并列句，避免使用复合句。<br /></li></ul><p><br /></p><h2 id=\"b61bb926\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#n553kl\" target=\"_blank\"></a>写作风格</h2><p><br /></p><p>1、尽量不使用被动语态，改为使用主动语态。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E5%81%87%E5%A6%82%E6%AD%A4%E8%BD%AF%E4%BB%B6%E5%B0%9A%E6%9C%AA%E8%A2%AB%E5%AE%89%E8%A3%85%EF%BC%8C%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E5%81%87%E5%A6%82%E5%B0%9A%E6%9C%AA%E5%AE%89%E8%A3%85%E8%BF%99%E4%B8%AA%E8%BD%AF%E4%BB%B6%EF%BC%8C%22%7D\"></card><p><br /></p><p>2、不使用非正式的语言风格。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9ALady%20Gaga%20%E7%9A%84%E6%BC%94%E5%94%B1%E4%BC%9A%E7%9C%9F%E6%98%AF%E9%85%B7%E6%AF%99%E4%BA%86%EF%BC%8C%E4%BB%8E%E6%B2%A1%E7%9C%8B%E8%BF%87%E8%BF%99%E4%B9%88%E7%BB%99%E5%8A%9B%E7%9A%84%E8%A1%A8%E6%BC%94%EF%BC%81%EF%BC%81%EF%BC%81%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E6%97%A0%E6%B3%95%E5%8F%82%E5%8A%A0%E6%9C%AC%E6%AC%A1%E6%B4%BB%E5%8A%A8%EF%BC%8C%E6%88%91%E6%B7%B1%E6%84%9F%E9%81%97%E6%86%BE%E3%80%82%22%7D\"></card><p><br /></p><p>3、不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E8%BF%99%E6%98%AF%E5%94%AF%E4%BA%8C%E7%9A%84%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E8%BF%99%E6%98%AF%E4%BB%85%E6%9C%89%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95%E3%80%82%22%7D\"></card><p><br /></p><p>4、用对“的”、“地”、“得”。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E5%A5%B9%E9%9C%B2%E5%87%BA%E4%BA%86%E5%BC%80%E5%BF%83%E7%9A%84%E7%AC%91%E5%AE%B9%E3%80%82%5Cn%EF%BC%88%E5%BD%A2%E5%AE%B9%E8%AF%8D%EF%BC%8B%E7%9A%84%EF%BC%8B%E5%90%8D%E8%AF%8D%EF%BC%89%5Cn%E5%A5%B9%E5%BC%80%E5%BF%83%E5%9C%B0%E7%AC%91%E4%BA%86%E3%80%82%5Cn%EF%BC%88%E5%89%AF%E8%AF%8D%EF%BC%8B%E5%9C%B0%EF%BC%8B%E5%8A%A8%E8%AF%8D%EF%BC%89%5Cn%E5%A5%B9%E7%AC%91%E5%BE%97%E5%BE%88%E5%BC%80%E5%BF%83%E3%80%82%5Cn%EF%BC%88%E5%8A%A8%E8%AF%8D%EF%BC%8B%E5%BE%97%EF%BC%8B%E5%89%AF%E8%AF%8D%EF%BC%89%22%7D\"></card><p><br /></p><p>5、使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E4%BB%8E%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%AF%E4%BB%A5%E7%9B%91%E8%A7%86%E4%B8%AD%E7%BB%A7%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%8F%97%E5%85%B6%E7%9B%B4%E6%8E%A5%E6%8E%A7%E5%88%B6%E7%9A%84%E5%88%86%E9%85%8D%E7%B3%BB%E7%BB%9F%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E4%BB%8E%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%AF%E4%BB%A5%E7%9B%91%E8%A7%86%E4%B8%A4%E4%B8%AA%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%B8%AD%E7%BB%A7%E7%B3%BB%E7%BB%9F%E5%92%8C%E5%8F%97%E4%B8%AD%E7%BB%A7%E7%B3%BB%E7%BB%9F%E7%9B%B4%E6%8E%A5%E6%8E%A7%E5%88%B6%E7%9A%84%E5%88%86%E9%85%8D%E7%B3%BB%E7%BB%9F%E3%80%82%22%7D\"></card><p><br /></p><p>6、名词前不要使用过多的形容词。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E6%AD%A4%E8%AE%BE%E5%A4%87%E7%9A%84%E4%BD%BF%E7%94%A8%E5%BF%85%E9%A1%BB%E5%9C%A8%E6%8E%A5%E5%8F%97%E8%BF%87%E6%9C%AC%E5%85%AC%E5%8F%B8%E4%B8%BE%E5%8A%9E%E7%9A%84%E6%AD%A3%E5%BC%8F%E7%9A%84%E8%AE%BE%E5%A4%87%E5%9F%B9%E8%AE%AD%E7%9A%84%E6%8A%80%E5%B8%88%E7%9A%84%E6%8C%87%E5%AF%BC%E4%B8%8B%E8%BF%9B%E8%A1%8C%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E6%AD%A4%E8%AE%BE%E5%A4%87%E5%BF%85%E9%A1%BB%E5%9C%A8%E6%8A%80%E5%B8%88%E7%9A%84%E6%8C%87%E5%AF%BC%E4%B8%8B%E4%BD%BF%E7%94%A8%EF%BC%8C%E4%B8%94%E6%8C%87%E5%AF%BC%E6%8A%80%E5%B8%88%E5%BF%85%E9%A1%BB%E6%8E%A5%E5%8F%97%E8%BF%87%E7%94%B1%E6%9C%AC%E5%85%AC%E5%8F%B8%E4%B8%BE%E5%8A%9E%E7%9A%84%E6%AD%A3%E5%BC%8F%E8%AE%BE%E5%A4%87%E5%9F%B9%E8%AE%AD%E3%80%82%22%7D\"></card><p><br /></p><p>7、不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E6%9C%AC%E4%BA%A7%E5%93%81%E9%80%82%E7%94%A8%E4%BA%8E%E4%BB%8E%E7%94%B1%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%8A%A8%E4%BD%9C%E6%8E%A7%E5%88%B6%E7%9A%84%E5%8D%95%E4%B8%80%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84%E5%88%B0%E7%94%B1%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%8A%A8%E4%BD%9C%E6%8E%A7%E5%88%B6%E7%9A%84%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84%E7%AD%89%E5%A4%9A%E7%A7%8D%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E6%9C%AC%E4%BA%A7%E5%93%81%E9%80%82%E7%94%A8%E4%BA%8E%E5%A4%9A%E7%A7%8D%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E3%80%82%E6%97%A0%E8%AE%BA%E6%98%AF%E7%94%B1%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E5%8D%95%E4%B8%80%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84%EF%BC%89%EF%BC%8C%E8%BF%98%E6%98%AF%E7%94%B1%E5%A4%9A%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86%E7%BB%93%E6%9E%84%EF%BC%89%E8%BF%9B%E8%A1%8C%E5%8A%A8%E4%BD%9C%E6%8E%A7%E5%88%B6%EF%BC%8C%E5%9D%87%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E6%9C%AC%E4%BA%A7%E5%93%81%E3%80%82%22%7D\"></card><p><br /></p><p>8、同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E8%AF%B7%E7%A1%AE%E8%AE%A4%E6%B2%A1%E6%9C%89%E6%8E%A5%E9%80%9A%E8%A3%85%E7%BD%AE%E7%9A%84%E7%94%B5%E6%BA%90%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E8%AF%B7%E7%A1%AE%E8%AE%A4%E8%A3%85%E7%BD%AE%E7%9A%84%E7%94%B5%E6%BA%90%E5%B7%B2%E5%85%B3%E9%97%AD%E3%80%82%22%7D\"></card><p><br /></p><p>9、避免使用双重否定句。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E6%B2%A1%E6%9C%89%E5%88%A0%E9%99%A4%E6%9D%83%E9%99%90%E7%9A%84%E7%94%A8%E6%88%B7%EF%BC%8C%E4%B8%8D%E8%83%BD%E5%88%A0%E9%99%A4%E6%AD%A4%E6%96%87%E4%BB%B6%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E7%94%A8%E6%88%B7%E5%BF%85%E9%A1%BB%E6%8B%A5%E6%9C%89%E5%88%A0%E9%99%A4%E6%9D%83%E9%99%90%EF%BC%8C%E6%89%8D%E8%83%BD%E5%88%A0%E9%99%A4%E6%AD%A4%E6%96%87%E4%BB%B6%E3%80%82%22%7D\"></card><p><br /></p><h2 id=\"12443922\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#9le4ud\" target=\"_blank\"></a>英文处理</h2><p><br /></p><p>英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E8%8B%B1%E6%96%87%EF%BC%9A%E2%8B%AFinformation%20stored%20in%20random%20access%20memory%20(RAMs)%E2%8B%AF%5Cn%E4%B8%AD%E6%96%87%EF%BC%9A%E2%80%A6%E2%80%A6%E5%AD%98%E5%82%A8%E5%9C%A8%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8%EF%BC%88RAM%EF%BC%89%E9%87%8C%E7%9A%84%E4%BF%A1%E6%81%AF%E2%80%A6%E2%80%A6%22%7D\"></card><p><br /></p><p><span>外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22U.S.A.%5CnApple%2C%20Inc.%22%7D\"></card><p><br /></p><p><span>表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E8%8B%B1%E6%96%87%EF%BC%9A5%20minutes%20later%E2%8B%AF%5Cn%E4%B8%AD%E6%96%87%EF%BC%9A5%20%E5%88%86%E9%92%9F%E8%BF%87%E5%8E%BB%E4%BA%86%E2%8B%AF%E2%8B%AF%22%7D\"></card><p><br /></p><p>英文书名或电影名改用中文表达时，双引号应改为书名号。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E8%8B%B1%E6%96%87%EF%BC%9AHe%20published%20an%20article%20entitled%20%5C%22The%20Future%20of%20the%20Aviation%5C%22.%5Cn%E4%B8%AD%E6%96%87%EF%BC%9A%E4%BB%96%E5%8F%91%E8%A1%A8%E4%BA%86%E4%B8%80%E7%AF%87%E5%90%8D%E4%B8%BA%E3%80%8A%E8%88%AA%E7%A9%BA%E4%B8%9A%E7%9A%84%E6%9C%AA%E6%9D%A5%E3%80%8B%E7%9A%84%E6%96%87%E7%AB%A0%E3%80%82%22%7D\"></card><p><br /></p><p>第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22IOC%EF%BC%88International%20Olympic%20Committee%EF%BC%8C%E5%9B%BD%E9%99%85%E5%A5%A5%E6%9E%97%E5%8C%B9%E5%85%8B%E5%A7%94%E5%91%98%E4%BC%9A%EF%BC%89%E3%80%82%E8%BF%99%E6%A0%B7%E5%AE%9A%E4%B9%89%E5%90%8E%EF%BC%8C%E4%BE%BF%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E2%80%9CIOC%E2%80%9D%E4%BA%86%E3%80%82%22%7D\"></card><p><br /></p><p>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E2%80%9CAmerican%20Association%20of%20Physicists%20in%20Medicine%E2%80%9D%EF%BC%88%E7%BE%8E%E5%9B%BD%E5%8C%BB%E5%AD%A6%E7%89%A9%E7%90%86%E5%AD%A6%E5%AE%B6%E5%8D%8F%E4%BC%9A%EF%BC%89%E6%98%AF%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D%EF%BC%8C%E9%9C%80%E8%A6%81%E5%A4%A7%E5%86%99%E3%80%82%5Cn%E2%80%9Conline%20transaction%20processing%E2%80%9D%EF%BC%88%E5%9C%A8%E7%BA%BF%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%EF%BC%89%E4%B8%8D%E6%98%AF%E4%B8%93%E6%9C%89%E5%90%8D%E8%AF%8D%EF%BC%8C%E4%B8%8D%E5%BA%94%E5%A4%A7%E5%86%99%E3%80%82%22%7D\"></card><p><br /></p><p><br /></p><h1 id=\"c607ab3f\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#t1lmto\" target=\"_blank\"></a>4. 段落</h1><p><br /></p><h2 id=\"9b1d0244\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#vhyglr\" target=\"_blank\"></a>原则</h2><p><br /></p><ul><li>一个段落只能有一个主题，或一个中心句子。<br /></li><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。<br /></li><li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。<br /></li><li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。<br /></li><li>段落之间使用一个空行隔开。<br /></li><li>段落开头不要留出空白字符。<br /></li></ul><p><br /></p><h2 id=\"3b61c966\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#qol3tu\" target=\"_blank\"></a>引用</h2><p><br /></p><p>引用第三方内容时，应注明出处。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22One%20man%E2%80%99s%20constant%20is%20another%20man%E2%80%99s%20variable.%20%E2%80%94%20Alan%20Perlis%22%7D\"></card><p><br /></p><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E6%9C%AC%E6%96%87%E8%BD%AC%E8%BD%BD%E8%87%AA%20WikiQuote%22%7D\"></card><p><br /></p><p>使用外部图片时，必须在图片下方或文末标明来源。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E6%9C%AC%E6%96%87%E9%83%A8%E5%88%86%E5%9B%BE%E7%89%87%E6%9D%A5%E8%87%AA%20Wikipedia%22%7D\"></card><p><br /></p><h1 id=\"26c275be\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#chm6ni\" target=\"_blank\"></a>5. 数值</h1><p><br /></p><h2 id=\"5f13a179\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#m9heqc\" target=\"_blank\"></a>半角数字</h2><p><br /></p><p>数字一律使用半角形式，不得使用全角形式。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%20%E8%BF%99%E4%BB%B6%E5%95%86%E5%93%81%E7%9A%84%E4%BB%B7%E6%A0%BC%E6%98%AF%EF%BC%91%EF%BC%90%EF%BC%90%EF%BC%90%E5%85%83%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%20%E8%BF%99%E4%BB%B6%E5%95%86%E5%93%81%E7%9A%84%E4%BB%B7%E6%A0%BC%E6%98%AF%201000%20%E5%85%83%E3%80%82%22%7D\"></card><p><br /></p><h2 id=\"8f596391\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#gfthzv\" target=\"_blank\"></a>千分号</h2><p><br /></p><p>数值为千位以上，应添加千分号（半角逗号）。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22XXX%20%E5%85%AC%E5%8F%B8%E7%9A%84%E5%AE%9E%E6%94%B6%E8%B5%84%E6%9C%AC%E4%B8%BA%20RMB1%2C258%2C000%E3%80%82%22%7D\"></card><p><br /></p><p><span>对于 4 ～ 6 位的数值，千分号是选用的，比如<code>1000</code>和<code>1,000</code>都可以接受。对于7位及以上的数值，千分号是必须的。</span></p><p><br /></p><p><span>多位小数要从小数点后从左向右添加千分号，比如<code>4.234,345</code>。</span></p><p><br /></p><h2 id=\"8392ba7c\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#lyfmzv\" target=\"_blank\"></a>货币</h2><p><br /></p><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%241%2C000%5Cn1%2C000%20%E7%BE%8E%E5%85%83%22%7D\"></card><p><br /></p><h2 id=\"b7d43b22\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#x1oxsg\" target=\"_blank\"></a>数值范围</h2><p><br /></p><p><span>表示数值范围时，用<code>～</code>连接。参见《标点符号》一节的“连接号”部分。</span></p><p><br /></p><p>带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A132%EF%BD%9E234kg%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A132kg%EF%BD%9E234kg%5Cn%E9%94%99%E8%AF%AF%EF%BC%9A67%EF%BD%9E89%25%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A67%25%EF%BD%9E89%25%22%7D\"></card><p><br /></p><h2 id=\"f92bb521\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#002cgu\" target=\"_blank\"></a>变化程度的表示法</h2><p><br /></p><p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E5%A2%9E%E5%8A%A0%E5%88%B0%E8%BF%87%E5%8E%BB%E7%9A%84%E4%B8%A4%E5%80%8D%5Cn%EF%BC%88%E8%BF%87%E5%8E%BB%E4%B8%BA%E4%B8%80%EF%BC%8C%E7%8E%B0%E5%9C%A8%E4%B8%BA%E4%BA%8C%EF%BC%89%5Cn%E5%A2%9E%E5%8A%A0%E4%BA%86%E4%B8%A4%E5%80%8D%5Cn%EF%BC%88%E8%BF%87%E5%8E%BB%E4%B8%BA%E4%B8%80%EF%BC%8C%E7%8E%B0%E5%9C%A8%E4%B8%BA%E4%B8%89%EF%BC%89%22%7D\"></card><p><br /></p><p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%99%8D%E4%BD%8E%E5%88%B0%E7%99%BE%E5%88%86%E4%B9%8B%E5%85%AB%E5%8D%81%5Cn%EF%BC%88%E5%AE%9A%E9%A2%9D%E6%98%AF%E4%B8%80%E7%99%BE%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%98%AF%E5%85%AB%E5%8D%81%EF%BC%89%5Cn%E9%99%8D%E4%BD%8E%E4%BA%86%E7%99%BE%E5%88%86%E4%B9%8B%E5%85%AB%E5%8D%81%5Cn%EF%BC%88%E5%8E%9F%E6%9D%A5%E6%98%AF%E4%B8%80%E7%99%BE%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%98%AF%E4%BA%8C%E5%8D%81%EF%BC%89%22%7D\"></card><p><br /></p><p>不能用“降低N倍”或“减少N倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p><p><br /></p><p><br /></p><h1 id=\"8bcc96c9\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#gdtlsg\" target=\"_blank\"></a>6. 标点符号</h1><p><br /></p><h2 id=\"9b1d0244\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#0355qr\" target=\"_blank\"></a>原则</h2><p><br /></p><ul><li>中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。<br /></li><li>如果整句为英文，则该句使用英文/半角标点。<br /></li><li>句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。<br /></li></ul><p><br /></p><h2 id=\"b614b95c\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#9qr2gr\" target=\"_blank\"></a>句号</h2><p><br /></p><p><span>中文语句中的结尾处应该用全角句号（<code>。</code>）。</span></p><p><br /></p><p>句子末尾用括号加注时，句号应在括号之外。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84%E8%BE%93%E5%87%BA%EF%BC%8C%E8%AF%B7%E5%8F%82%E7%85%A7%E7%AC%AC%201.3%20%E8%8A%82%EF%BC%88%E8%A7%81%E7%AC%AC%2026%20%E9%A1%B5%E3%80%82%EF%BC%89%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E7%9A%84%E8%BE%93%E5%87%BA%EF%BC%8C%E8%AF%B7%E5%8F%82%E7%85%A7%E7%AC%AC%201.3%20%E8%8A%82%EF%BC%88%E8%A7%81%E7%AC%AC%2026%20%E9%A1%B5%EF%BC%89%E3%80%82%22%7D\"></card><p><br /></p><h2 id=\"c2d5517a\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#6ipqhu\" target=\"_blank\"></a>逗号</h2><p><br /></p><p><span>逗号<code>，</code>表示句子内部的一般性停顿。</span></p><p><br /></p><p>注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p><p><br /></p><h2 id=\"ce2ba916\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#7080nm\" target=\"_blank\"></a>顿号</h2><p><br /></p><p><span>句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E6%88%91%E6%9C%80%E6%AC%A3%E8%B5%8F%E7%9A%84%E7%A7%91%E6%8A%80%E5%85%AC%E5%8F%B8%E6%9C%89%20Google%2C%20Facebook%2C%20%E8%85%BE%E8%AE%AF%2C%20%E9%98%BF%E9%87%8C%E5%92%8C%E7%99%BE%E5%BA%A6%E7%AD%89%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E6%88%91%E6%9C%80%E6%AC%A3%E8%B5%8F%E7%9A%84%E7%A7%91%E6%8A%80%E5%85%AC%E5%8F%B8%E6%9C%89%20Google%E3%80%81Facebook%E3%80%81%E8%85%BE%E8%AE%AF%E3%80%81%E9%98%BF%E9%87%8C%E5%92%8C%E7%99%BE%E5%BA%A6%E7%AD%89%E3%80%82%22%7D\"></card><p><br /></p><p><span>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9AMicrosoft%20Office%20includes%20Word%2C%20Excel%2C%20PowerPoint%2C%20Outlook%20and%20other%20components.%22%7D\"></card><p><br /></p><h2 id=\"cb368833\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#tthlwg\" target=\"_blank\"></a>分号</h2><p><br /></p><p><span>分号<code>；</code>表示复句内部并列分句之间的停顿。</span></p><p><br /></p><h2 id=\"e9072381\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#tdkfut\" target=\"_blank\"></a>引号</h2><p><br /></p><p><span>引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9A%E8%AE%B8%E5%A4%9A%E4%BA%BA%E9%83%BD%E8%AE%A4%E4%B8%BA%E5%AE%A2%E6%88%B7%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%A0%B8%E5%BF%83%E6%98%AF%E2%80%9C%E5%8F%8B%E5%A5%BD%E2%80%9D%E5%92%8C%E2%80%9C%E4%B8%93%E4%B8%9A%E2%80%9D%E3%80%82%22%7D\"></card><p><br /></p><p><span>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9A%E9%B2%8D%E5%8B%83%E8%A7%A3%E9%87%8A%E9%81%93%EF%BC%9A%E2%80%9C%E6%88%91%E8%A6%81%E6%94%BE%E9%9F%B3%E4%B9%90%EF%BC%8C%E5%8F%AF%E8%90%A8%E5%88%A9%E8%AF%B4%EF%BC%8C%E2%80%98%E4%B8%8D%E8%A1%8C%EF%BC%81%E2%80%99%E3%80%82%E2%80%9D%22%7D\"></card><p><br /></p><h2 id=\"abb7851d\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#0pi9qz\" target=\"_blank\"></a>圆括号</h2><p><br /></p><p><span>补充说明时，使用全角圆括号<code>（）</code>，括号前后不加空格。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9A%E8%AF%B7%E7%A1%AE%E8%AE%A4%E6%89%80%E6%9C%89%E7%9A%84%E8%BF%9E%E6%8E%A5%EF%BC%88%E7%94%B5%E7%BC%86%E5%92%8C%E6%8E%A5%E6%8F%92%E4%BB%B6%EF%BC%89%E5%9D%87%E5%AE%89%E8%A3%85%E7%89%A2%E5%9B%BA%E3%80%82%22%7D\"></card><p><br /></p><h2 id=\"16df9195\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#0mlqra\" target=\"_blank\"></a>冒号</h2><p><br /></p><p><span>全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9A%E8%AF%B7%E7%A1%AE%E8%AE%A4%E4%BB%A5%E4%B8%8B%E5%87%A0%E9%A1%B9%E5%86%85%E5%AE%B9%EF%BC%9A%E6%97%B6%E9%97%B4%E3%80%81%E5%9C%B0%E7%82%B9%E3%80%81%E6%B4%BB%E5%8A%A8%E5%90%8D%E7%A7%B0%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%9D%A5%E5%AE%BE%E6%95%B0%E9%87%8F%E3%80%82%22%7D\"></card><p><br /></p><p><span>表示时间时，应使用半角冒号（<code>:</code>）。</span></p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9A%E6%97%A9%E4%B8%8A%208%3A00%22%7D\"></card><p><br /></p><h2 id=\"2db82e32\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#847zgk\" target=\"_blank\"></a>省略号</h2><p><br /></p><p><span>省略号<code>……</code>表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</span></p><p><br /></p><p>省略号不应与“等”这个词一起使用。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E9%94%99%E8%AF%AF%EF%BC%9A%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BC%9A%E9%A4%90%E5%87%86%E5%A4%87%E4%BA%86%E9%A6%99%E8%95%89%E3%80%81%E8%8B%B9%E6%9E%9C%E3%80%81%E6%A2%A8%E2%80%A6%E7%AD%89%E5%90%84%E8%89%B2%E6%B0%B4%E6%9E%9C%E3%80%82%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BC%9A%E9%A4%90%E5%87%86%E5%A4%87%E4%BA%86%E5%90%84%E8%89%B2%E6%B0%B4%E6%9E%9C%EF%BC%8C%E6%9C%89%E9%A6%99%E8%95%89%E3%80%81%E8%8B%B9%E6%9E%9C%E3%80%81%E6%A2%A8%E2%80%A6%E2%80%A6%5Cn%E6%AD%A3%E7%A1%AE%EF%BC%9A%E6%88%91%E4%BB%AC%E4%B8%BA%E4%BC%9A%E9%A4%90%E5%87%86%E5%A4%87%E4%BA%86%E9%A6%99%E8%95%89%E3%80%81%E8%8B%B9%E6%9E%9C%E3%80%81%E6%A2%A8%E7%AD%89%E5%90%84%E8%89%B2%E6%B0%B4%E6%9E%9C%E3%80%82%22%7D\"></card><p><br /></p><h2 id=\"725331f0\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#in7iyt\" target=\"_blank\"></a>感叹号</h2><p><br /></p><p><span>应该使用平静的语气叙述，尽量避免使用感叹号<code>！</code>。</span></p><p><br /></p><p><span>不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</span></p><p><br /></p><h2 id=\"52621281\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#vgo6yc\" target=\"_blank\"></a>破折号</h2><p><br /></p><p><span>破折号<code>————</code>一般用于进一步解释。</span></p><p><br /></p><p>破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9A%E7%9B%B4%E8%A7%89%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%B0%BD%E7%AE%A1%E5%AE%83%E5%B9%B6%E4%B8%8D%E6%80%BB%E6%98%AF%E5%8F%AF%E9%9D%A0%E7%9A%84%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E5%91%8A%E8%AF%89%E6%88%91%EF%BC%8C%E8%BF%99%E4%BA%8B%E5%8F%AF%E8%83%BD%E5%87%BA%E4%BA%86%E4%BA%9B%E9%97%AE%E9%A2%98%E3%80%82%5Cn%E4%BE%8B%E5%8F%A5%EF%BC%9A%E7%9B%B4%E8%A7%89%20%E2%80%94%E2%80%94%20%E5%B0%BD%E7%AE%A1%E5%AE%83%E5%B9%B6%E4%B8%8D%E6%80%BB%E6%98%AF%E5%8F%AF%E9%9D%A0%E7%9A%84%20%E2%80%94%E2%80%94%20%E5%91%8A%E8%AF%89%E6%88%91%EF%BC%8C%E8%BF%99%E4%BA%8B%E5%8F%AF%E8%83%BD%E5%87%BA%E4%BA%86%E4%BA%9B%E9%97%AE%E9%A2%98%E3%80%82%22%7D\"></card><p><br /></p><h2 id=\"abd9df57\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#5hmrnr\" target=\"_blank\"></a>连接号</h2><p><br /></p><p>连接号用于连接两个类似的词。</p><p><br /></p><p><span>以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</span></p><p><br /></p><ul><li>两个名词的复合<br /></li><li>图表编号<br /></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9A%E6%B0%A7%E5%8C%96-%E8%BF%98%E5%8E%9F%E5%8F%8D%E5%BA%94%5Cn%E4%BE%8B%E5%8F%A5%EF%BC%9A%E5%9B%BE%201-1%22%7D\"></card><p><br /></p><p><span>以下场合应该使用波浪连接号（<code>～</code>），占一个全角字符的位置。</span></p><p><br /></p><ul><li>数值范围（例如日期、时间或数字）<br /></li></ul><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9A2009%20%E5%B9%B4%EF%BD%9E2011%20%E5%B9%B4%22%7D\"></card><p><br /></p><p>注意，波浪连接号前后两个值都应该加上单位。</p><p><br /></p><p>波浪连接号也可以用汉字“至”代替。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%E4%BE%8B%E5%8F%A5%EF%BC%9A%E5%91%A8%E5%9B%B4%E6%B8%A9%E5%BA%A6%EF%BC%9A-20%C2%B0C%20%E8%87%B3%20-10%C2%B0C%22%7D\"></card><p><br /></p><h1 id=\"225a579a\"><a href=\"https://souche.yuque.com/arch/ted/tsxvkc#3uodiu\" target=\"_blank\"></a>7. 参考链接</h1><p><br /></p><ul><li><a target=\"_blank\" href=\"https://github.com/ruanyf/document-style-guide\">中文技术文档的协作规范</a>, by 阮一峰<br /></li><li><a target=\"_blank\" href=\"http://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html\">产品手册中文写作规范</a>, by 华为<br /></li><li><a target=\"_blank\" href=\"http://docs.daocloud.io/write-docs/format\">写作规范和格式规范</a>, by DaoCloud<br /></li><li><a target=\"_blank\" href=\"http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf\">技术写作技巧在日汉翻译中的应用</a>, by 刘方<br /></li><li><a target=\"_blank\" href=\"https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf\">简体中文规范指南</a>, by lengoo<br /></li><li><a target=\"_blank\" href=\"https://open.leancloud.cn/copywriting-style-guide.html\">文档风格指南</a>, by LeanCloud<br /></li><li><a target=\"_blank\" href=\"https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit\">豌豆荚文案风格指南</a>, by 豌豆荚<br /></li><li><a target=\"_blank\" href=\"https://github.com/sparanoid/chinese-copywriting-guidelines\">中文文案排版指北</a>, by sparanoid<br /></li><li><a target=\"_blank\" href=\"http://w3c.github.io/clreq/\">中文排版需求</a>, by W3C<br /></li><li><a target=\"_blank\" href=\"http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html\">为什么文件名要小写？</a>, by 阮一峰<br /></li><li><a target=\"_blank\" href=\"https://developers.google.com/style/\">Google Developer Documentation Style Guide</a>, by Google<br /><cursor /></li></ul>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-18T01:26:51.000Z",
    "deleted_at": null,
    "created_at": "2019-02-18T01:26:08.000Z",
    "updated_at": "2019-02-18T01:26:51.000Z",
    "published_at": "2019-02-18T01:26:51.000Z",
    "first_published_at": "2019-02-18T01:26:51.000Z",
    "word_count": 3861,
    "cover": null,
    "description": "1. 文档体系结构软件手册是一部完整的书，建议采用下面的结构。简介（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明快速上手（Getting Started）：[可选] [文件] 如何最快速地使用产品入门篇（Basics）： [必备] [目录] 又称”...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1259411,
    "slug": "xbas94",
    "title": "如何写一个优雅的 PPT",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104642-03ea5f42-081a-4a7f-aea3-1e2c04fb2474.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104651-97919a2a-4eb1-4ee3-a4ea-4ec9884a9703.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104663-d96fa507-f703-4652-a0ea-877f1e7d51d2.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104618-acf7d654-0691-4bcb-be22-adda8ff27800.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104663-53986226-874e-431f-a495-3de097f8668d.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104676-ff53e4fa-20f4-4381-bbd0-0143dd18f2ce.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104639-9d800044-c2a0-45c9-bc5d-3e2d6ba51b7b.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104679-85a19489-5a27-47d6-84f4-2c00eed77bc7.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104660-1ae5f2b6-13cd-40e6-ac73-35cba2613312.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104692-83313fc3-f6ec-4cc0-be90-af364e9a37d0.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104647-c940000b-848f-4ccc-9b25-5aae62dadf8c.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104677-e4bb2c5b-b6e3-4f5a-8596-ff2420e1e94f.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104648-05d7e183-1b1a-4311-99a0-bd9218f5f240.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104680-99d1c3f2-accd-49c0-ba57-99367a908336.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104728-adc44371-62bf-47eb-8a1d-aeafdf6f35d2.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104699-573d66ca-39a6-4eeb-b379-8b8bc1536aa6.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104689-bbca0130-93a1-4558-83e0-361f2bb9183f.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104681-4af0d5d5-e63c-48ce-8e12-7989363a5a28.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104704-273237b1-3e0c-47ab-a232-81340ed84578.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104704-496d2260-dc3b-4e59-8709-7e4d681dbfd8.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104740-2152de6c-bc0f-4090-908e-c8e9f2c06003.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104754-4dfc1298-01ac-4bd1-9c91-97a2a49ad440.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104719-58143ceb-227a-4089-9549-2c00c76baf56.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104724-0fa4ec5b-cc82-402a-b937-777b294d2342.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104746-358c0174-ea5f-4657-bb26-e510f9c52c46.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104726-0f7248b8-063f-4f47-9b6e-98e8400f66fb.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104754-65eff5ad-440d-4bce-b01f-01f5aa8f0de4.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104789-a4e1c1b3-10ef-486d-a0b6-125e1451e98d.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104782-d6e490e2-4b1d-4343-a99a-50b8f01917db.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104793-25bb309f-cabb-4aa4-bec2-698dbccf5406.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104758-9ad06da8-f5f7-4824-a973-e3be53fda1bb.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104710-c556c477-68b8-48e2-9831-41b095b6de70.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104729-ed2bbc1d-8fbe-4003-bbfd-2cdc977d8143.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104794-00b8bc22-3e78-4bb2-98a9-f6899212cd19.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104782-abdd446a-ee9b-47ff-9e6e-cd60d2cd7460.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104787-01c36fa7-87f6-4a07-b449-04fbb8ec4985.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104744-e2d7a7de-7087-4046-a6df-350c4db5504d.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104783-0740f0ae-64c1-4460-8dda-c1e95896a2b4.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104805-e0630a78-16db-4bbf-8742-0f69d1de73df.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104801-aaef6f5c-cb96-4caa-8a31-503afc8d0414.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104780-f00ceccf-7405-46b1-b8cd-bef32e464cca.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104791-b70b3203-e3bb-41f3-9583-b618b2a11ff2.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104788-12c7f3f5-0c1e-4735-93c2-aa452044f23b.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104793-7c07b7ce-b329-4874-9f46-262153932d01.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104848-4a8221ab-7f8b-464f-896a-ce677f3cf103.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104804-aaf7ad20-2c75-4ab1-a4fc-36dd22f8668c.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104800-4a098d61-fe9c-4c8b-9c31-2a8e8bc8fce9.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104703-7985867c-e1a3-4a4b-a70a-c060138a66f8.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104831-e2b5d0b7-2495-44b7-94a1-908fa37f6e50.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104860-4708d102-bc79-4eb1-ba28-ea867df46edf.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104849-30edf516-d51b-4147-8926-295c7864e5fc.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104851-51da22c5-a803-40d9-9620-0a6bc0b944db.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104739-8c6dc67c-0b65-4f33-907d-41d6e69167a6.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104746-10e0bb86-d64e-441c-9016-c83fb5a75c97.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104749-f3c70d86-f991-4d82-8f19-ec45222bfe2e.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)<br /> \n\n![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104894-9ad5afc1-ab3d-43dc-bc00-6b89db668cb8.jpeg#align=left&display=inline&height=337&originHeight=337&originWidth=600&size=0&width=600)\n",
    "body_draft": "",
    "body_html": "<p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104642-03ea5f42-081a-4a7f-aea3-1e2c04fb2474.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104651-97919a2a-4eb1-4ee3-a4ea-4ec9884a9703.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104663-d96fa507-f703-4652-a0ea-877f1e7d51d2.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104618-acf7d654-0691-4bcb-be22-adda8ff27800.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104663-53986226-874e-431f-a495-3de097f8668d.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104676-ff53e4fa-20f4-4381-bbd0-0143dd18f2ce.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104639-9d800044-c2a0-45c9-bc5d-3e2d6ba51b7b.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104679-85a19489-5a27-47d6-84f4-2c00eed77bc7.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104660-1ae5f2b6-13cd-40e6-ac73-35cba2613312.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104692-83313fc3-f6ec-4cc0-be90-af364e9a37d0.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104647-c940000b-848f-4ccc-9b25-5aae62dadf8c.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104677-e4bb2c5b-b6e3-4f5a-8596-ff2420e1e94f.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104648-05d7e183-1b1a-4311-99a0-bd9218f5f240.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104680-99d1c3f2-accd-49c0-ba57-99367a908336.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104728-adc44371-62bf-47eb-8a1d-aeafdf6f35d2.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104699-573d66ca-39a6-4eeb-b379-8b8bc1536aa6.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104689-bbca0130-93a1-4558-83e0-361f2bb9183f.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104681-4af0d5d5-e63c-48ce-8e12-7989363a5a28.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104704-273237b1-3e0c-47ab-a232-81340ed84578.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104704-496d2260-dc3b-4e59-8709-7e4d681dbfd8.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104740-2152de6c-bc0f-4090-908e-c8e9f2c06003.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104754-4dfc1298-01ac-4bd1-9c91-97a2a49ad440.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104719-58143ceb-227a-4089-9549-2c00c76baf56.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104724-0fa4ec5b-cc82-402a-b937-777b294d2342.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104746-358c0174-ea5f-4657-bb26-e510f9c52c46.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104726-0f7248b8-063f-4f47-9b6e-98e8400f66fb.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104754-65eff5ad-440d-4bce-b01f-01f5aa8f0de4.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104789-a4e1c1b3-10ef-486d-a0b6-125e1451e98d.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104782-d6e490e2-4b1d-4343-a99a-50b8f01917db.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104793-25bb309f-cabb-4aa4-bec2-698dbccf5406.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104758-9ad06da8-f5f7-4824-a973-e3be53fda1bb.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104710-c556c477-68b8-48e2-9831-41b095b6de70.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104729-ed2bbc1d-8fbe-4003-bbfd-2cdc977d8143.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104794-00b8bc22-3e78-4bb2-98a9-f6899212cd19.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104782-abdd446a-ee9b-47ff-9e6e-cd60d2cd7460.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104787-01c36fa7-87f6-4a07-b449-04fbb8ec4985.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104744-e2d7a7de-7087-4046-a6df-350c4db5504d.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104783-0740f0ae-64c1-4460-8dda-c1e95896a2b4.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104805-e0630a78-16db-4bbf-8742-0f69d1de73df.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104801-aaef6f5c-cb96-4caa-8a31-503afc8d0414.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104780-f00ceccf-7405-46b1-b8cd-bef32e464cca.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104791-b70b3203-e3bb-41f3-9583-b618b2a11ff2.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104788-12c7f3f5-0c1e-4735-93c2-aa452044f23b.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104793-7c07b7ce-b329-4874-9f46-262153932d01.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104848-4a8221ab-7f8b-464f-896a-ce677f3cf103.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104804-aaf7ad20-2c75-4ab1-a4fc-36dd22f8668c.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104800-4a098d61-fe9c-4c8b-9c31-2a8e8bc8fce9.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104703-7985867c-e1a3-4a4b-a70a-c060138a66f8.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104831-e2b5d0b7-2495-44b7-94a1-908fa37f6e50.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104860-4708d102-bc79-4eb1-ba28-ea867df46edf.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104849-30edf516-d51b-4147-8926-295c7864e5fc.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104851-51da22c5-a803-40d9-9620-0a6bc0b944db.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104739-8c6dc67c-0b65-4f33-907d-41d6e69167a6.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104746-10e0bb86-d64e-441c-9016-c83fb5a75c97.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104749-f3c70d86-f991-4d82-8f19-ec45222bfe2e.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p><p> </p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1550453104894-9ad5afc1-ab3d-43dc-bc00-6b89db668cb8.jpeg#align=left&amp;display=inline&amp;height=337&amp;originHeight=337&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></p>",
    "body_lake": "<!doctype lake><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104642-03ea5f42-081a-4a7f-aea3-1e2c04fb2474.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104651-97919a2a-4eb1-4ee3-a4ea-4ec9884a9703.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104663-d96fa507-f703-4652-a0ea-877f1e7d51d2.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104618-acf7d654-0691-4bcb-be22-adda8ff27800.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104663-53986226-874e-431f-a495-3de097f8668d.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104676-ff53e4fa-20f4-4381-bbd0-0143dd18f2ce.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104639-9d800044-c2a0-45c9-bc5d-3e2d6ba51b7b.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104679-85a19489-5a27-47d6-84f4-2c00eed77bc7.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104660-1ae5f2b6-13cd-40e6-ac73-35cba2613312.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104692-83313fc3-f6ec-4cc0-be90-af364e9a37d0.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104647-c940000b-848f-4ccc-9b25-5aae62dadf8c.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104677-e4bb2c5b-b6e3-4f5a-8596-ff2420e1e94f.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104648-05d7e183-1b1a-4311-99a0-bd9218f5f240.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104680-99d1c3f2-accd-49c0-ba57-99367a908336.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104728-adc44371-62bf-47eb-8a1d-aeafdf6f35d2.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104699-573d66ca-39a6-4eeb-b379-8b8bc1536aa6.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104689-bbca0130-93a1-4558-83e0-361f2bb9183f.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104681-4af0d5d5-e63c-48ce-8e12-7989363a5a28.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104704-273237b1-3e0c-47ab-a232-81340ed84578.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104704-496d2260-dc3b-4e59-8709-7e4d681dbfd8.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104740-2152de6c-bc0f-4090-908e-c8e9f2c06003.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104754-4dfc1298-01ac-4bd1-9c91-97a2a49ad440.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104719-58143ceb-227a-4089-9549-2c00c76baf56.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104724-0fa4ec5b-cc82-402a-b937-777b294d2342.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104746-358c0174-ea5f-4657-bb26-e510f9c52c46.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104726-0f7248b8-063f-4f47-9b6e-98e8400f66fb.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104754-65eff5ad-440d-4bce-b01f-01f5aa8f0de4.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104789-a4e1c1b3-10ef-486d-a0b6-125e1451e98d.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104782-d6e490e2-4b1d-4343-a99a-50b8f01917db.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104793-25bb309f-cabb-4aa4-bec2-698dbccf5406.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104758-9ad06da8-f5f7-4824-a973-e3be53fda1bb.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104710-c556c477-68b8-48e2-9831-41b095b6de70.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104729-ed2bbc1d-8fbe-4003-bbfd-2cdc977d8143.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104794-00b8bc22-3e78-4bb2-98a9-f6899212cd19.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104782-abdd446a-ee9b-47ff-9e6e-cd60d2cd7460.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104787-01c36fa7-87f6-4a07-b449-04fbb8ec4985.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104744-e2d7a7de-7087-4046-a6df-350c4db5504d.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104783-0740f0ae-64c1-4460-8dda-c1e95896a2b4.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104805-e0630a78-16db-4bbf-8742-0f69d1de73df.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104801-aaef6f5c-cb96-4caa-8a31-503afc8d0414.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104780-f00ceccf-7405-46b1-b8cd-bef32e464cca.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104791-b70b3203-e3bb-41f3-9583-b618b2a11ff2.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104788-12c7f3f5-0c1e-4735-93c2-aa452044f23b.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104793-7c07b7ce-b329-4874-9f46-262153932d01.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104848-4a8221ab-7f8b-464f-896a-ce677f3cf103.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104804-aaf7ad20-2c75-4ab1-a4fc-36dd22f8668c.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104800-4a098d61-fe9c-4c8b-9c31-2a8e8bc8fce9.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104703-7985867c-e1a3-4a4b-a70a-c060138a66f8.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104831-e2b5d0b7-2495-44b7-94a1-908fa37f6e50.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104860-4708d102-bc79-4eb1-ba28-ea867df46edf.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104849-30edf516-d51b-4147-8926-295c7864e5fc.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card><cursor /></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104851-51da22c5-a803-40d9-9620-0a6bc0b944db.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104739-8c6dc67c-0b65-4f33-907d-41d6e69167a6.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104746-10e0bb86-d64e-441c-9016-c83fb5a75c97.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104749-f3c70d86-f991-4d82-8f19-ec45222bfe2e.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p><p> </p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1550453104894-9ad5afc1-ab3d-43dc-bc00-6b89db668cb8.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A337%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A337%7D\"></card></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-18T01:25:49.000Z",
    "deleted_at": null,
    "created_at": "2019-02-18T01:25:00.000Z",
    "updated_at": "2019-02-18T01:25:49.000Z",
    "published_at": "2019-02-18T01:25:49.000Z",
    "first_published_at": "2019-02-18T01:25:49.000Z",
    "word_count": 0,
    "cover": null,
    "description": "                                                       ",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1259175,
    "slug": "wd1hqf",
    "title": "个人网站开站了",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "网站地址:https://www.murphyyi.com<br />技术栈：基于react的阿里巴巴的antd前端解决方案，后端暂时未完成<br />网站加速：腾讯云cdn加速。<br />对公oss存储：阿里云。<br />![image.png](https://cdn.nlark.com/yuque/0/2019/png/190217/1550428134432-30577c59-f66f-4024-b482-cddf920f1786.png#align=left&display=inline&height=831&name=image.png&originHeight=1662&originWidth=2366&size=4243153&width=1183)<br />后期计划，将网站改造成动态网页。<br />编写oss上传方法，基于rocketMQ的消息调用链。\n",
    "body_draft": "",
    "body_html": "<p>网站地址:https://www.murphyyi.com</p><p>技术栈：基于react的阿里巴巴的antd前端解决方案，后端暂时未完成</p><p>网站加速：腾讯云cdn加速。</p><p>对公oss存储：阿里云。</p><p><img alt=\"image.png\" title=\"image.png\" src=\"https://cdn.nlark.com/yuque/0/2019/png/190217/1550428134432-30577c59-f66f-4024-b482-cddf920f1786.png#align=left&amp;display=inline&amp;height=831&amp;name=image.png&amp;originHeight=1662&amp;originWidth=2366&amp;size=4243153&amp;width=1183\" style=\"max-width: 600px; width: 1183px;\" /></p><p>后期计划，将网站改造成动态网页。</p><p>编写oss上传方法，基于rocketMQ的消息调用链。</p>",
    "body_lake": "<!doctype lake><p>网站地址:https://www.murphyyi.com</p><p>技术栈：基于react的阿里巴巴的antd前端解决方案，后端暂时未完成</p><p>网站加速：腾讯云cdn加速。</p><p>对公oss存储：阿里云。</p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F190217%2F1550428134432-30577c59-f66f-4024-b482-cddf920f1786.png%22%2C%22originWidth%22%3A2366%2C%22originHeight%22%3A1662%2C%22name%22%3A%22image.png%22%2C%22size%22%3A4243153%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A1183%2C%22height%22%3A831%7D\"></card><cursor /></p><p>后期计划，将网站改造成动态网页。</p><p>编写oss上传方法，基于rocketMQ的消息调用链。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-02-17T18:29:10.000Z",
    "deleted_at": null,
    "created_at": "2019-02-17T18:24:00.000Z",
    "updated_at": "2019-02-17T18:29:10.000Z",
    "published_at": "2019-02-17T18:29:10.000Z",
    "first_published_at": "2019-02-17T18:29:10.000Z",
    "word_count": 82,
    "cover": null,
    "description": "网站地址:https://www.murphyyi.com技术栈：基于react的阿里巴巴的antd前端解决方案，后端暂时未完成网站加速：腾讯云cdn加速。对公oss存储：阿里云。后期计划，将网站改造成动态网页。编写oss上传方法，基于rocketMQ的消息调用链。",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1154316,
    "slug": "vxfada",
    "title": "冒烟测试和回归测试的区别",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "区别：<br />冒烟测试就是完成一个新版本的开发后，对该版本最基本的功能进行测试，保证基本的功能和流程能走通。如果不通过，则打回开发那边重新开发；如果通过测试，才会进行下一步的测试(功能测试，集成测试，系统测试等等)。冒烟测试优点是节省测试时间，防止build失败。缺点是覆盖率还是比较低。<br />回归测试我有两层理解，一是就是当你修复一个bug后，把之前的测试用例再次应用到修复后的版本上进行测试。二是当一个新版本开发好后，而且冒烟测试通过，此时可以先用上一个版本的测试用例对新版本进行测试，看是否有bug。<br />[![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1548160046594-24358355-6f79-4f92-b9af-3a85237bae20.jpeg#align=left&display=inline&height=450&originHeight=450&originWidth=600&size=0&width=600)](https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/8694a4c27d1ed21b29fabb1aa16eddc451da3f19.jpg)<br />拓展资料：<br />1.冒烟测试就是在一个新版本出来的时候，将软件的全部功能过一遍，看有没有什么大问题。如果功能可以正常运行，不会影响测试进行，那么这个版本就可以真正开始测试了。如果功能有重大问题或影响测试进行，那么这个版本就是不合格的，不用进行进一步的测试。<br />2.回归测试就是以前版本中发现的bug在新的版本中验证是否存在且是否引发新的bug。\n",
    "body_draft": "",
    "body_html": "<p>区别：</p><p>冒烟测试就是完成一个新版本的开发后，对该版本最基本的功能进行测试，保证基本的功能和流程能走通。如果不通过，则打回开发那边重新开发；如果通过测试，才会进行下一步的测试(功能测试，集成测试，系统测试等等)。冒烟测试优点是节省测试时间，防止build失败。缺点是覆盖率还是比较低。</p><p>回归测试我有两层理解，一是就是当你修复一个bug后，把之前的测试用例再次应用到修复后的版本上进行测试。二是当一个新版本开发好后，而且冒烟测试通过，此时可以先用上一个版本的测试用例对新版本进行测试，看是否有bug。</p><p style=\"text-align: center;\"><a href=\"https://gss0.baidu.com/7Po3dSag_xI4khGko9WTAnF6hhy/zhidao/pic/item/8694a4c27d1ed21b29fabb1aa16eddc451da3f19.jpg\" target=\"_blank\" ref=\"noopener noreferrer\"><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1548160046594-24358355-6f79-4f92-b9af-3a85237bae20.jpeg#align=left&amp;display=inline&amp;height=450&amp;originHeight=450&amp;originWidth=600&amp;size=0&amp;width=600\" style=\"max-width: 600px; width: 600px;\" /></a></p><p>拓展资料：</p><p>1.冒烟测试就是在一个新版本出来的时候，将软件的全部功能过一遍，看有没有什么大问题。如果功能可以正常运行，不会影响测试进行，那么这个版本就可以真正开始测试了。如果功能有重大问题或影响测试进行，那么这个版本就是不合格的，不用进行进一步的测试。</p><p>2.回归测试就是以前版本中发现的bug在新的版本中验证是否存在且是否引发新的bug。</p>",
    "body_lake": "<!doctype lake><p>区别：</p><p>冒烟测试就是完成一个新版本的开发后，对该版本最基本的功能进行测试，保证基本的功能和流程能走通。如果不通过，则打回开发那边重新开发；如果通过测试，才会进行下一步的测试(功能测试，集成测试，系统测试等等)。冒烟测试优点是节省测试时间，防止build失败。缺点是覆盖率还是比较低。</p><p>回归测试我有两层理解，一是就是当你修复一个bug后，把之前的测试用例再次应用到修复后的版本上进行测试。二是当一个新版本开发好后，而且冒烟测试通过，此时可以先用上一个版本的测试用例对新版本进行测试，看是否有bug。</p><p style=\"text-align: center;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1548160046594-24358355-6f79-4f92-b9af-3a85237bae20.jpeg%22%2C%22originWidth%22%3A600%2C%22originHeight%22%3A450%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22link%22%3A%22https%3A%2F%2Fgss0.baidu.com%2F7Po3dSag_xI4khGko9WTAnF6hhy%2Fzhidao%2Fpic%2Fitem%2F8694a4c27d1ed21b29fabb1aa16eddc451da3f19.jpg%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A600%2C%22height%22%3A450%7D\"></card><cursor /></p><p>拓展资料：</p><p>1.冒烟测试就是在一个新版本出来的时候，将软件的全部功能过一遍，看有没有什么大问题。如果功能可以正常运行，不会影响测试进行，那么这个版本就可以真正开始测试了。如果功能有重大问题或影响测试进行，那么这个版本就是不合格的，不用进行进一步的测试。</p><p>2.回归测试就是以前版本中发现的bug在新的版本中验证是否存在且是否引发新的bug。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-22T12:27:52.000Z",
    "deleted_at": null,
    "created_at": "2019-01-16T16:28:35.000Z",
    "updated_at": "2019-01-22T12:27:52.000Z",
    "published_at": "2019-01-22T12:27:52.000Z",
    "first_published_at": "2019-01-16T16:28:46.000Z",
    "word_count": 366,
    "cover": null,
    "description": "区别：冒烟测试就是完成一个新版本的开发后，对该版本最基本的功能进行测试，保证基本的功能和流程能走通。如果不通过，则打回开发那边重新开发；如果通过测试，才会进行下一步的测试(功能测试，集成测试，系统测试等等)。冒烟测试优点是节省测试时间，防止build失败。缺点是覆盖率还是比较低。回归测试我有两...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1154107,
    "slug": "grv5qr",
    "title": "@Resource @autowired区别",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "@Resources是jdk的，而@Autowired的，使用@Resources解耦。<br />@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了。@Resource有两个属性是比较重要的，分是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。<br />@Resource装配顺序<br />1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常<br />2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常<br />3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常<br />4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；\n\n",
    "body_draft": "",
    "body_html": "<p style=\"text-align: justify;\">@Resources是jdk的，而@Autowired的，使用@Resources解耦。</p><p style=\"text-align: justify;\">@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了。@Resource有两个属性是比较重要的，分是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。</p><p style=\"text-align: justify;\">@Resource装配顺序</p><p style=\"text-align: justify;\">1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常</p><p style=\"text-align: justify;\">2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常</p><p style=\"text-align: justify;\">3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常</p><p style=\"text-align: justify;\">4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</p><p></p>",
    "body_lake": "<!doctype lake><p style=\"text-align: justify;\">@Resources是jdk的，而@Autowired的，使用@Resources解耦。</p><p style=\"text-align: justify;\">@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了。@Resource有两个属性是比较重要的，分是name和type，Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。所以如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不指定name也不指定type属性，这时将通过反射机制使用byName自动注入策略。</p><p style=\"text-align: justify;\">@Resource装配顺序</p><p style=\"text-align: justify;\">1. 如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常</p><p style=\"text-align: justify;\">2. 如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常</p><p style=\"text-align: justify;\">3. 如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常</p><p style=\"text-align: justify;\">4. 如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配；</p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22status%22%3A%22error%22%2C%22src%22%3A%22%22%2C%22percent%22%3A0%2C%22message%22%3A%22%E5%9B%BE%E7%89%87%E4%B8%8D%E6%94%AF%E6%8C%81%E6%8B%B7%E8%B4%9D%E5%A4%8D%E5%88%B6%EF%BC%8C%E8%AF%B7%E5%8D%95%E7%8B%AC%E5%A4%8D%E5%88%B6%E4%B8%8A%E4%BC%A0%22%2C%22size%22%3A0%7D\"></card><cursor /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-16T14:20:15.000Z",
    "deleted_at": null,
    "created_at": "2019-01-16T14:18:57.000Z",
    "updated_at": "2019-01-16T14:20:15.000Z",
    "published_at": "2019-01-16T14:20:15.000Z",
    "first_published_at": "2019-01-16T14:20:15.000Z",
    "word_count": 331,
    "cover": null,
    "description": "@Resources是jdk的，而@Autowired的，使用@Resources解耦。@Resource的作用相当于@Autowired，只不过@Autowired按byType自动注入，而@Resource默认按 byName自动注入罢了。@Resource有两个属性是比较重要的，分是na...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1145315,
    "slug": "em11rd",
    "title": "JVM 学习 值传递与对象引用传递",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "学过Java基础的人都知道：值传递和引用传递是初次接触Java时的一个难点，有时候记得了语法却记不得怎么实际运用，有时候会的了运用却解释不出原理，而且坊间讨论的话题又是充满争议：有的论坛帖子说Java只有值传递，有的博客说两者皆有；这让人有点摸不着头脑，下面我们就这个话题做一些探讨，对书籍、对论坛博客的说法，做一次考证，以得出信得过的答案。<br />其实，对于值传递和引用传递的语法和运用，百度一下，就能出来可观的解释和例子数目，或许你看一下例子好像就懂，但是当你参加面试，做一道这个知识点的笔试题时感觉自己会，胸有成熟的写了答案，却发现是错的，或者是你根本不会做。<br />是什么原因？<br />那是因为你对知识点没有了解透彻，只知道其皮毛。要熟读一个语法很简单，要理解一行代码也不难，但是能把学过的知识融会贯通，串联起来理解，那就是非常难了，在此，关于值传递和引用传递，小编会从以前学过的基础知识开始，从内存模型开始，一步步的引出值传递和引用传递的本质原理，故篇幅较长，知识点较多，望读者多有包涵。<br />**1. 形参与实参**<br />我们先来重温一组语法：\n> 1、形参：方法被调用时需要传递进来的参数，如：func(int a)中的a，它只有在func被调用期间a才有意义，也就是会被分配内存空间，在方法func执行完成后，a就会被销毁释放空间，也就是不存在了  \n> 2、实参：方法被调用时是传入的实际值，它在方法被调用前就已经被初始化并且在方法被调用时传入。\n\n举个栗子：<br />例子中<br />int a=10;中的a在被调用之前就已经创建并初始化，在调用func方法时，他被当做参数传入，所以这个a是实参。<br />而func(int a)中的a只有在func被调用时它的生命周期才开始，而在func调用结束之后，它也随之被JVM释放掉，，所以这个a是形参。<br />**2. Java的数据类型**<br />所谓数据类型，是编程语言中对内存的一种抽象表达方式，我们知道程序是由代码文件和静态资源组成，在程序被运行前，这些代码存在在硬盘里，程序开始运行，这些代码会被转成计算机能识别的内容放到内存中被执行。<br />因此\n> 数据类型实质上是用来定义编程语言中相同类型的数据的存储形式，也就是决定了如何将代表这些值的位存储到计算机的内存中。\n\n所以，数据在内存中的存储，是根据数据类型来划定存储形式和存储位置的。<br />那么<br />Java的数据类型有哪些？\n> 1、基本类型：编程语言中内置的最小粒度的数据类型。它包括四大类八种类型：\n> 4种整数类型：byte、short、int、long  \n> 2种浮点数类型：float、double  \n> 1种字符类型：char  \n> 1种布尔类型：boolean  \n> 2、引用类型：引用也叫句柄，引用类型，是编程语言中定义的在句柄中存放着实际内容所在地址的地址值的一种数据形式。它主要包括： \n> 类  \n> 接口  \n> 数组\n\n有了数据类型，JVM对程序数据的管理就规范化了，不同的数据类型，它的存储形式和位置是不一样的，要想知道JVM是怎么存储各种类型的数据，就得先了解JVM的内存划分以及每部分的职能。<br />**3.JVM内存的划分及职能**<br />Java语言本身是不能操作内存的，它的一切都是交给JVM来管理和控制的，因此Java内存区域的划分也就是JVM的区域划分，在说JVM的内存划分之前，我们先来看一下Java程序的执行过程，如下图：<br />![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244858-a12aac5a-acac-4bde-a6a2-48669b307b70.jpeg#align=left&display=inline&height=534&originHeight=712&originWidth=994&size=0&width=746)<br />有图可以看出：Java代码被编译器编译成字节码之后，JVM开辟一片内存空间（也叫运行时数据区），通过类加载器加到到运行时数据区来存储程序执行期间需要用到的数据和相关信息，在这个数据区中，它由以下几部分组成：<br />1. 虚拟机栈<br />2. 堆<br />3. 程序计数器<br />4. 方法区<br />5. 本地方法栈<br />我们接着来了解一下每部分的原理以及具体用来存储程序执行过程中的哪些数据。<br />**1. 虚拟机栈**<br />虚拟机栈是Java方法执行的内存模型，栈中存放着栈帧，每个栈帧分别对应一个被调用的方法，方法的调用过程对应栈帧在虚拟机中入栈到出栈的过程。<br />栈是线程私有的，也就是线程之间的栈是隔离的；当程序中某个线程开始执行一个方法时就会相应的创建一个栈帧并且入栈（位于栈顶），在方法结束后，栈帧出栈。<br />下图表示了一个Java栈的模型以及栈帧的组成：<br />![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244851-d3d7369b-7c0a-4c25-aab9-d91d911319e3.jpeg#align=left&display=inline&height=413&originHeight=492&originWidth=888&size=0&width=746)<br />栈帧:是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素。<br />每个栈帧中包括：<br />1、局部变量表: 用来存储方法中的局部变量（非静态变量、函数形参）。当变量为基本数据类型时，直接存储值，当变量为引用类型时，存储的是指向具体对象的引用。<br /><br />2、操作数栈: Java虚拟机的解释执行引擎被称为\"基于栈的执行引擎\"，其中所指的栈就是指操作数栈。<br />3、指向运行时常量池的引用: 存储程序执行时可能用到常量的引用。<br />4、方法返回地址: 存储方法执行完成后的返回地址。<br />**2. 堆：**<br />堆是用来存储对象本身和数组的，在JVM中只有一个堆，因此，堆是被所有线程共享的。<br />**3. 方法区：**<br />方法区是一块所有线程共享的内存逻辑区域，在JVM中只有一个方法区，用来存储一些线程可共享的内容，它是线程安全的，多个线程同时访问方法区中同一个内容时，只能有一个线程装载该数据，其它线程只能等待。<br />方法区可存储的内容有：类的全路径名、类的直接超类的权全限定名、类的访问修饰符、类的类型（类或接口）、类的直接接口全限定名的有序列表、常量池（字段，方法信息，静态变量，类型引用（class））等。<br />**4. 本地方法栈：**<br /><br />本地方法栈的功能和虚拟机栈是基本一致的，并且也是线程私有的，它们的区别在于虚拟机栈是为执行Java方法服务的，而本地方法栈是为执行本地方法服务的。<br />**有人会疑惑：什么是本地方法？为什么Java还要调用本地方法？**<br />**5. 程序计数器：**<br />线程私有的。<br />记录着当前线程所执行的字节码的行号指示器，在程序运行过程中，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、异常处理、线程恢复等基础功能都需要依赖计数器完成。<br />**4. 数据如何在内存中存储？**<br />从上面程序运行图我们可以看到，JVM在程序运行时的内存分配有三个地方：<br />• 堆<br />• 栈<br />• 静态方法区<br />• 常量区<br />相应地，每个存储区域都有自己的内存分配策略：<br />• 堆式：<br /><br />• 栈式<br />• 静态<br />我们已经知道：Java中的数据类型有基本数据类型和引用数据类型，那么这些数据的存储都使用哪一种策略呢？<br />这里要分以下的情况进行探究：\n> 1. 基本数据类型的存储：\n>  A. 基本数据类型的局部变量  \n> B. 基本数据类型的成员变量  \n> C. 基本数据类型的静态变量  \n> 2. 引用数据类型的存储\n\n**1. 基本数据类型的存储**<br />我们分别来研究一下：<br />A.基本数据类型的局部变量<br />1、定义基本数据类型的局部变量以及数据都是直接存储在内存中的栈上，也就是前面说到的“虚拟机栈”，数据本身的值就是存储在栈空间里面。<br />![](https://cdn.nlark.com/yuque/0/2019/png/190217/1547482244890-6ecff827-8c8b-4573-8ce3-bcbda5d1c97a.png#align=left&display=inline&height=444&originHeight=444&originWidth=456&size=0&width=456)<br />如上图，在方法内定义的变量直接存储在栈中，如<br />当我们写“int age=50；”，其实是分为两步的：<br />首先JVM创建一个名为age的变量，存于局部变量表中，然后去栈中查找是否存在有字面量值为50的内容，如果有就直接把age指向这个地址，如果没有，JVM会在栈中开辟一块空间来存储“50”这个内容，并且把age指向这个地址。因此我们可以知道：<br />我们声明并初始化基本数据类型的局部变量时，变量名以及字面量值都是存储在栈中，而且是真实的内容。<br />我们再来看“int weight=50；”，按照刚才的思路：字面量为50的内容在栈中已经存在，因此weight是直接指向这个地址的。由此可见：栈中的数据在当前线程下是共享的。<br />那么如果再执行下面的代码呢？<br />当代码中重新给weight变量进行赋值时，JVM会去栈中寻找字面量为40的内容，发现没有，就会开辟一块内存空间存储40这个内容，并且把weight指向这个地址。由此可知：<br />基本数据类型的数据本身是不会改变的，当局部变量重新赋值时，并不是在内存中改变字面量内容，而是重新在栈中寻找已存在的相同的数据，若栈中不存在，则重新开辟内存存新数据，并且把要重新赋值的局部变量的引用指向新数据所在地址。<br />B. 基本数据类型的成员变量<br />成员变量：顾名思义，就是在类体中定义的变量。<br />看下图：<br />![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244869-0b62d4d4-1b29-445b-8f66-7f1a6052dbef.jpeg#align=left&display=inline&height=313&originHeight=453&originWidth=1080&size=0&width=746)<br />我们看per的地址指向的是堆内存中的一块区域，我们来还原一下代码：<br />同样是局部变量的age、name、grade却被存储到了堆中为per对象开辟的一块空间中。因此可知：基本数据类型的成员变量名和值都存储于堆中，其生命周期和对象的是一致的。<br />C. 基本数据类型的静态变量<br />前面提到方法区用来存储一些共享数据，因此基本数据类型的静态变量名以及值存储于方法区的运行时常量池中，静态变量随类加载而加载，随类消失而消失<br />**2. 引用数据类型的存储:**<br />上面提到：堆是用来存储对象本身和数组，而引用（句柄）存放的是实际内容的地址值，因此通过上面的程序运行图，也可以看出，当我们定义一个对象时<br />实际上，它也是有两个过程：<br />在执行Person per;时，JVM先在虚拟机栈中的变量表中开辟一块内存存放per变量，在执行per=new Person()时，JVM会创建一个Person类的实例对象并在堆中开辟一块内存存储这个实例，同时把实例的地址值赋值给per变量。因此可见：<br />对于引用数据类型的对象/数组，变量名存在栈中，变量值存储的是对象的地址，并不是对象的实际内容。<br />**6. 值传递和引用传递**<br />前面已经介绍过形参和实参，也介绍了数据类型以及数据在内存中的存储形式，接下来，就是文章的主题：值传递和引用的传递。\n> 值传递： \n> 在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。\n\n来看个例子：<br />输出结果：<br />从上面的打印结果可以看到：<br /><br />a和w作为实参传入valueCrossTest之后，无论在方法内做了什么操作，最终a和w都没变化。<br />这是什么造型呢？！！<br />下面我们根据上面学到的知识点，进行详细的分析：<br />首先程序运行时，调用mian()方法，此时JVM为main()方法往虚拟机栈中压入一个栈帧，即为当前栈帧，用来存放main()中的局部变量表(包括参数)、操作栈、方法出口等信息，如a和w都是mian()方法中的局部变量，因此可以断定，a和w是躺着mian方法所在的栈帧中<br />如图：<br />![](https://cdn.nlark.com/yuque/0/2019/png/190217/1547482244908-58ef11b9-a204-43c7-9182-4a40f029f944.png#align=left&display=inline&height=558&originHeight=558&originWidth=496&size=0&width=496)<br />而当执行到valueCrossTest()方法时，JVM也为其往虚拟机栈中压入一个栈，即为当前栈帧，用来存放valueCrossTest()中的局部变量等信息，因此age和weight是躺着valueCrossTest方法所在的栈帧中，而他们的值是从a和w的值copy了一份副本而得，如图：<br />![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244851-88dfb7a9-c3b8-47a0-a1e7-c81df21370d8.jpeg#align=left&display=inline&height=522&originHeight=522&originWidth=552&size=0&width=552)<br />因而可以a和age、w和weight对应的内容是不一致的，所以当在方法内重新赋值时，实际流程如图：<br />![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244877-77ce6a20-6290-4709-8c6d-0cfa2512c8c4.jpeg#align=left&display=inline&height=578&originHeight=578&originWidth=514&size=0&width=514)<br />也就是说，age和weight的改动，只是改变了当前栈帧（valueCrossTest方法所在栈帧）里的内容，当方法执行结束之后，这些局部变量都会被销毁，mian方法所在栈帧重新回到栈顶，成为当前栈帧，再次输出a和w时，依然是初始化时的内容。<br />因此：<br />**值传递传递的是真实内容的一个副本，对副本的操作不影响原内容，也就是形参怎么变化，不会影响实参对应的内容。**\n> 引用传递： \n> ”引用”也就是指向真实内容的地址值，在方法调用时，实参的地址通过方法调用被传递给相应的形参，在方法体内，形参和实参指向通愉快内存地址，对形参的操作会影响的真实内容。\n\n举个栗子：<br />先定义一个对象：<br />我们写个函数测试一下：<br />输出结果：<br />可以看出，person经过personCrossTest()方法的执行之后，内容发生了改变，这印证了上面所说的“引用传递”，对形参的操作，改变了实际对象的内容。<br />那么，到这里就结题了吗？<br />不是的，没那么简单，<br />能看得到想要的效果<br />是因为刚好选对了例子而已！！！<br />下面我们对上面的例子稍作修改，加上一行代码，<br />输出结果：<br />为什么这次的输出和上次的不一样了呢？<br /><br />看出什么问题了吗？<br />按照上面讲到JVM内存模型可以知道，对象和数组是存储在Java堆区的，而且堆区是共享的，因此程序执行到main（）方法中的下列代码时<br />JVM会在堆内开辟一块内存，用来存储p对象的所有内容，同时在main（）方法所在线程的栈区中创建一个引用p存储堆区中p对象的真实地址，如图：<br />![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244881-37f97205-a36b-4b80-ad42-48726173f00a.jpeg#align=left&display=inline&height=381&originHeight=550&originWidth=1078&size=0&width=746)<br />当执行到PersonCrossTest()方法时，因为方法内有这么一行代码：<br />JVM需要在堆内另外开辟一块内存来存储new Person()，假如地址为“xo3333”，那此时形参person指向了这个地址，假如真的是引用传递，那么由上面讲到：**引用传递中形参实参指向同一个对象，形参的操作会改变实参对象的改变。**<br />可以推出：实参也应该指向了新创建的person对象的地址，所以在执行PersonCrossTest()结束之后，最终输出的应该是后面创建的对象内容。<br />然而实际上，最终的输出结果却跟我们推测的不一样，最终输出的仍然是一开始创建的对象的内容。<br />由此可见：**引用传递，在Java中并不存在。**<br />但是有人会疑问：为什么第一个例子中，在方法内修改了形参的内容，会导致原始对象的内容发生改变呢？<br />这是因为：**无论是基本类型和是引用类型，在实参传入形参时，都是值传递，也就是说传递的都是一个副本，而不是内容本身。**<br />![](https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244879-fac563a2-c666-43ee-9a2c-f8963adb472a.jpeg#align=left&display=inline&height=323&originHeight=467&originWidth=1080&size=0&width=746)<br />有图可以看出，方法内的形参person和实参p并无实质关联，它只是由p处copy了一份指向对象的地址，此时：<br />**p和person都是指向同一个对象。**<br />因此在第一个例子中，对形参p的操作，会影响到实参对应的对象内容。而在第二个例子中，当执行到new Person()之后，JVM在堆内开辟一块空间存储新对象，并且把person改成指向新对象的地址，此时：<br />**p依旧是指向旧的对象，person指向新对象的地址。**<br />所以此时**对person的操作，实际上是对新对象的操作，于实参p中对应的对象毫无关系。**<br />**结语**<br />因此可见：在Java中所有的参数传递，不管基本类型还是引用类型，都是值传递，或者说是副本传递。<br />只是在传递过程中：<br />**如果是对基本数据类型的数据进行操作，由于原始内容和副本都是存储实际值，并且是在不同的栈区，因此形参的操作，不影响原始内容。**<br />**如果是对引用类型的数据进行操作，分两种情况，一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。**<br />以上为小编关于“值传递和引用传递”问题的思考和论证，对于这个问题，历来都是多有争论，在此希望和读者一起探讨和学习。理性评论，不喜勿喷。\n",
    "body_draft": "",
    "body_html": "<p style=\"text-align: justify;\">学过Java基础的人都知道：值传递和引用传递是初次接触Java时的一个难点，有时候记得了语法却记不得怎么实际运用，有时候会的了运用却解释不出原理，而且坊间讨论的话题又是充满争议：有的论坛帖子说Java只有值传递，有的博客说两者皆有；这让人有点摸不着头脑，下面我们就这个话题做一些探讨，对书籍、对论坛博客的说法，做一次考证，以得出信得过的答案。</p><p style=\"text-align: justify;\">其实，对于值传递和引用传递的语法和运用，百度一下，就能出来可观的解释和例子数目，或许你看一下例子好像就懂，但是当你参加面试，做一道这个知识点的笔试题时感觉自己会，胸有成熟的写了答案，却发现是错的，或者是你根本不会做。</p><p style=\"text-align: justify;\">是什么原因？</p><p style=\"text-align: justify;\">那是因为你对知识点没有了解透彻，只知道其皮毛。要熟读一个语法很简单，要理解一行代码也不难，但是能把学过的知识融会贯通，串联起来理解，那就是非常难了，在此，关于值传递和引用传递，小编会从以前学过的基础知识开始，从内存模型开始，一步步的引出值传递和引用传递的本质原理，故篇幅较长，知识点较多，望读者多有包涵。</p><p style=\"text-align: justify;\"><strong>1. 形参与实参</strong></p><p style=\"text-align: justify;\">我们先来重温一组语法：</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">1、形参：方法被调用时需要传递进来的参数，如：func(int a)中的a，它只有在func被调用期间a才有意义，也就是会被分配内存空间，在方法func执行完成后，a就会被销毁释放空间，也就是不存在了  </p><p style=\"text-align: justify;\">2、实参：方法被调用时是传入的实际值，它在方法被调用前就已经被初始化并且在方法被调用时传入。</p></blockquote><p style=\"text-align: justify;\">举个栗子：</p><p style=\"text-align: justify;\">例子中</p><p style=\"text-align: justify;\">int a=10;中的a在被调用之前就已经创建并初始化，在调用func方法时，他被当做参数传入，所以这个a是实参。</p><p style=\"text-align: justify;\">而func(int a)中的a只有在func被调用时它的生命周期才开始，而在func调用结束之后，它也随之被JVM释放掉，，所以这个a是形参。</p><p style=\"text-align: justify;\"><strong>2. Java的数据类型</strong></p><p style=\"text-align: justify;\">所谓数据类型，是编程语言中对内存的一种抽象表达方式，我们知道程序是由代码文件和静态资源组成，在程序被运行前，这些代码存在在硬盘里，程序开始运行，这些代码会被转成计算机能识别的内容放到内存中被执行。</p><p style=\"text-align: justify;\">因此</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">数据类型实质上是用来定义编程语言中相同类型的数据的存储形式，也就是决定了如何将代表这些值的位存储到计算机的内存中。</p></blockquote><p style=\"text-align: justify;\">所以，数据在内存中的存储，是根据数据类型来划定存储形式和存储位置的。</p><p style=\"text-align: justify;\">那么</p><p style=\"text-align: justify;\">Java的数据类型有哪些？</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">1、基本类型：编程语言中内置的最小粒度的数据类型。它包括四大类八种类型：</p><p style=\"text-align: justify;\">4种整数类型：byte、short、int、long  </p><p style=\"text-align: justify;\">2种浮点数类型：float、double  </p><p style=\"text-align: justify;\">1种字符类型：char  </p><p style=\"text-align: justify;\">1种布尔类型：boolean  </p><p style=\"text-align: justify;\">2、引用类型：引用也叫句柄，引用类型，是编程语言中定义的在句柄中存放着实际内容所在地址的地址值的一种数据形式。它主要包括： </p><p style=\"text-align: justify;\">类  </p><p style=\"text-align: justify;\">接口  </p><p style=\"text-align: justify;\">数组</p></blockquote><p style=\"text-align: justify;\">有了数据类型，JVM对程序数据的管理就规范化了，不同的数据类型，它的存储形式和位置是不一样的，要想知道JVM是怎么存储各种类型的数据，就得先了解JVM的内存划分以及每部分的职能。</p><p style=\"text-align: justify;\"><strong>3.JVM内存的划分及职能</strong></p><p style=\"text-align: justify;\">Java语言本身是不能操作内存的，它的一切都是交给JVM来管理和控制的，因此Java内存区域的划分也就是JVM的区域划分，在说JVM的内存划分之前，我们先来看一下Java程序的执行过程，如下图：</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244858-a12aac5a-acac-4bde-a6a2-48669b307b70.jpeg#align=left&amp;display=inline&amp;height=534&amp;originHeight=712&amp;originWidth=994&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><span>有图可以看出：Java代码被编译器编译成字节码之后，JVM开辟一片内存空间（也叫运行时数据区），通过类加载器加到到运行时数据区来存储程序执行期间需要用到的数据和相关信息，在这个数据区中，它由以下几部分组成：</span></p><p style=\"text-align: justify;\">1. 虚拟机栈</p><p style=\"text-align: justify;\">2. 堆</p><p style=\"text-align: justify;\">3. 程序计数器</p><p style=\"text-align: justify;\">4. 方法区</p><p style=\"text-align: justify;\">5. 本地方法栈</p><p style=\"text-align: justify;\">我们接着来了解一下每部分的原理以及具体用来存储程序执行过程中的哪些数据。</p><p style=\"text-align: justify;\"><strong>1. 虚拟机栈</strong></p><p style=\"text-align: justify;\">虚拟机栈是Java方法执行的内存模型，栈中存放着栈帧，每个栈帧分别对应一个被调用的方法，方法的调用过程对应栈帧在虚拟机中入栈到出栈的过程。</p><p style=\"text-align: justify;\">栈是线程私有的，也就是线程之间的栈是隔离的；当程序中某个线程开始执行一个方法时就会相应的创建一个栈帧并且入栈（位于栈顶），在方法结束后，栈帧出栈。</p><p style=\"text-align: justify;\">下图表示了一个Java栈的模型以及栈帧的组成：</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244851-d3d7369b-7c0a-4c25-aab9-d91d911319e3.jpeg#align=left&amp;display=inline&amp;height=413&amp;originHeight=492&amp;originWidth=888&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><span>栈帧:是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素。</span></p><p style=\"text-align: justify;\">每个栈帧中包括：</p><p style=\"text-align: justify;\"><span>1、局部变量表: 用来存储方法中的局部变量（非静态变量、函数形参）。当变量为基本数据类型时，直接存储值，当变量为引用类型时，存储的是指向具体对象的引用。</span><br /></p><p style=\"text-align: justify;\">2、操作数栈: Java虚拟机的解释执行引擎被称为&quot;基于栈的执行引擎&quot;，其中所指的栈就是指操作数栈。</p><p style=\"text-align: justify;\">3、指向运行时常量池的引用: 存储程序执行时可能用到常量的引用。</p><p style=\"text-align: justify;\">4、方法返回地址: 存储方法执行完成后的返回地址。</p><p style=\"text-align: justify;\"><strong>2. 堆：</strong></p><p style=\"text-align: justify;\">堆是用来存储对象本身和数组的，在JVM中只有一个堆，因此，堆是被所有线程共享的。</p><p style=\"text-align: justify;\"><strong>3. 方法区：</strong></p><p style=\"text-align: justify;\">方法区是一块所有线程共享的内存逻辑区域，在JVM中只有一个方法区，用来存储一些线程可共享的内容，它是线程安全的，多个线程同时访问方法区中同一个内容时，只能有一个线程装载该数据，其它线程只能等待。</p><p style=\"text-align: justify;\">方法区可存储的内容有：类的全路径名、类的直接超类的权全限定名、类的访问修饰符、类的类型（类或接口）、类的直接接口全限定名的有序列表、常量池（字段，方法信息，静态变量，类型引用（class））等。</p><p style=\"text-align: justify;\"><strong>4. 本地方法栈：</strong><br /></p><p style=\"text-align: justify;\">本地方法栈的功能和虚拟机栈是基本一致的，并且也是线程私有的，它们的区别在于虚拟机栈是为执行Java方法服务的，而本地方法栈是为执行本地方法服务的。</p><p style=\"text-align: justify;\"><strong>有人会疑惑：什么是本地方法？为什么Java还要调用本地方法？</strong></p><p style=\"text-align: justify;\"><strong>5. 程序计数器：</strong></p><p style=\"text-align: justify;\">线程私有的。</p><p style=\"text-align: justify;\">记录着当前线程所执行的字节码的行号指示器，在程序运行过程中，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、异常处理、线程恢复等基础功能都需要依赖计数器完成。</p><p style=\"text-align: justify;\"><strong>4. 数据如何在内存中存储？</strong></p><p style=\"text-align: justify;\">从上面程序运行图我们可以看到，JVM在程序运行时的内存分配有三个地方：</p><p style=\"text-align: justify;\">• 堆</p><p style=\"text-align: justify;\">• 栈</p><p style=\"text-align: justify;\">• 静态方法区</p><p style=\"text-align: justify;\">• 常量区</p><p style=\"text-align: justify;\">相应地，每个存储区域都有自己的内存分配策略：</p><p style=\"text-align: justify;\"><span>• 堆式：</span><br /></p><p style=\"text-align: justify;\">• 栈式</p><p style=\"text-align: justify;\">• 静态</p><p style=\"text-align: justify;\">我们已经知道：Java中的数据类型有基本数据类型和引用数据类型，那么这些数据的存储都使用哪一种策略呢？</p><p style=\"text-align: justify;\">这里要分以下的情况进行探究：</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">1. 基本数据类型的存储：</p><p style=\"text-align: justify;\"> A. 基本数据类型的局部变量  </p><p style=\"text-align: justify;\">B. 基本数据类型的成员变量  </p><p style=\"text-align: justify;\">C. 基本数据类型的静态变量  </p><p style=\"text-align: justify;\">2. 引用数据类型的存储</p></blockquote><p style=\"text-align: justify;\"><strong>1. 基本数据类型的存储</strong></p><p style=\"text-align: justify;\">我们分别来研究一下：</p><p style=\"text-align: justify;\">A.基本数据类型的局部变量</p><p style=\"text-align: justify;\">1、定义基本数据类型的局部变量以及数据都是直接存储在内存中的栈上，也就是前面说到的“虚拟机栈”，数据本身的值就是存储在栈空间里面。</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/190217/1547482244890-6ecff827-8c8b-4573-8ce3-bcbda5d1c97a.png#align=left&amp;display=inline&amp;height=444&amp;originHeight=444&amp;originWidth=456&amp;size=0&amp;width=456\" style=\"max-width: 600px; width: 456px;\" /></p><p style=\"text-align: justify;\"><span>如上图，在方法内定义的变量直接存储在栈中，如</span></p><p style=\"text-align: justify;\">当我们写“int age=50；”，其实是分为两步的：</p><p style=\"text-align: justify;\">首先JVM创建一个名为age的变量，存于局部变量表中，然后去栈中查找是否存在有字面量值为50的内容，如果有就直接把age指向这个地址，如果没有，JVM会在栈中开辟一块空间来存储“50”这个内容，并且把age指向这个地址。因此我们可以知道：</p><p style=\"text-align: justify;\">我们声明并初始化基本数据类型的局部变量时，变量名以及字面量值都是存储在栈中，而且是真实的内容。</p><p style=\"text-align: justify;\">我们再来看“int weight=50；”，按照刚才的思路：字面量为50的内容在栈中已经存在，因此weight是直接指向这个地址的。由此可见：栈中的数据在当前线程下是共享的。</p><p style=\"text-align: justify;\">那么如果再执行下面的代码呢？</p><p style=\"text-align: justify;\">当代码中重新给weight变量进行赋值时，JVM会去栈中寻找字面量为40的内容，发现没有，就会开辟一块内存空间存储40这个内容，并且把weight指向这个地址。由此可知：</p><p style=\"text-align: justify;\">基本数据类型的数据本身是不会改变的，当局部变量重新赋值时，并不是在内存中改变字面量内容，而是重新在栈中寻找已存在的相同的数据，若栈中不存在，则重新开辟内存存新数据，并且把要重新赋值的局部变量的引用指向新数据所在地址。</p><p style=\"text-align: justify;\">B. 基本数据类型的成员变量</p><p style=\"text-align: justify;\">成员变量：顾名思义，就是在类体中定义的变量。</p><p style=\"text-align: justify;\">看下图：</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244869-0b62d4d4-1b29-445b-8f66-7f1a6052dbef.jpeg#align=left&amp;display=inline&amp;height=313&amp;originHeight=453&amp;originWidth=1080&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><span>我们看per的地址指向的是堆内存中的一块区域，我们来还原一下代码：</span></p><p style=\"text-align: justify;\">同样是局部变量的age、name、grade却被存储到了堆中为per对象开辟的一块空间中。因此可知：基本数据类型的成员变量名和值都存储于堆中，其生命周期和对象的是一致的。</p><p style=\"text-align: justify;\">C. 基本数据类型的静态变量</p><p style=\"text-align: justify;\">前面提到方法区用来存储一些共享数据，因此基本数据类型的静态变量名以及值存储于方法区的运行时常量池中，静态变量随类加载而加载，随类消失而消失</p><p style=\"text-align: justify;\"><strong>2. 引用数据类型的存储:</strong></p><p style=\"text-align: justify;\">上面提到：堆是用来存储对象本身和数组，而引用（句柄）存放的是实际内容的地址值，因此通过上面的程序运行图，也可以看出，当我们定义一个对象时</p><p style=\"text-align: justify;\">实际上，它也是有两个过程：</p><p style=\"text-align: justify;\">在执行Person per;时，JVM先在虚拟机栈中的变量表中开辟一块内存存放per变量，在执行per=new Person()时，JVM会创建一个Person类的实例对象并在堆中开辟一块内存存储这个实例，同时把实例的地址值赋值给per变量。因此可见：</p><p style=\"text-align: justify;\">对于引用数据类型的对象/数组，变量名存在栈中，变量值存储的是对象的地址，并不是对象的实际内容。</p><p style=\"text-align: justify;\"><strong>6. 值传递和引用传递</strong></p><p style=\"text-align: justify;\">前面已经介绍过形参和实参，也介绍了数据类型以及数据在内存中的存储形式，接下来，就是文章的主题：值传递和引用的传递。</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">值传递： </p><p style=\"text-align: justify;\">在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。</p></blockquote><p style=\"text-align: justify;\">来看个例子：</p><p style=\"text-align: justify;\">输出结果：</p><p style=\"text-align: justify;\"><span>从上面的打印结果可以看到：</span><br /></p><p style=\"text-align: justify;\">a和w作为实参传入valueCrossTest之后，无论在方法内做了什么操作，最终a和w都没变化。</p><p style=\"text-align: justify;\">这是什么造型呢？！！</p><p style=\"text-align: justify;\">下面我们根据上面学到的知识点，进行详细的分析：</p><p style=\"text-align: justify;\">首先程序运行时，调用mian()方法，此时JVM为main()方法往虚拟机栈中压入一个栈帧，即为当前栈帧，用来存放main()中的局部变量表(包括参数)、操作栈、方法出口等信息，如a和w都是mian()方法中的局部变量，因此可以断定，a和w是躺着mian方法所在的栈帧中</p><p style=\"text-align: justify;\">如图：</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/0/2019/png/190217/1547482244908-58ef11b9-a204-43c7-9182-4a40f029f944.png#align=left&amp;display=inline&amp;height=558&amp;originHeight=558&amp;originWidth=496&amp;size=0&amp;width=496\" style=\"max-width: 600px; width: 496px;\" /></p><p style=\"text-align: justify;\"><span>而当执行到valueCrossTest()方法时，JVM也为其往虚拟机栈中压入一个栈，即为当前栈帧，用来存放valueCrossTest()中的局部变量等信息，因此age和weight是躺着valueCrossTest方法所在的栈帧中，而他们的值是从a和w的值copy了一份副本而得，如图：</span></p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244851-88dfb7a9-c3b8-47a0-a1e7-c81df21370d8.jpeg#align=left&amp;display=inline&amp;height=522&amp;originHeight=522&amp;originWidth=552&amp;size=0&amp;width=552\" style=\"max-width: 600px; width: 552px;\" /></p><p style=\"text-align: justify;\"><span>因而可以a和age、w和weight对应的内容是不一致的，所以当在方法内重新赋值时，实际流程如图：</span></p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244877-77ce6a20-6290-4709-8c6d-0cfa2512c8c4.jpeg#align=left&amp;display=inline&amp;height=578&amp;originHeight=578&amp;originWidth=514&amp;size=0&amp;width=514\" style=\"max-width: 600px; width: 514px;\" /></p><p style=\"text-align: justify;\"><span>也就是说，age和weight的改动，只是改变了当前栈帧（valueCrossTest方法所在栈帧）里的内容，当方法执行结束之后，这些局部变量都会被销毁，mian方法所在栈帧重新回到栈顶，成为当前栈帧，再次输出a和w时，依然是初始化时的内容。</span></p><p style=\"text-align: justify;\">因此：</p><p style=\"text-align: justify;\"><strong>值传递传递的是真实内容的一个副本，对副本的操作不影响原内容，也就是形参怎么变化，不会影响实参对应的内容。</strong></p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">引用传递： </p><p style=\"text-align: justify;\">”引用”也就是指向真实内容的地址值，在方法调用时，实参的地址通过方法调用被传递给相应的形参，在方法体内，形参和实参指向通愉快内存地址，对形参的操作会影响的真实内容。</p></blockquote><p style=\"text-align: justify;\">举个栗子：</p><p style=\"text-align: justify;\">先定义一个对象：</p><p style=\"text-align: justify;\">我们写个函数测试一下：</p><p style=\"text-align: justify;\">输出结果：</p><p style=\"text-align: justify;\">可以看出，person经过personCrossTest()方法的执行之后，内容发生了改变，这印证了上面所说的“引用传递”，对形参的操作，改变了实际对象的内容。</p><p style=\"text-align: justify;\">那么，到这里就结题了吗？</p><p style=\"text-align: justify;\">不是的，没那么简单，</p><p style=\"text-align: justify;\">能看得到想要的效果</p><p style=\"text-align: justify;\">是因为刚好选对了例子而已！！！</p><p style=\"text-align: justify;\">下面我们对上面的例子稍作修改，加上一行代码，</p><p style=\"text-align: justify;\">输出结果：</p><p style=\"text-align: justify;\"><span>为什么这次的输出和上次的不一样了呢？</span><br /></p><p style=\"text-align: justify;\">看出什么问题了吗？</p><p style=\"text-align: justify;\">按照上面讲到JVM内存模型可以知道，对象和数组是存储在Java堆区的，而且堆区是共享的，因此程序执行到main（）方法中的下列代码时</p><p style=\"text-align: justify;\">JVM会在堆内开辟一块内存，用来存储p对象的所有内容，同时在main（）方法所在线程的栈区中创建一个引用p存储堆区中p对象的真实地址，如图：</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244881-37f97205-a36b-4b80-ad42-48726173f00a.jpeg#align=left&amp;display=inline&amp;height=381&amp;originHeight=550&amp;originWidth=1078&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><span>当执行到PersonCrossTest()方法时，因为方法内有这么一行代码：</span></p><p style=\"text-align: justify;\">JVM需要在堆内另外开辟一块内存来存储new Person()，假如地址为“xo3333”，那此时形参person指向了这个地址，假如真的是引用传递，那么由上面讲到：<strong>引用传递中形参实参指向同一个对象，形参的操作会改变实参对象的改变。</strong></p><p style=\"text-align: justify;\">可以推出：实参也应该指向了新创建的person对象的地址，所以在执行PersonCrossTest()结束之后，最终输出的应该是后面创建的对象内容。</p><p style=\"text-align: justify;\">然而实际上，最终的输出结果却跟我们推测的不一样，最终输出的仍然是一开始创建的对象的内容。</p><p style=\"text-align: justify;\">由此可见：<strong>引用传递，在Java中并不存在。</strong></p><p style=\"text-align: justify;\">但是有人会疑问：为什么第一个例子中，在方法内修改了形参的内容，会导致原始对象的内容发生改变呢？</p><p style=\"text-align: justify;\">这是因为：<strong>无论是基本类型和是引用类型，在实参传入形参时，都是值传递，也就是说传递的都是一个副本，而不是内容本身。</strong></p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/0/2019/jpeg/190217/1547482244879-fac563a2-c666-43ee-9a2c-f8963adb472a.jpeg#align=left&amp;display=inline&amp;height=323&amp;originHeight=467&amp;originWidth=1080&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><span>有图可以看出，方法内的形参person和实参p并无实质关联，它只是由p处copy了一份指向对象的地址，此时：</span></p><p style=\"text-align: justify;\"><strong>p和person都是指向同一个对象。</strong></p><p style=\"text-align: justify;\">因此在第一个例子中，对形参p的操作，会影响到实参对应的对象内容。而在第二个例子中，当执行到new Person()之后，JVM在堆内开辟一块空间存储新对象，并且把person改成指向新对象的地址，此时：</p><p style=\"text-align: justify;\"><strong>p依旧是指向旧的对象，person指向新对象的地址。</strong></p><p style=\"text-align: justify;\">所以此时<strong>对person的操作，实际上是对新对象的操作，于实参p中对应的对象毫无关系。</strong></p><p style=\"text-align: justify;\"><strong>结语</strong></p><p style=\"text-align: justify;\">因此可见：在Java中所有的参数传递，不管基本类型还是引用类型，都是值传递，或者说是副本传递。</p><p style=\"text-align: justify;\">只是在传递过程中：</p><p style=\"text-align: justify;\"><strong>如果是对基本数据类型的数据进行操作，由于原始内容和副本都是存储实际值，并且是在不同的栈区，因此形参的操作，不影响原始内容。</strong></p><p style=\"text-align: justify;\"><strong>如果是对引用类型的数据进行操作，分两种情况，一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。</strong></p><p style=\"text-align: justify;\">以上为小编关于“值传递和引用传递”问题的思考和论证，对于这个问题，历来都是多有争论，在此希望和读者一起探讨和学习。理性评论，不喜勿喷。</p>",
    "body_lake": "<!doctype lake><p style=\"text-align: justify;\">学过Java基础的人都知道：值传递和引用传递是初次接触Java时的一个难点，有时候记得了语法却记不得怎么实际运用，有时候会的了运用却解释不出原理，而且坊间讨论的话题又是充满争议：有的论坛帖子说Java只有值传递，有的博客说两者皆有；这让人有点摸不着头脑，下面我们就这个话题做一些探讨，对书籍、对论坛博客的说法，做一次考证，以得出信得过的答案。</p><p style=\"text-align: justify;\">其实，对于值传递和引用传递的语法和运用，百度一下，就能出来可观的解释和例子数目，或许你看一下例子好像就懂，但是当你参加面试，做一道这个知识点的笔试题时感觉自己会，胸有成熟的写了答案，却发现是错的，或者是你根本不会做。</p><p style=\"text-align: justify;\">是什么原因？</p><p style=\"text-align: justify;\">那是因为你对知识点没有了解透彻，只知道其皮毛。要熟读一个语法很简单，要理解一行代码也不难，但是能把学过的知识融会贯通，串联起来理解，那就是非常难了，在此，关于值传递和引用传递，小编会从以前学过的基础知识开始，从内存模型开始，一步步的引出值传递和引用传递的本质原理，故篇幅较长，知识点较多，望读者多有包涵。</p><p style=\"text-align: justify;\"><strong>1. 形参与实参</strong></p><p style=\"text-align: justify;\">我们先来重温一组语法：</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">1、形参：方法被调用时需要传递进来的参数，如：func(int a)中的a，它只有在func被调用期间a才有意义，也就是会被分配内存空间，在方法func执行完成后，a就会被销毁释放空间，也就是不存在了  </p><p style=\"text-align: justify;\">2、实参：方法被调用时是传入的实际值，它在方法被调用前就已经被初始化并且在方法被调用时传入。</p></blockquote><p style=\"text-align: justify;\">举个栗子：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">例子中</p><p style=\"text-align: justify;\">int a=10;中的a在被调用之前就已经创建并初始化，在调用func方法时，他被当做参数传入，所以这个a是实参。</p><p style=\"text-align: justify;\">而func(int a)中的a只有在func被调用时它的生命周期才开始，而在func调用结束之后，它也随之被JVM释放掉，，所以这个a是形参。</p><p style=\"text-align: justify;\"><strong>2. Java的数据类型</strong></p><p style=\"text-align: justify;\">所谓数据类型，是编程语言中对内存的一种抽象表达方式，我们知道程序是由代码文件和静态资源组成，在程序被运行前，这些代码存在在硬盘里，程序开始运行，这些代码会被转成计算机能识别的内容放到内存中被执行。</p><p style=\"text-align: justify;\">因此</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">数据类型实质上是用来定义编程语言中相同类型的数据的存储形式，也就是决定了如何将代表这些值的位存储到计算机的内存中。</p></blockquote><p style=\"text-align: justify;\">所以，数据在内存中的存储，是根据数据类型来划定存储形式和存储位置的。</p><p style=\"text-align: justify;\">那么</p><p style=\"text-align: justify;\">Java的数据类型有哪些？</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">1、基本类型：编程语言中内置的最小粒度的数据类型。它包括四大类八种类型：</p><p style=\"text-align: justify;\">4种整数类型：byte、short、int、long  </p><p style=\"text-align: justify;\">2种浮点数类型：float、double  </p><p style=\"text-align: justify;\">1种字符类型：char  </p><p style=\"text-align: justify;\">1种布尔类型：boolean  </p><p style=\"text-align: justify;\">2、引用类型：引用也叫句柄，引用类型，是编程语言中定义的在句柄中存放着实际内容所在地址的地址值的一种数据形式。它主要包括： </p><p style=\"text-align: justify;\">类  </p><p style=\"text-align: justify;\">接口  </p><p style=\"text-align: justify;\">数组</p></blockquote><p style=\"text-align: justify;\">有了数据类型，JVM对程序数据的管理就规范化了，不同的数据类型，它的存储形式和位置是不一样的，要想知道JVM是怎么存储各种类型的数据，就得先了解JVM的内存划分以及每部分的职能。</p><p style=\"text-align: justify;\"><strong>3.JVM内存的划分及职能</strong></p><p style=\"text-align: justify;\">Java语言本身是不能操作内存的，它的一切都是交给JVM来管理和控制的，因此Java内存区域的划分也就是JVM的区域划分，在说JVM的内存划分之前，我们先来看一下Java程序的执行过程，如下图：</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1547482244858-a12aac5a-acac-4bde-a6a2-48669b307b70.jpeg%22%2C%22originWidth%22%3A994%2C%22originHeight%22%3A712%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A534%7D\"></card><cursor /></p><p style=\"text-align: justify;\"><span>有图可以看出：Java代码被编译器编译成字节码之后，JVM开辟一片内存空间（也叫运行时数据区），通过类加载器加到到运行时数据区来存储程序执行期间需要用到的数据和相关信息，在这个数据区中，它由以下几部分组成：</span></p><p style=\"text-align: justify;\">1. 虚拟机栈</p><p style=\"text-align: justify;\">2. 堆</p><p style=\"text-align: justify;\">3. 程序计数器</p><p style=\"text-align: justify;\">4. 方法区</p><p style=\"text-align: justify;\">5. 本地方法栈</p><p style=\"text-align: justify;\">我们接着来了解一下每部分的原理以及具体用来存储程序执行过程中的哪些数据。</p><p style=\"text-align: justify;\"><strong>1. 虚拟机栈</strong></p><p style=\"text-align: justify;\">虚拟机栈是Java方法执行的内存模型，栈中存放着栈帧，每个栈帧分别对应一个被调用的方法，方法的调用过程对应栈帧在虚拟机中入栈到出栈的过程。</p><p style=\"text-align: justify;\">栈是线程私有的，也就是线程之间的栈是隔离的；当程序中某个线程开始执行一个方法时就会相应的创建一个栈帧并且入栈（位于栈顶），在方法结束后，栈帧出栈。</p><p style=\"text-align: justify;\">下图表示了一个Java栈的模型以及栈帧的组成：</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1547482244851-d3d7369b-7c0a-4c25-aab9-d91d911319e3.jpeg%22%2C%22originWidth%22%3A888%2C%22originHeight%22%3A492%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A413%7D\"></card></p><p style=\"text-align: justify;\"><span>栈帧:是用于支持虚拟机进行方法调用和方法执行的数据结构，它是虚拟机运行时数据区中的虚拟机栈的栈元素。</span></p><p style=\"text-align: justify;\">每个栈帧中包括：</p><p style=\"text-align: justify;\"><span>1、局部变量表: 用来存储方法中的局部变量（非静态变量、函数形参）。当变量为基本数据类型时，直接存储值，当变量为引用类型时，存储的是指向具体对象的引用。</span><br /></p><p style=\"text-align: justify;\">2、操作数栈: Java虚拟机的解释执行引擎被称为&quot;基于栈的执行引擎&quot;，其中所指的栈就是指操作数栈。</p><p style=\"text-align: justify;\">3、指向运行时常量池的引用: 存储程序执行时可能用到常量的引用。</p><p style=\"text-align: justify;\">4、方法返回地址: 存储方法执行完成后的返回地址。</p><p style=\"text-align: justify;\"><strong>2. 堆：</strong></p><p style=\"text-align: justify;\">堆是用来存储对象本身和数组的，在JVM中只有一个堆，因此，堆是被所有线程共享的。</p><p style=\"text-align: justify;\"><strong>3. 方法区：</strong></p><p style=\"text-align: justify;\">方法区是一块所有线程共享的内存逻辑区域，在JVM中只有一个方法区，用来存储一些线程可共享的内容，它是线程安全的，多个线程同时访问方法区中同一个内容时，只能有一个线程装载该数据，其它线程只能等待。</p><p style=\"text-align: justify;\">方法区可存储的内容有：类的全路径名、类的直接超类的权全限定名、类的访问修饰符、类的类型（类或接口）、类的直接接口全限定名的有序列表、常量池（字段，方法信息，静态变量，类型引用（class））等。</p><p style=\"text-align: justify;\"><strong>4. 本地方法栈：</strong><br /></p><p style=\"text-align: justify;\">本地方法栈的功能和虚拟机栈是基本一致的，并且也是线程私有的，它们的区别在于虚拟机栈是为执行Java方法服务的，而本地方法栈是为执行本地方法服务的。</p><p style=\"text-align: justify;\"><strong>有人会疑惑：什么是本地方法？为什么Java还要调用本地方法？</strong></p><p style=\"text-align: justify;\"><strong>5. 程序计数器：</strong></p><p style=\"text-align: justify;\">线程私有的。</p><p style=\"text-align: justify;\">记录着当前线程所执行的字节码的行号指示器，在程序运行过程中，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、异常处理、线程恢复等基础功能都需要依赖计数器完成。</p><p style=\"text-align: justify;\"><strong>4. 数据如何在内存中存储？</strong></p><p style=\"text-align: justify;\">从上面程序运行图我们可以看到，JVM在程序运行时的内存分配有三个地方：</p><p style=\"text-align: justify;\">• 堆</p><p style=\"text-align: justify;\">• 栈</p><p style=\"text-align: justify;\">• 静态方法区</p><p style=\"text-align: justify;\">• 常量区</p><p style=\"text-align: justify;\">相应地，每个存储区域都有自己的内存分配策略：</p><p style=\"text-align: justify;\"><span>• 堆式：</span><br /></p><p style=\"text-align: justify;\">• 栈式</p><p style=\"text-align: justify;\">• 静态</p><p style=\"text-align: justify;\">我们已经知道：Java中的数据类型有基本数据类型和引用数据类型，那么这些数据的存储都使用哪一种策略呢？</p><p style=\"text-align: justify;\">这里要分以下的情况进行探究：</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">1. 基本数据类型的存储：</p><p style=\"text-align: justify;\"> A. 基本数据类型的局部变量  </p><p style=\"text-align: justify;\">B. 基本数据类型的成员变量  </p><p style=\"text-align: justify;\">C. 基本数据类型的静态变量  </p><p style=\"text-align: justify;\">2. 引用数据类型的存储</p></blockquote><p style=\"text-align: justify;\"><strong>1. 基本数据类型的存储</strong></p><p style=\"text-align: justify;\">我们分别来研究一下：</p><p style=\"text-align: justify;\">A.基本数据类型的局部变量</p><p style=\"text-align: justify;\">1、定义基本数据类型的局部变量以及数据都是直接存储在内存中的栈上，也就是前面说到的“虚拟机栈”，数据本身的值就是存储在栈空间里面。</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F190217%2F1547482244890-6ecff827-8c8b-4573-8ce3-bcbda5d1c97a.png%22%2C%22originWidth%22%3A456%2C%22originHeight%22%3A444%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A456%2C%22height%22%3A444%7D\"></card></p><p style=\"text-align: justify;\"><span>如上图，在方法内定义的变量直接存储在栈中，如</span></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">当我们写“int age=50；”，其实是分为两步的：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">首先JVM创建一个名为age的变量，存于局部变量表中，然后去栈中查找是否存在有字面量值为50的内容，如果有就直接把age指向这个地址，如果没有，JVM会在栈中开辟一块空间来存储“50”这个内容，并且把age指向这个地址。因此我们可以知道：</p><p style=\"text-align: justify;\">我们声明并初始化基本数据类型的局部变量时，变量名以及字面量值都是存储在栈中，而且是真实的内容。</p><p style=\"text-align: justify;\">我们再来看“int weight=50；”，按照刚才的思路：字面量为50的内容在栈中已经存在，因此weight是直接指向这个地址的。由此可见：栈中的数据在当前线程下是共享的。</p><p style=\"text-align: justify;\">那么如果再执行下面的代码呢？</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">当代码中重新给weight变量进行赋值时，JVM会去栈中寻找字面量为40的内容，发现没有，就会开辟一块内存空间存储40这个内容，并且把weight指向这个地址。由此可知：</p><p style=\"text-align: justify;\">基本数据类型的数据本身是不会改变的，当局部变量重新赋值时，并不是在内存中改变字面量内容，而是重新在栈中寻找已存在的相同的数据，若栈中不存在，则重新开辟内存存新数据，并且把要重新赋值的局部变量的引用指向新数据所在地址。</p><p style=\"text-align: justify;\">B. 基本数据类型的成员变量</p><p style=\"text-align: justify;\">成员变量：顾名思义，就是在类体中定义的变量。</p><p style=\"text-align: justify;\">看下图：</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1547482244869-0b62d4d4-1b29-445b-8f66-7f1a6052dbef.jpeg%22%2C%22originWidth%22%3A1080%2C%22originHeight%22%3A453%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A313%7D\"></card></p><p style=\"text-align: justify;\"><span>我们看per的地址指向的是堆内存中的一块区域，我们来还原一下代码：</span></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">同样是局部变量的age、name、grade却被存储到了堆中为per对象开辟的一块空间中。因此可知：基本数据类型的成员变量名和值都存储于堆中，其生命周期和对象的是一致的。</p><p style=\"text-align: justify;\">C. 基本数据类型的静态变量</p><p style=\"text-align: justify;\">前面提到方法区用来存储一些共享数据，因此基本数据类型的静态变量名以及值存储于方法区的运行时常量池中，静态变量随类加载而加载，随类消失而消失</p><p style=\"text-align: justify;\"><strong>2. 引用数据类型的存储:</strong></p><p style=\"text-align: justify;\">上面提到：堆是用来存储对象本身和数组，而引用（句柄）存放的是实际内容的地址值，因此通过上面的程序运行图，也可以看出，当我们定义一个对象时</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">实际上，它也是有两个过程：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">在执行Person per;时，JVM先在虚拟机栈中的变量表中开辟一块内存存放per变量，在执行per=new Person()时，JVM会创建一个Person类的实例对象并在堆中开辟一块内存存储这个实例，同时把实例的地址值赋值给per变量。因此可见：</p><p style=\"text-align: justify;\">对于引用数据类型的对象/数组，变量名存在栈中，变量值存储的是对象的地址，并不是对象的实际内容。</p><p style=\"text-align: justify;\"><strong>6. 值传递和引用传递</strong></p><p style=\"text-align: justify;\">前面已经介绍过形参和实参，也介绍了数据类型以及数据在内存中的存储形式，接下来，就是文章的主题：值传递和引用的传递。</p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">值传递： </p><p style=\"text-align: justify;\">在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。</p></blockquote><p style=\"text-align: justify;\">来看个例子：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">输出结果：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\"><span>从上面的打印结果可以看到：</span><br /></p><p style=\"text-align: justify;\">a和w作为实参传入valueCrossTest之后，无论在方法内做了什么操作，最终a和w都没变化。</p><p style=\"text-align: justify;\">这是什么造型呢？！！</p><p style=\"text-align: justify;\">下面我们根据上面学到的知识点，进行详细的分析：</p><p style=\"text-align: justify;\">首先程序运行时，调用mian()方法，此时JVM为main()方法往虚拟机栈中压入一个栈帧，即为当前栈帧，用来存放main()中的局部变量表(包括参数)、操作栈、方法出口等信息，如a和w都是mian()方法中的局部变量，因此可以断定，a和w是躺着mian方法所在的栈帧中</p><p style=\"text-align: justify;\">如图：</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fpng%2F190217%2F1547482244908-58ef11b9-a204-43c7-9182-4a40f029f944.png%22%2C%22originWidth%22%3A496%2C%22originHeight%22%3A558%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A496%2C%22height%22%3A558%7D\"></card></p><p style=\"text-align: justify;\"><span>而当执行到valueCrossTest()方法时，JVM也为其往虚拟机栈中压入一个栈，即为当前栈帧，用来存放valueCrossTest()中的局部变量等信息，因此age和weight是躺着valueCrossTest方法所在的栈帧中，而他们的值是从a和w的值copy了一份副本而得，如图：</span></p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1547482244851-88dfb7a9-c3b8-47a0-a1e7-c81df21370d8.jpeg%22%2C%22originWidth%22%3A552%2C%22originHeight%22%3A522%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A552%2C%22height%22%3A522%7D\"></card></p><p style=\"text-align: justify;\"><span>因而可以a和age、w和weight对应的内容是不一致的，所以当在方法内重新赋值时，实际流程如图：</span></p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1547482244877-77ce6a20-6290-4709-8c6d-0cfa2512c8c4.jpeg%22%2C%22originWidth%22%3A514%2C%22originHeight%22%3A578%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A514%2C%22height%22%3A578%7D\"></card></p><p style=\"text-align: justify;\"><span>也就是说，age和weight的改动，只是改变了当前栈帧（valueCrossTest方法所在栈帧）里的内容，当方法执行结束之后，这些局部变量都会被销毁，mian方法所在栈帧重新回到栈顶，成为当前栈帧，再次输出a和w时，依然是初始化时的内容。</span></p><p style=\"text-align: justify;\">因此：</p><p style=\"text-align: justify;\"><strong>值传递传递的是真实内容的一个副本，对副本的操作不影响原内容，也就是形参怎么变化，不会影响实参对应的内容。</strong></p><blockquote style=\"background-color: whitesmoke;\"><p style=\"text-align: justify;\">引用传递： </p><p style=\"text-align: justify;\">”引用”也就是指向真实内容的地址值，在方法调用时，实参的地址通过方法调用被传递给相应的形参，在方法体内，形参和实参指向通愉快内存地址，对形参的操作会影响的真实内容。</p></blockquote><p style=\"text-align: justify;\">举个栗子：</p><p style=\"text-align: justify;\">先定义一个对象：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">我们写个函数测试一下：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">输出结果：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">可以看出，person经过personCrossTest()方法的执行之后，内容发生了改变，这印证了上面所说的“引用传递”，对形参的操作，改变了实际对象的内容。</p><p style=\"text-align: justify;\">那么，到这里就结题了吗？</p><p style=\"text-align: justify;\">不是的，没那么简单，</p><p style=\"text-align: justify;\">能看得到想要的效果</p><p style=\"text-align: justify;\">是因为刚好选对了例子而已！！！</p><p style=\"text-align: justify;\">下面我们对上面的例子稍作修改，加上一行代码，</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">输出结果：</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\"><span>为什么这次的输出和上次的不一样了呢？</span><br /></p><p style=\"text-align: justify;\">看出什么问题了吗？</p><p style=\"text-align: justify;\">按照上面讲到JVM内存模型可以知道，对象和数组是存储在Java堆区的，而且堆区是共享的，因此程序执行到main（）方法中的下列代码时</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">JVM会在堆内开辟一块内存，用来存储p对象的所有内容，同时在main（）方法所在线程的栈区中创建一个引用p存储堆区中p对象的真实地址，如图：</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1547482244881-37f97205-a36b-4b80-ad42-48726173f00a.jpeg%22%2C%22originWidth%22%3A1078%2C%22originHeight%22%3A550%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A381%7D\"></card></p><p style=\"text-align: justify;\"><span>当执行到PersonCrossTest()方法时，因为方法内有这么一行代码：</span></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%22%7D\"></card><p style=\"text-align: justify;\">JVM需要在堆内另外开辟一块内存来存储new Person()，假如地址为“xo3333”，那此时形参person指向了这个地址，假如真的是引用传递，那么由上面讲到：<strong>引用传递中形参实参指向同一个对象，形参的操作会改变实参对象的改变。</strong></p><p style=\"text-align: justify;\">可以推出：实参也应该指向了新创建的person对象的地址，所以在执行PersonCrossTest()结束之后，最终输出的应该是后面创建的对象内容。</p><p style=\"text-align: justify;\">然而实际上，最终的输出结果却跟我们推测的不一样，最终输出的仍然是一开始创建的对象的内容。</p><p style=\"text-align: justify;\">由此可见：<strong>引用传递，在Java中并不存在。</strong></p><p style=\"text-align: justify;\">但是有人会疑问：为什么第一个例子中，在方法内修改了形参的内容，会导致原始对象的内容发生改变呢？</p><p style=\"text-align: justify;\">这是因为：<strong>无论是基本类型和是引用类型，在实参传入形参时，都是值传递，也就是说传递的都是一个副本，而不是内容本身。</strong></p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2019%2Fjpeg%2F190217%2F1547482244879-fac563a2-c666-43ee-9a2c-f8963adb472a.jpeg%22%2C%22originWidth%22%3A1080%2C%22originHeight%22%3A467%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A323%7D\"></card></p><p style=\"text-align: justify;\"><span>有图可以看出，方法内的形参person和实参p并无实质关联，它只是由p处copy了一份指向对象的地址，此时：</span></p><p style=\"text-align: justify;\"><strong>p和person都是指向同一个对象。</strong></p><p style=\"text-align: justify;\">因此在第一个例子中，对形参p的操作，会影响到实参对应的对象内容。而在第二个例子中，当执行到new Person()之后，JVM在堆内开辟一块空间存储新对象，并且把person改成指向新对象的地址，此时：</p><p style=\"text-align: justify;\"><strong>p依旧是指向旧的对象，person指向新对象的地址。</strong></p><p style=\"text-align: justify;\">所以此时<strong>对person的操作，实际上是对新对象的操作，于实参p中对应的对象毫无关系。</strong></p><p style=\"text-align: justify;\"><strong>结语</strong></p><p style=\"text-align: justify;\">因此可见：在Java中所有的参数传递，不管基本类型还是引用类型，都是值传递，或者说是副本传递。</p><p style=\"text-align: justify;\">只是在传递过程中：</p><p style=\"text-align: justify;\"><strong>如果是对基本数据类型的数据进行操作，由于原始内容和副本都是存储实际值，并且是在不同的栈区，因此形参的操作，不影响原始内容。</strong></p><p style=\"text-align: justify;\"><strong>如果是对引用类型的数据进行操作，分两种情况，一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。</strong></p><p style=\"text-align: justify;\">以上为小编关于“值传递和引用传递”问题的思考和论证，对于这个问题，历来都是多有争论，在此希望和读者一起探讨和学习。理性评论，不喜勿喷。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-14T16:12:17.000Z",
    "deleted_at": null,
    "created_at": "2019-01-14T16:10:37.000Z",
    "updated_at": "2019-01-14T16:12:17.000Z",
    "published_at": "2019-01-14T16:12:17.000Z",
    "first_published_at": "2019-01-14T16:12:17.000Z",
    "word_count": 4828,
    "cover": null,
    "description": "学过Java基础的人都知道：值传递和引用传递是初次接触Java时的一个难点，有时候记得了语法却记不得怎么实际运用，有时候会的了运用却解释不出原理，而且坊间讨论的话题又是充满争议：有的论坛帖子说Java只有值传递，有的博客说两者皆有；这让人有点摸不着头脑，下面我们就这个话题做一些探讨，对书籍、对...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1145259,
    "slug": "ckb5pv",
    "title": "Intellij 需配置项",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"1d0ba9b6\"></a>\n## Intellij 快捷键\n<a name=\"d41d8cd9\"></a>\n## ![jetbrains 快捷键.png](https://cdn.nlark.com/yuque/18/2019/png/214234/1547478405006-86781dce-a19c-4089-94a4-18e2067aee34.png#align=left&display=inline&height=407&name=jetbrains%20%E5%BF%AB%E6%8D%B7%E9%94%AE.png&originHeight=1805&originWidth=3308&size=633235&width=746)\nIntellij有八条一定要改的配置呢！我没列快捷键，是因为IDEA原生的快捷键，我用的也挺顺手，所以并不是认为一定要改！<br />•  自动编译开关<br />•  忽略大小写开关<br />•  智能导包开关<br />•  悬浮提示开关<br />•  取消单行显示tabs的操作<br />•  项目文件编码<br />•  滚轴修改字体大小<br />•  设置行号显示\n<a name=\"76fdd93a\"></a>\n## 自动编译开关\n在Eclipse中自动编译开关是开着的，如下所示<br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212506-82aad7fe-3e2a-447d-a5f1-5aa0a844c831.jpeg#align=left&display=inline&height=351&originHeight=351&originWidth=338&size=0&width=338)<br />那么，在IDEA中，务必要手动将其打开，非常重要！如下所示<br /><br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212476-9b55717b-ee5a-4681-b982-a4bfbccbb7f1.jpeg#align=left&display=inline&height=539&originHeight=577&originWidth=798&size=0&width=746)<br />**忽略大小写开关**<br />IDEA默认是匹配大小写，此开关如果未关。你输入字符一定要符合大小写。比如你敲string是不会出现代码提示或智能补充。<br />但是，如果你开了这个开关，你无论输入String或者string都会出现代码提示或者智能补充！<br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212496-b0010e3e-d1c1-427a-9b11-f94024cd922c.jpeg#align=left&display=inline&height=550&originHeight=550&originWidth=700&size=0&width=700)<br />**智能导包开关**<br />如下图所示，将<br />•  自动导入不明确的结构<br />•  智能优化包<br />这两个选项勾上。那么有什么效果呢？<br />你在代码中，只要敲list，就会出现提示，自动导入java.util.List这个类。而这个特性，在eclipse中，是无法做到的。如下图所示<br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212473-0fa385fd-49e6-456b-9df3-2646810c4aae.jpeg#align=left&display=inline&height=446&originHeight=493&originWidth=825&size=0&width=746)<br />**悬浮提示开关**<br />这个容易理解，打开这个开关后。只要把鼠标放在相应的类上，就会出现提示，如下图所示<br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212501-d8f90823-5964-4d27-9312-2884df42bcbf.jpeg#align=left&display=inline&height=382&originHeight=505&originWidth=986&size=0&width=746)<br />**取消单行显示tabs的操作**<br />如下图所示，把该按钮去了<br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212486-d65add22-9202-47f3-a828-f105fb2e6773.jpeg#align=left&display=inline&height=547&originHeight=607&originWidth=828&size=0&width=746)<br />那么去掉后有什么效果呢？<br /><br />打开多个文件的时候，会换行显示，非常直观。大大提升效率！<br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212496-7bfebd85-7463-4f68-a539-c285019b6b1c.jpeg#align=left&display=inline&height=94&originHeight=130&originWidth=1037&size=0&width=746)<br />**项目文件编码**<br />如下图所示进行设置<br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212485-a6ae7361-bd42-45a4-9ced-923209f7f3ed.jpeg#align=left&display=inline&height=404&originHeight=585&originWidth=1080&size=0&width=746)<br />Transparent native-to-ascii conversion的意思是：自动转换ASCII编码。<br />他的工作原理是：在文件中输入文字时他会自动的转换为Unicode编码，然后在idea中发开文件时他会自动转回文字来显示。<br />这样做是为了防止文件乱码。<br />这样你的properties文件，一般都不会出现中文乱码！<br />**滚轴修改字体大小**<br /><br />是这样的，我一般在写代码的时候。都是设按住Ctrl+滚轴可以修改编辑器字体大小，这样其实很方便，大家不妨试试。<br /><br />如下图所示<br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212504-d341e539-9ea5-4b92-b812-6a4747a0c12a.jpeg#align=left&display=inline&height=289&originHeight=419&originWidth=1080&size=0&width=746)<br />**设置行号显示**<br />这个的重要性就不用多说了，勾上后代码中，会显示行数!<br />![](https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212514-62ccc6a5-ac78-4772-a9b5-c32613e64290.jpeg#align=left&display=inline&height=439&originHeight=612&originWidth=1040&size=0&width=746)\n\n",
    "body_draft": "",
    "body_html": "<h2 id=\"1d0ba9b6\">Intellij 快捷键</h2><h2 id=\"d41d8cd9\"><img alt=\"jetbrains 快捷键.png\" title=\"jetbrains 快捷键.png\" src=\"https://cdn.nlark.com/yuque/18/2019/png/214234/1547478405006-86781dce-a19c-4089-94a4-18e2067aee34.png#align=left&amp;display=inline&amp;height=407&amp;name=jetbrains%20%E5%BF%AB%E6%8D%B7%E9%94%AE.png&amp;originHeight=1805&amp;originWidth=3308&amp;size=633235&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></h2><p style=\"text-align: justify;\">Intellij有八条一定要改的配置呢！我没列快捷键，是因为IDEA原生的快捷键，我用的也挺顺手，所以并不是认为一定要改！</p><p style=\"text-align: justify;\">•  自动编译开关</p><p style=\"text-align: justify;\">•  忽略大小写开关</p><p style=\"text-align: justify;\">•  智能导包开关</p><p style=\"text-align: justify;\">•  悬浮提示开关</p><p style=\"text-align: justify;\">•  取消单行显示tabs的操作</p><p style=\"text-align: justify;\">•  项目文件编码</p><p style=\"text-align: justify;\">•  滚轴修改字体大小</p><p style=\"text-align: justify;\">•  设置行号显示</p><h2 id=\"76fdd93a\">自动编译开关</h2><p style=\"text-align: justify;\">在Eclipse中自动编译开关是开着的，如下所示</p><p style=\"text-align: center;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212506-82aad7fe-3e2a-447d-a5f1-5aa0a844c831.jpeg#align=left&amp;display=inline&amp;height=351&amp;originHeight=351&amp;originWidth=338&amp;size=0&amp;width=338\" style=\"max-width: 600px; width: 338px;\" /></p><p style=\"text-align: justify;\"><span>那么，在IDEA中，务必要手动将其打开，非常重要！如下所示</span><br /></p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212476-9b55717b-ee5a-4681-b982-a4bfbccbb7f1.jpeg#align=left&amp;display=inline&amp;height=539&amp;originHeight=577&amp;originWidth=798&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><strong>忽略大小写开关</strong></p><p style=\"text-align: justify;\">IDEA默认是匹配大小写，此开关如果未关。你输入字符一定要符合大小写。比如你敲string是不会出现代码提示或智能补充。</p><p style=\"text-align: justify;\">但是，如果你开了这个开关，你无论输入String或者string都会出现代码提示或者智能补充！</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212496-b0010e3e-d1c1-427a-9b11-f94024cd922c.jpeg#align=left&amp;display=inline&amp;height=550&amp;originHeight=550&amp;originWidth=700&amp;size=0&amp;width=700\" style=\"max-width: 600px; width: 700px;\" /></p><p style=\"text-align: justify;\"><strong>智能导包开关</strong></p><p style=\"text-align: justify;\"><span>如下图所示，将</span></p><p style=\"text-align: justify;\">•  自动导入不明确的结构</p><p style=\"text-align: justify;\">•  智能优化包</p><p style=\"text-align: justify;\">这两个选项勾上。那么有什么效果呢？</p><p style=\"text-align: justify;\">你在代码中，只要敲list，就会出现提示，自动导入java.util.List这个类。而这个特性，在eclipse中，是无法做到的。如下图所示</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212473-0fa385fd-49e6-456b-9df3-2646810c4aae.jpeg#align=left&amp;display=inline&amp;height=446&amp;originHeight=493&amp;originWidth=825&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><strong>悬浮提示开关</strong></p><p style=\"text-align: justify;\">这个容易理解，打开这个开关后。只要把鼠标放在相应的类上，就会出现提示，如下图所示</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212501-d8f90823-5964-4d27-9312-2884df42bcbf.jpeg#align=left&amp;display=inline&amp;height=382&amp;originHeight=505&amp;originWidth=986&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><strong>取消单行显示tabs的操作</strong></p><p style=\"text-align: justify;\">如下图所示，把该按钮去了</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212486-d65add22-9202-47f3-a828-f105fb2e6773.jpeg#align=left&amp;display=inline&amp;height=547&amp;originHeight=607&amp;originWidth=828&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><span>那么去掉后有什么效果呢？</span><br /></p><p style=\"text-align: justify;\">打开多个文件的时候，会换行显示，非常直观。大大提升效率！</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212496-7bfebd85-7463-4f68-a539-c285019b6b1c.jpeg#align=left&amp;display=inline&amp;height=94&amp;originHeight=130&amp;originWidth=1037&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><strong>项目文件编码</strong></p><p style=\"text-align: justify;\">如下图所示进行设置</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212485-a6ae7361-bd42-45a4-9ced-923209f7f3ed.jpeg#align=left&amp;display=inline&amp;height=404&amp;originHeight=585&amp;originWidth=1080&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><span>Transparent native-to-ascii conversion的意思是：自动转换ASCII编码。</span></p><p style=\"text-align: justify;\">他的工作原理是：在文件中输入文字时他会自动的转换为Unicode编码，然后在idea中发开文件时他会自动转回文字来显示。</p><p style=\"text-align: justify;\">这样做是为了防止文件乱码。</p><p style=\"text-align: justify;\">这样你的properties文件，一般都不会出现中文乱码！</p><p style=\"text-align: justify;\"><strong>滚轴修改字体大小</strong><br /></p><p style=\"text-align: justify;\"><span>是这样的，我一般在写代码的时候。都是设按住Ctrl+滚轴可以修改编辑器字体大小，这样其实很方便，大家不妨试试。</span><br /></p><p style=\"text-align: justify;\">如下图所示</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212504-d341e539-9ea5-4b92-b812-6a4747a0c12a.jpeg#align=left&amp;display=inline&amp;height=289&amp;originHeight=419&amp;originWidth=1080&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p style=\"text-align: justify;\"><strong>设置行号显示</strong></p><p style=\"text-align: justify;\">这个的重要性就不用多说了，勾上后代码中，会显示行数!</p><p style=\"text-align: justify;\"><img src=\"https://cdn.nlark.com/yuque/18/2019/jpeg/214234/1547478212514-62ccc6a5-ac78-4772-a9b5-c32613e64290.jpeg#align=left&amp;display=inline&amp;height=439&amp;originHeight=612&amp;originWidth=1040&amp;size=0&amp;width=746\" style=\"max-width: 600px; width: 746px;\" /></p><p><br /></p>",
    "body_lake": "<!doctype lake><h2 id=\"1d0ba9b6\">Inte<cursor />llij 快捷键</h2><h2 id=\"d41d8cd9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fpng%2F214234%2F1547478405006-86781dce-a19c-4089-94a4-18e2067aee34.png%22%2C%22originWidth%22%3A3308%2C%22originHeight%22%3A1805%2C%22name%22%3A%22jetbrains%20%E5%BF%AB%E6%8D%B7%E9%94%AE.png%22%2C%22size%22%3A633235%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A407%7D\"></card></h2><p style=\"text-align: justify;\">Intellij有八条一定要改的配置呢！我没列快捷键，是因为IDEA原生的快捷键，我用的也挺顺手，所以并不是认为一定要改！</p><p style=\"text-align: justify;\">•  自动编译开关</p><p style=\"text-align: justify;\">•  忽略大小写开关</p><p style=\"text-align: justify;\">•  智能导包开关</p><p style=\"text-align: justify;\">•  悬浮提示开关</p><p style=\"text-align: justify;\">•  取消单行显示tabs的操作</p><p style=\"text-align: justify;\">•  项目文件编码</p><p style=\"text-align: justify;\">•  滚轴修改字体大小</p><p style=\"text-align: justify;\">•  设置行号显示</p><h2 id=\"76fdd93a\">自动编译开关</h2><p style=\"text-align: justify;\">在Eclipse中自动编译开关是开着的，如下所示</p><p style=\"text-align: center;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212506-82aad7fe-3e2a-447d-a5f1-5aa0a844c831.jpeg%22%2C%22originWidth%22%3A338%2C%22originHeight%22%3A351%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A338%2C%22height%22%3A351%7D\"></card></p><p style=\"text-align: justify;\"><span>那么，在IDEA中，务必要手动将其打开，非常重要！如下所示</span><br /></p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212476-9b55717b-ee5a-4681-b982-a4bfbccbb7f1.jpeg%22%2C%22originWidth%22%3A798%2C%22originHeight%22%3A577%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A539%7D\"></card></p><p style=\"text-align: justify;\"><strong>忽略大小写开关</strong></p><p style=\"text-align: justify;\">IDEA默认是匹配大小写，此开关如果未关。你输入字符一定要符合大小写。比如你敲string是不会出现代码提示或智能补充。</p><p style=\"text-align: justify;\">但是，如果你开了这个开关，你无论输入String或者string都会出现代码提示或者智能补充！</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212496-b0010e3e-d1c1-427a-9b11-f94024cd922c.jpeg%22%2C%22originWidth%22%3A700%2C%22originHeight%22%3A550%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A700%2C%22height%22%3A550%7D\"></card></p><p style=\"text-align: justify;\"><strong>智能导包开关</strong></p><p style=\"text-align: justify;\"><span>如下图所示，将</span></p><p style=\"text-align: justify;\">•  自动导入不明确的结构</p><p style=\"text-align: justify;\">•  智能优化包</p><p style=\"text-align: justify;\">这两个选项勾上。那么有什么效果呢？</p><p style=\"text-align: justify;\">你在代码中，只要敲list，就会出现提示，自动导入java.util.List这个类。而这个特性，在eclipse中，是无法做到的。如下图所示</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212473-0fa385fd-49e6-456b-9df3-2646810c4aae.jpeg%22%2C%22originWidth%22%3A825%2C%22originHeight%22%3A493%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A446%7D\"></card></p><p style=\"text-align: justify;\"><strong>悬浮提示开关</strong></p><p style=\"text-align: justify;\">这个容易理解，打开这个开关后。只要把鼠标放在相应的类上，就会出现提示，如下图所示</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212501-d8f90823-5964-4d27-9312-2884df42bcbf.jpeg%22%2C%22originWidth%22%3A986%2C%22originHeight%22%3A505%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A382%7D\"></card></p><p style=\"text-align: justify;\"><strong>取消单行显示tabs的操作</strong></p><p style=\"text-align: justify;\">如下图所示，把该按钮去了</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212486-d65add22-9202-47f3-a828-f105fb2e6773.jpeg%22%2C%22originWidth%22%3A828%2C%22originHeight%22%3A607%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A547%7D\"></card></p><p style=\"text-align: justify;\"><span>那么去掉后有什么效果呢？</span><br /></p><p style=\"text-align: justify;\">打开多个文件的时候，会换行显示，非常直观。大大提升效率！</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212496-7bfebd85-7463-4f68-a539-c285019b6b1c.jpeg%22%2C%22originWidth%22%3A1037%2C%22originHeight%22%3A130%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A94%7D\"></card></p><p style=\"text-align: justify;\"><strong>项目文件编码</strong></p><p style=\"text-align: justify;\">如下图所示进行设置</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212485-a6ae7361-bd42-45a4-9ced-923209f7f3ed.jpeg%22%2C%22originWidth%22%3A1080%2C%22originHeight%22%3A585%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A404%7D\"></card></p><p style=\"text-align: justify;\"><span>Transparent native-to-ascii conversion的意思是：自动转换ASCII编码。</span></p><p style=\"text-align: justify;\">他的工作原理是：在文件中输入文字时他会自动的转换为Unicode编码，然后在idea中发开文件时他会自动转回文字来显示。</p><p style=\"text-align: justify;\">这样做是为了防止文件乱码。</p><p style=\"text-align: justify;\">这样你的properties文件，一般都不会出现中文乱码！</p><p style=\"text-align: justify;\"><strong>滚轴修改字体大小</strong><br /></p><p style=\"text-align: justify;\"><span>是这样的，我一般在写代码的时候。都是设按住Ctrl+滚轴可以修改编辑器字体大小，这样其实很方便，大家不妨试试。</span><br /></p><p style=\"text-align: justify;\">如下图所示</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212504-d341e539-9ea5-4b92-b812-6a4747a0c12a.jpeg%22%2C%22originWidth%22%3A1080%2C%22originHeight%22%3A419%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A289%7D\"></card></p><p style=\"text-align: justify;\"><strong>设置行号显示</strong></p><p style=\"text-align: justify;\">这个的重要性就不用多说了，勾上后代码中，会显示行数!</p><p style=\"text-align: justify;\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F18%2F2019%2Fjpeg%2F214234%2F1547478212514-62ccc6a5-ac78-4772-a9b5-c32613e64290.jpeg%22%2C%22originWidth%22%3A1040%2C%22originHeight%22%3A612%2C%22size%22%3A0%2C%22display%22%3A%22inline%22%2C%22align%22%3A%22left%22%2C%22linkTarget%22%3A%22_blank%22%2C%22width%22%3A746%2C%22height%22%3A439%7D\"></card></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-14T15:08:59.000Z",
    "deleted_at": null,
    "created_at": "2019-01-14T15:08:20.000Z",
    "updated_at": "2019-01-14T15:08:59.000Z",
    "published_at": "2019-01-14T15:08:59.000Z",
    "first_published_at": "2019-01-14T15:08:59.000Z",
    "word_count": 620,
    "cover": null,
    "description": "Intellij 快捷键Intellij有八条一定要改的配置呢！我没列快捷键，是因为IDEA原生的快捷键，我用的也挺顺手，所以并不是认为一定要改！•  自动编译开关•  忽略大小写开关•  智能导包开关•  悬浮提示开关•  取消单行显示tabs的操作•  项目文件编码•  滚轴修改字体大小•...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1139655,
    "slug": "sbn17a",
    "title": "docker 目录挂载踩坑记录",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "最近在弄容器化数据库，一开始自己的技术选择方案是用docker-compose 但是发现采用这个需要自己编写好docker-compose 里面的my.conf 需要外挂所以自己没有选择这样做，而是选择docker 原生创建，自己把数据层外挂，配置层也想外挂，后来发现配置层外挂会导致mysql找不到配置，从而导致容器无法启动。自己一直在排查这个问题原因。一开始以为是权限问题导致的，因为数据外挂并没有实现，后来给目录加权限，增加权限后还是不可以。随后切换到root账户去增加权限，也是不可以的。后来没办法了找了一个网上数据库的搭建的命令对比后发现问题在配置文件外挂的问题。\n",
    "body_draft": "",
    "body_html": "<p>最近在弄容器化数据库，一开始自己的技术选择方案是用docker-compose 但是发现采用这个需要自己编写好docker-compose 里面的my.conf 需要外挂所以自己没有选择这样做，而是选择docker 原生创建，自己把数据层外挂，配置层也想外挂，后来发现配置层外挂会导致mysql找不到配置，从而导致容器无法启动。自己一直在排查这个问题原因。一开始以为是权限问题导致的，因为数据外挂并没有实现，后来给目录加权限，增加权限后还是不可以。随后切换到root账户去增加权限，也是不可以的。后来没办法了找了一个网上数据库的搭建的命令对比后发现问题在配置文件外挂的问题。</p>",
    "body_lake": "<!doctype lake><p>最近在弄容器化数据库，一开始自己的技术选择方案是用docker-compose 但是发现采用这个需要自己编写好docker-compose 里面的my.conf 需要外挂所以自己没有选择这样做，而是选择docker 原生创建，自己把数据层外挂，配置层也想外挂，后来发现配置层外挂会导致mysql找不到配置，从而导致容器无法启动。自己一直在排查这个问题原因。一开始以为是权限问题导致的，因为数据外挂并没有实现，后来给目录加权限，增加权限后还是不可以。随后切换到root账户去增加权限，也是不可以的。后来没办法了找了一个网上数据库的搭建的命令对比后发现问题在配置文件外挂的问题。<cursor /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-12T14:05:46.000Z",
    "deleted_at": null,
    "created_at": "2019-01-12T13:57:41.000Z",
    "updated_at": "2019-01-12T14:05:46.000Z",
    "published_at": "2019-01-12T14:05:46.000Z",
    "first_published_at": "2019-01-12T14:05:46.000Z",
    "word_count": 227,
    "cover": null,
    "description": "最近在弄容器化数据库，一开始自己的技术选择方案是用docker-compose 但是发现采用这个需要自己编写好docker-compose 里面的my.conf 需要外挂所以自己没有选择这样做，而是选择docker 原生创建，自己把数据层外挂，配置层也想外挂，后来发现配置层外挂会导致mysql...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1126140,
    "slug": "zv2fgz",
    "title": "小网站计划",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "小计2019.1.1<br />这个想法从2018年九月份就开始有了，一直没有付出实施，真的真的快毕业了（其实是为了给这四年大学生活添加点乐趣），自己做一个小网站。也是为了巩固自己所学的知识，目前自己购买了一台腾讯云的服务器1U1G1M的配置，买的腾讯域名一口气买了3年的<br />2018年11月某天，依托自己的服务本地主机群晖，以及自己的域名，搭建了邮件系统。<br />2018年12月某天，依托本地主机，搭建了maridb,以及两台rdeis服务器（尚未进行鉴权，主从操作）<br />2018年12.27进行备案<br />2019.1.5增加一台阿里云，1U2G1M<br />2019.1.8备案下来了。<br />目前强制所有请求地址为HTTPS，为了防止中间人获取2019.1.9将自己的简历通过反向代理的方式将数据转发到云端，发现一个严重的问题，自己的贷款太小了。（目前主要业务还没有，先不考虑进行cdn加速操作）\n",
    "body_draft": "",
    "body_html": "<p>小计2019.1.1</p><p>这个想法从2018年九月份就开始有了，一直没有付出实施，真的真的快毕业了（其实是为了给这四年大学生活添加点乐趣），自己做一个小网站。也是为了巩固自己所学的知识，目前自己购买了一台腾讯云的服务器1U1G1M的配置，买的腾讯域名一口气买了3年的</p><p>2018年11月某天，依托自己的服务本地主机群晖，以及自己的域名，搭建了邮件系统。</p><p>2018年12月某天，依托本地主机，搭建了maridb,以及两台rdeis服务器（尚未进行鉴权，主从操作）</p><p>2018年12.27进行备案</p><p>2019.1.5增加一台阿里云，1U2G1M</p><p>2019.1.8备案下来了。</p><p style=\"text-indent: 2em; padding-left: 2em;\">目前强制所有请求地址为HTTPS，为了防止中间人获取<span>2019.1.9将自己的简历通过反向代理的方式将数据转发到云端，发现一个严重的问题，自己的贷款太小了。（目前主要业务还没有，先不考虑进行cdn加速操作）</span></p>",
    "body_lake": "<!doctype lake><p>小计2019.1.1</p><p>这个想法从2018年九月份就开始有了，一直没有付出实施，真的真的快毕业了（其实是为了给这四年大学生活添加点乐趣），自己做一个小网站。也是为了巩固自己所学的知识，目前自己购买了一台腾讯云的服务器1U1G1M的配置，买的腾讯域名一口气买了3年的</p><p>2018年11月某天，依托自己的服务本地主机群晖，以及自己的域名，搭建了邮件系统。</p><p>2018年12月某天，依托本地主机，搭建了maridb,以及两台rdeis服务器（尚未进行鉴权，主从操作）</p><p>2018年12.27进行备案</p><p>2019.1.5增加一台阿里云，1U2G1M</p><p>2019.1.8备案下来了。</p><p style=\"text-indent: 2em; padding-left: 2em;\">目前强制所有请求地址为HTTPS，为了防止中间人获取<span>2019.1.9将自己的简历通过反向代理的方式将数据转发到云端，发现一个严重的问题，自己的贷款太小了。（目前主要业务还没有，先不考虑进行cdn加速操作）<cursor /></span></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2019-01-08T19:36:12.000Z",
    "deleted_at": null,
    "created_at": "2019-01-08T19:20:56.000Z",
    "updated_at": "2019-01-08T19:36:12.000Z",
    "published_at": "2019-01-08T19:36:12.000Z",
    "first_published_at": "2019-01-08T19:36:12.000Z",
    "word_count": 287,
    "cover": null,
    "description": "小计2019.1.1这个想法从2018年九月份就开始有了，一直没有付出实施，真的真的快毕业了（其实是为了给这四年大学生活添加点乐趣），自己做一个小网站。也是为了巩固自己所学的知识，目前自己购买了一台腾讯云的服务器1U1G1M的配置，买的腾讯域名一口气买了3年的2018年11月某天，依托自己的服...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1074999,
    "slug": "qgscsd",
    "title": "《代码整洁之道》读后感",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"whager\"></a>\n### [](#whager)代码整洁之道是一本讲究代码规范带给我们的好处，书中讲了许多的代码滥用的坏处。代码如果不规范会带来许多不如何如何多的后果。这是码农工作中的痛点与难点，因为不规范所带来的很多麻烦。这也就是阿里巴巴集团技术团队这两年云栖大会的推出代码公约的原因和码出高效的原因。\n<a name=\"mwc7st\"></a>\n### [](#mwc7st)代码整洁之道前14章算是对代码规范进行了规范进行了定义，条条框框弄了好多小例子。但都是将一个解释编写很多数学变量（如P1，T1），读起来真心不方便是真。整洁之道后面用许多工程的例子来深刻的解释代码规范里的条条框框，让自己去理解代码规范的意义。虽然读完这本书对自己的编程能力提高不多。但是它对自己的编程树立良好的标准还是很有帮助的。我觉得这本书和阿里巴巴代码规范和码出高效，子妹篇结合起来看会更好的帮助自己去提高，因为它里面解释了为什末要规范，规范规范的到底是什么。\n<a name=\"twphsf\"></a>\n### [](#twphsf)例如：代码整洁，整洁的是什么。 \n```\n1.尽量减少依赖关系，便于项目管理与维护。\n2.简单直接，将大段if控制语句改写成短小的函数，让代码可读性增加。\n3.要有单元测试（这个spring的不太会写），下周好好琢磨一下。\n4.降低重复代码，提取公共方法和公共类。\n5.有意义的命名（这很重要）\n6.不要吝啬注视\n7.代码的长度尽量的短（20行以内）\n8.连缀少用\n9.null值回传小心。\n10.map方法不宜回传\n11.减少方法数量\n12.理论上将try/catch少用。\n13.方法传参数应该尽量短少\n```\n\n",
    "body_draft": "### <a name=\"whager\"></a>代码整洁之道是一本讲究代码规范带给我们的好处，书中讲了许多的代码滥用的坏处。代码如果不规范会带来许多不如何如何多的后果。这是码农工作中的痛点与难点，因为不规范所带来的很多麻烦。这也就是<span data-type=\"color\" style=\"color:rgb(68, 68, 68)\"><span data-type=\"background\" style=\"background-color:rgb(245, 245, 245)\">阿里巴巴集团技术团队这两年云栖大会的推出代码公约的原因和码出高效的原因。</span></span>\n### <a name=\"mwc7st\"></a>代码整洁之道前14章算是对代码规范进行了规范进行了定义，条条框框弄了好多小例子。但都是将一个解释编写很多数学变量（如P1，T1），读起来真心不方便是真。整洁之道后面用许多工程的例子来深刻的解释代码规范里的条条框框，让自己去理解代码规范的意义。虽然读完这本书对自己的编程能力提高不多。但是它对自己的编程树立良好的标准还是很有帮助的。我觉得这本书和阿里巴巴代码规范和码出高效，子妹篇结合起来看会更好的帮助自己去提高，因为它里面解释了为什末要规范，规范规范的到底是什么。\n### <a name=\"twphsf\"></a>例如：代码整洁，整洁的是什么。 \n```plain\n1.尽量减少依赖关系，便于项目管理与维护。\n2.简单直接，将大段if控制语句改写成短小的函数，让代码可读性增加。\n3.要有单元测试（这个spring的不太会写），下周好好琢磨一下。\n4.降低重复代码，提取公共方法和公共类。\n5.有意义的命名（这很重要）\n6.不要吝啬注视\n7.代码的长度尽量的短（20行以内）\n8.连缀少用\n9.null值回传小心。\n10.map方法不宜回传\n11.减少方法数量\n12.理论上将try/catch少用。\n13.方法传参数应该尽量短少\n```\n\n",
    "body_html": "<h3 id=\"whager\"><a href=\"#whager\"></a>代码整洁之道是一本讲究代码规范带给我们的好处，书中讲了许多的代码滥用的坏处。代码如果不规范会带来许多不如何如何多的后果。这是码农工作中的痛点与难点，因为不规范所带来的很多麻烦。这也就是<span style=\"color: #444444;\"><span style=\"background-color: #F5F5F5;\">阿里巴巴集团技术团队这两年云栖大会的推出代码公约的原因和码出高效的原因。</span></span></h3><h3 id=\"mwc7st\"><a href=\"#mwc7st\"></a>代码整洁之道前14章算是对代码规范进行了规范进行了定义，条条框框弄了好多小例子。但都是将一个解释编写很多数学变量（如P1，T1），读起来真心不方便是真。整洁之道后面用许多工程的例子来深刻的解释代码规范里的条条框框，让自己去理解代码规范的意义。虽然读完这本书对自己的编程能力提高不多。但是它对自己的编程树立良好的标准还是很有帮助的。我觉得这本书和阿里巴巴代码规范和码出高效，子妹篇结合起来看会更好的帮助自己去提高，因为它里面解释了为什末要规范，规范规范的到底是什么。</h3><h3 id=\"twphsf\"><a href=\"#twphsf\"></a>例如：代码整洁，整洁的是什么。 </h3><pre><code>1.尽量减少依赖关系，便于项目管理与维护。\n2.简单直接，将大段if控制语句改写成短小的函数，让代码可读性增加。\n3.要有单元测试（这个spring的不太会写），下周好好琢磨一下。\n4.降低重复代码，提取公共方法和公共类。\n5.有意义的命名（这很重要）\n6.不要吝啬注视\n7.代码的长度尽量的短（20行以内）\n8.连缀少用\n9.null值回传小心。\n10.map方法不宜回传\n11.减少方法数量\n12.理论上将try/catch少用。\n13.方法传参数应该尽量短少</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><h3 id=\"whager\"><a href=\"#whager\" id=\"span,[object-object],代码整洁之道是一本讲究代码规范带给我们的好处，书中讲了许多的代码滥用的坏处。代码如果不规范会带来许多不如何如何多的后果。这是码农工作中的痛点与难点，因为不规范所带来的很多麻烦。这也就是,span,[object-object],span,[object-object],阿里巴巴集团技术团队这两年云栖大会的推出代码公约的原因和码出高效的原因。\"></a>代码整洁之道是一本讲究代码规范带给我们的好处，书中讲了许多的代码滥用的坏处。代码如果不规范会带来许多不如何如何多的后果。这是码农工作中的痛点与难点，因为不规范所带来的很多麻烦。这也就是<span style=\"color:rgb(68, 68, 68)\"><span style=\"background-color:rgb(245, 245, 245)\">阿里巴巴集团技术团队这两年云栖大会的推出代码公约的原因和码出高效的原因。</span></span></h3><h3 id=\"mwc7st\"><a href=\"#mwc7st\" id=\"代码整洁之道前14章算是对代码规范进行了规范进行了定义，条条框框弄了好多小例子。但都是将一个解释编写很多数学变量（如p1，t1），读起来真心不方便是真。整洁之道后面用许多工程的例子来深刻的解释代码规范里的条条框框，让自己去理解代码规范的意义。虽然读完这本书对自己的编程能力提高不多。但是它对自己的编程树立良好的标准还是很有帮助的。我觉得这本书和阿里巴巴代码规范和码出高效，子妹篇结合起来看会更好的帮助自己去提高，因为它里面解释了为什末要规范，规范规范的到底是什么。\"></a>代码整洁之道前14章算是对代码规范进行了规范进行了定义，条条框框弄了好多小例子。但都是将一个解释编写很多数学变量（如P1，T1），读起来真心不方便是真。整洁之道后面用许多工程的例子来深刻的解释代码规范里的条条框框，让自己去理解代码规范的意义。虽然读完这本书对自己的编程能力提高不多。但是它对自己的编程树立良好的标准还是很有帮助的。我觉得这本书和阿里巴巴代码规范和码出高效，子妹篇结合起来看会更好的帮助自己去提高，因为它里面解释了为什末要规范，规范规范的到底是什么。</h3><h3 id=\"twphsf\"><a href=\"#twphsf\" id=\"例如：代码整洁，整洁的是什么。-\"></a>例如：代码整洁，整洁的是什么。 </h3><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b42a55ca%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%221.%E5%B0%BD%E9%87%8F%E5%87%8F%E5%B0%91%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%EF%BC%8C%E4%BE%BF%E4%BA%8E%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4%E3%80%82%5Cn2.%E7%AE%80%E5%8D%95%E7%9B%B4%E6%8E%A5%EF%BC%8C%E5%B0%86%E5%A4%A7%E6%AE%B5if%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5%E6%94%B9%E5%86%99%E6%88%90%E7%9F%AD%E5%B0%8F%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E8%AE%A9%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7%E5%A2%9E%E5%8A%A0%E3%80%82%5Cn3.%E8%A6%81%E6%9C%89%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%88%E8%BF%99%E4%B8%AAspring%E7%9A%84%E4%B8%8D%E5%A4%AA%E4%BC%9A%E5%86%99%EF%BC%89%EF%BC%8C%E4%B8%8B%E5%91%A8%E5%A5%BD%E5%A5%BD%E7%90%A2%E7%A3%A8%E4%B8%80%E4%B8%8B%E3%80%82%5Cn4.%E9%99%8D%E4%BD%8E%E9%87%8D%E5%A4%8D%E4%BB%A3%E7%A0%81%EF%BC%8C%E6%8F%90%E5%8F%96%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%E5%92%8C%E5%85%AC%E5%85%B1%E7%B1%BB%E3%80%82%5Cn5.%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E5%91%BD%E5%90%8D%EF%BC%88%E8%BF%99%E5%BE%88%E9%87%8D%E8%A6%81%EF%BC%89%5Cn6.%E4%B8%8D%E8%A6%81%E5%90%9D%E5%95%AC%E6%B3%A8%E8%A7%86%5Cn7.%E4%BB%A3%E7%A0%81%E7%9A%84%E9%95%BF%E5%BA%A6%E5%B0%BD%E9%87%8F%E7%9A%84%E7%9F%AD%EF%BC%8820%E8%A1%8C%E4%BB%A5%E5%86%85%EF%BC%89%5Cn8.%E8%BF%9E%E7%BC%80%E5%B0%91%E7%94%A8%5Cn9.null%E5%80%BC%E5%9B%9E%E4%BC%A0%E5%B0%8F%E5%BF%83%E3%80%82%5Cn10.map%E6%96%B9%E6%B3%95%E4%B8%8D%E5%AE%9C%E5%9B%9E%E4%BC%A0%5Cn11.%E5%87%8F%E5%B0%91%E6%96%B9%E6%B3%95%E6%95%B0%E9%87%8F%5Cn12.%E7%90%86%E8%AE%BA%E4%B8%8A%E5%B0%86try%2Fcatch%E5%B0%91%E7%94%A8%E3%80%82%5Cn13.%E6%96%B9%E6%B3%95%E4%BC%A0%E5%8F%82%E6%95%B0%E5%BA%94%E8%AF%A5%E5%B0%BD%E9%87%8F%E7%9F%AD%E5%B0%91%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-12-21T13:10:51.000Z",
    "deleted_at": null,
    "created_at": "2018-12-21T12:32:23.000Z",
    "updated_at": "2018-12-21T13:10:51.000Z",
    "published_at": "2018-12-21T13:10:51.000Z",
    "first_published_at": "2018-12-21T13:10:51.000Z",
    "word_count": 515,
    "cover": null,
    "description": "代码整洁之道是一本讲究代码规范带给我们的好处，书中讲了许多的代码滥用的坏处。代码如果不规范会带来许多不如何如何多的后果。这是码农工作中的痛点与难点，因为不规范所带来的很多麻烦。这也就是阿里巴巴集团技术团队这两年云栖大会的推出代码公约的原因和码出高效的原因。代码整洁之道前14章算是对代码规范进行...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1054883,
    "slug": "cwa4ol",
    "title": "你好2019，再见2018",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "![](https://cdn.nlark.com/yuque/0/2018/png/190217/1546259203220-3f77596b-cba1-41f5-858c-aa79b74147d1.png#width=809)\n<a name=\"aykyzo\"></a>\n# [](#aykyzo)回顾\n时间过的真快，短短4年的大学生活基本上接近尾声了。回顾这一年，自己的迷茫，这一年自己感受很多。2018年的世界杯，冷门法国夺冠。中国女排夺冠，电子竞技进入亚运会，P2P暴雷，凉了比特币但活了背后的区块链。人工智能被应用到各行各业，自己对人工智能也有了一些自己的理解。\n<a name=\"mxr8wg\"></a>\n# [](#mxr8wg)想法\n不积跬步无以至千里，自己思维有许多幼稚的想法，感谢这一年很多人的包容与理解，是你们让我成长。2018年自己去实践的自己的知识，我承认自己的进步很慢。自己很懒散，浪费时间的事情自己做了不少。18年，自己实践的东西太少了。自己的思维太过于分散了，专注度欠缺。自己相对同龄人自己不足的地方，勤奋，时间的把控，以及自己对机会的把控能力。\n<a name=\"rqgdsv\"></a>\n# [](#rqgdsv)展望\n19年自己该踏实的做事，改掉自己懒散的毛病，规划自己的时间。2019年，自己多做一些帮助家里的事情。不能满足现在的生活。让自己的颗粒度编的更加小，让自己成为一颗完美的螺丝钉。立个flag，19年自己要读20本以上的书，用知识武装自己。多拿出一点时间来学习，拥抱变化，19年每周至少来写一篇自己的成长。\n<a name=\"72vzcm\"></a>\n# [](#72vzcm)最后\n故事还长，写的不好，条理性欠缺，不过没关系，2019加油！😄\n\n",
    "body_draft": "<div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n  <div data-type=\"p\">\n    <div id=\"y9thpo\" data-type=\"image\" data-display=\"block\" data-align=\"left\" data-src=\"https://cdn.nlark.com/yuque/0/2018/png/190217/1546259203220-3f77596b-cba1-41f5-858c-aa79b74147d1.png\" data-width=\"809\">\n      <img src=\"https://cdn.nlark.com/yuque/0/2018/png/190217/1546259203220-3f77596b-cba1-41f5-858c-aa79b74147d1.png\" width=\"809\" />\n    </div>\n  </div>\n</div>\n\n# <a name=\"aykyzo\"></a>回顾\n时间过的真快，短短4年的大学生活基本上接近尾声了。回顾这一年，自己的迷茫，这一年自己感受很多。2018年的世界杯，冷门法国夺冠。中国女排夺冠，电子竞技进入亚运会，P2P暴雷，凉了比特币但活了背后的区块链。人工智能被应用到各行各业，自己对人工智能也有了一些自己的理解。\n# <a name=\"mxr8wg\"></a>想法\n不积跬步无以至千里，自己思维有许多幼稚的想法，感谢这一年很多人的包容与理解，是你们让我成长。2018年自己去实践的自己的知识，我承认自己的进步很慢。自己很懒散，浪费时间的事情自己做了不少。18年，自己实践的东西太少了。自己的思维太过于分散了，专注度欠缺。自己相对同龄人自己不足的地方，勤奋，时间的把控，以及自己对机会的把控能力。\n# <a name=\"rqgdsv\"></a>展望\n19年自己该踏实的做事，改掉自己懒散的毛病，规划自己的时间。2019年，自己多做一些帮助家里的事情。不能满足现在的生活。让自己的颗粒度编的更加小，让自己成为一颗完美的螺丝钉。立个flag，19年自己要读20本以上的书，用知识武装自己。多拿出一点时间来学习，拥抱变化，19年每周至少来写一篇自己的成长。\n# <a name=\"72vzcm\"></a>最后\n故事还长，写的不好，条理性欠缺，不过没关系，2019加油！😄\n\n",
    "body_html": "<p style=\"text-align: center;\"><img src=\"https://cdn.nlark.com/yuque/0/2018/png/190217/1546259203220-3f77596b-cba1-41f5-858c-aa79b74147d1.png#width=809\" style=\"max-width: 600px; width: 809px;\" /></p><h1 id=\"aykyzo\"><a href=\"#aykyzo\"></a>回顾</h1><p style=\"padding-left: 2em;\">时间过的真快，短短4年的大学生活基本上接近尾声了。回顾这一年，自己的迷茫，这一年自己感受很多。2018年的世界杯，冷门法国夺冠。中国女排夺冠，电子竞技进入亚运会，P2P暴雷，凉了比特币但活了背后的区块链。人工智能被应用到各行各业，自己对人工智能也有了一些自己的理解。</p><h1 id=\"mxr8wg\"><a href=\"#mxr8wg\"></a>想法</h1><p style=\"padding-left: 2em;\">不积跬步无以至千里，自己思维有许多幼稚的想法，感谢这一年很多人的包容与理解，是你们让我成长。2018年自己去实践的自己的知识，我承认自己的进步很慢。自己很懒散，浪费时间的事情自己做了不少。18年，自己实践的东西太少了。自己的思维太过于分散了，专注度欠缺。自己相对同龄人自己不足的地方，勤奋，时间的把控，以及自己对机会的把控能力。</p><h1 id=\"rqgdsv\"><a href=\"#rqgdsv\"></a>展望</h1><p style=\"padding-left: 2em;\">19年自己该踏实的做事，改掉自己懒散的毛病，规划自己的时间。2019年，自己多做一些帮助家里的事情。不能满足现在的生活。让自己的颗粒度编的更加小，让自己成为一颗完美的螺丝钉。立个flag，19年自己要读20本以上的书，用知识武装自己。多拿出一点时间来学习，拥抱变化，19年每周至少来写一篇自己的成长。</p><h1 id=\"72vzcm\"><a href=\"#72vzcm\"></a>最后</h1><p style=\"padding-left: 2em;\">故事还长，写的不好，条理性欠缺，不过没关系，2019加油！😄</p><p><br /></p>",
    "body_lake": "<!doctype lake><p style=\"text-align:center\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2018%2Fpng%2F190217%2F1546259203220-3f77596b-cba1-41f5-858c-aa79b74147d1.png%22%2C%22width%22%3A809%7D\"></card></p><h1 id=\"aykyzo\"><a href=\"#aykyzo\" id=\"回顾\"></a>回顾</h1><p style=\"padding-left: 2em\">时间过的真快，短短4年的大学生活基本上接近尾声了。回顾这一年，自己的迷茫，这一年自己感受很多。2018年的世界杯，冷门法国夺冠。中国女排夺冠，电子竞技进入亚运会，P2P暴雷，凉了比特币但活了背后的区块链。人工智能被应用到各行各业，自己对人工智能也有了一些自己的理解。</p><h1 id=\"mxr8wg\"><a href=\"#mxr8wg\" id=\"想法\"></a>想法</h1><p style=\"padding-left: 2em\">不积跬步无以至千里，自己思维有许多幼稚的想法，感谢这一年很多人的包容与理解，是你们让我成长。2018年自己去实践的自己的知识，我承认自己的进步很慢。自己很懒散，浪费时间的事情自己做了不少。18年，自己实践的东西太少了。自己的思维太过于分散了，专注度欠缺。自己相对同龄人自己不足的地方，勤奋，时间的把控，以及自己对机会的把控能力。</p><h1 id=\"rqgdsv\"><a href=\"#rqgdsv\" id=\"展望\"></a>展望</h1><p style=\"padding-left: 2em\">19年自己该踏实的做事，改掉自己懒散的毛病，规划自己的时间。2019年，自己多做一些帮助家里的事情。不能满足现在的生活。让自己的颗粒度编的更加小，让自己成为一颗完美的螺丝钉。立个flag，19年自己要读20本以上的书，用知识武装自己。多拿出一点时间来学习，拥抱变化，19年每周至少来写一篇自己的成长。</p><h1 id=\"72vzcm\"><a href=\"#72vzcm\" id=\"最后\"></a>最后</h1><p style=\"padding-left: 2em\">故事还长，写的不好，条理性欠缺，不过没关系，2019加油！😄</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-12-31T12:27:14.000Z",
    "deleted_at": null,
    "created_at": "2018-12-14T08:50:00.000Z",
    "updated_at": "2018-12-31T12:27:14.000Z",
    "published_at": "2018-12-31T12:27:14.000Z",
    "first_published_at": "2018-12-31T12:27:14.000Z",
    "word_count": 415,
    "cover": null,
    "description": "回顾时间过的真快，短短4年的大学生活基本上接近尾声了。回顾这一年，自己的迷茫，这一年自己感受很多。2018年的世界杯，冷门法国夺冠。中国女排夺冠，电子竞技进入亚运会，P2P暴雷，凉了比特币但活了背后的区块链。人工智能被应用到各行各业，自己对人工智能也有了一些自己的理解。想法不积跬步无以至千里，...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1054856,
    "slug": "gxxaiv",
    "title": "整洁测试模型原则 F.I.R.S.T.",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"hcagdd\"></a>\n## [](#hcagdd)快速 （Fast）测试应该够快。\n<a name=\"7wi2ce\"></a>\n## [](#7wi2ce)独立 （Independent）测试应该足够独立\n<a name=\"2o1cyi\"></a>\n## [](#2o1cyi)可重复 （Repeatable）测试环境应该可以在任何环境中复线\n<a name=\"66kdxl\"></a>\n## [](#66kdxl)自足验证性 （Self-Validating）测试应当有布尔值输出\n<a name=\"7zfqqg\"></a>\n## [](#7zfqqg)及时（Timely）测试应及时编写。\n\n",
    "body_draft": "## <a name=\"hcagdd\"></a>快速 （Fast）测试应该够快。\n## <a name=\"7wi2ce\"></a>独立 （Independent）测试应该足够独立\n## <a name=\"2o1cyi\"></a>可重复 （Repeatable）测试环境应该可以在任何环境中复线\n## <a name=\"66kdxl\"></a>自足验证性 （Self-Validating）测试应当有布尔值输出\n## <a name=\"7zfqqg\"></a>及时（Timely）测试应及时编写。\n\n",
    "body_html": "<h2 id=\"hcagdd\"><a href=\"#hcagdd\"></a>快速 （Fast）测试应该够快。</h2><h2 id=\"7wi2ce\"><a href=\"#7wi2ce\"></a>独立 （Independent）测试应该足够独立</h2><h2 id=\"2o1cyi\"><a href=\"#2o1cyi\"></a>可重复 （Repeatable）测试环境应该可以在任何环境中复线</h2><h2 id=\"66kdxl\"><a href=\"#66kdxl\"></a>自足验证性 （Self-Validating）测试应当有布尔值输出</h2><h2 id=\"7zfqqg\"><a href=\"#7zfqqg\"></a>及时（Timely）测试应及时编写。</h2><p><br /></p>",
    "body_lake": "<!doctype lake><h2 id=\"hcagdd\"><a href=\"#hcagdd\" id=\"快速-（fast）测试应该够快。\"></a>快速 （Fast）测试应该够快。</h2><h2 id=\"7wi2ce\"><a href=\"#7wi2ce\" id=\"独立-（independent）测试应该足够独立\"></a>独立 （Independent）测试应该足够独立</h2><h2 id=\"2o1cyi\"><a href=\"#2o1cyi\" id=\"可重复-（repeatable）测试环境应该可以在任何环境中复线\"></a>可重复 （Repeatable）测试环境应该可以在任何环境中复线</h2><h2 id=\"66kdxl\"><a href=\"#66kdxl\" id=\"自足验证性-（self-validating）测试应当有布尔值输出\"></a>自足验证性 （Self-Validating）测试应当有布尔值输出</h2><h2 id=\"7zfqqg\"><a href=\"#7zfqqg\" id=\"及时（timely）测试应及时编写。\"></a>及时（Timely）测试应及时编写。</h2><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-12-14T08:49:39.000Z",
    "deleted_at": null,
    "created_at": "2018-12-14T08:41:30.000Z",
    "updated_at": "2018-12-14T08:49:40.000Z",
    "published_at": "2018-12-14T08:49:39.000Z",
    "first_published_at": null,
    "word_count": 67,
    "cover": null,
    "description": "快速 （Fast）测试应该够快。独立 （Independent）测试应该足够独立可重复 （Repeatable）测试环境应该可以在任何环境中复线自足验证性 （Self-Validating）测试应当有布尔值输出及时（Timely）测试应及时编写。",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1053136,
    "slug": "wou27s",
    "title": "Spring中容器管理",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "今天在写程序的时候看见一个以前没有见过的注解（@Component），在网上查找过后，经过实践，决定把它记录下来。 <br />1、@controller 控制器（注入服务）\n\n用于标注控制层，相当于struts中的action层<br />2、@service 服务（注入dao）\n\n用于标注服务层，主要用来进行业务的逻辑处理<br />3、@repository（实现dao访问）\n\n用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件.<br />4、@component （把普通pojo实例化到spring容器中，相当于配置文件中的 <br /><bean id=\"\" class=\"\"/>）\n\n泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。<br />案例： <br /><context:component-scan base-package=”com.*”> <br />上面的这个例子是引入Component组件的例子，其中base-package表示为需要扫描的所有子包。 <br />共同点：被@controller 、@service、@repository 、@component 注解的类，都会把这些类纳入进spring容器中进行管理\r\n",
    "body_draft": "今天在写程序的时候看见一个以前没有见过的注解（@Component），在网上查找过后，经过实践，决定把它记录下来。 \n1、@controller 控制器（注入服务）\n\n用于标注控制层，相当于struts中的action层\n2、@service 服务（注入dao）\n\n用于标注服务层，主要用来进行业务的逻辑处理\n3、@repository（实现dao访问）\n\n用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件.\n4、@component （把普通pojo实例化到spring容器中，相当于配置文件中的 \n<bean id=\"\" class=\"\"/>）\n\n泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。\n案例： \n<context:component-scan base-package=”com.\\*”> \n上面的这个例子是引入Component组件的例子，其中base-package表示为需要扫描的所有子包。 \n共同点：被@controller 、@service、@repository 、@component 注解的类，都会把这些类纳入进spring容器中进行管理\r\n",
    "body_html": "<p>今天在写程序的时候看见一个以前没有见过的注解（@Component），在网上查找过后，经过实践，决定把它记录下来。 </p><p>1、@controller 控制器（注入服务）</p><p><br /></p><p>用于标注控制层，相当于struts中的action层</p><p>2、@service 服务（注入dao）</p><p><br /></p><p>用于标注服务层，主要用来进行业务的逻辑处理</p><p>3、@repository（实现dao访问）</p><p><br /></p><p>用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件.</p><p>4、@component （把普通pojo实例化到spring容器中，相当于配置文件中的 </p><p>&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;）</p><p><br /></p><p>泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。</p><p>案例： </p><p>&lt;context:component-scan base-package=”com.*”&gt; </p><p>上面的这个例子是引入Component组件的例子，其中base-package表示为需要扫描的所有子包。 </p><p>共同点：被@controller 、@service、@repository 、@component 注解的类，都会把这些类纳入进spring容器中进行管理\r</p>",
    "body_lake": "<!doctype lake><p>今天在写程序的时候看见一个以前没有见过的注解（@Component），在网上查找过后，经过实践，决定把它记录下来。 </p><p>1、@controller 控制器（注入服务）</p><p><br /></p><p>用于标注控制层，相当于struts中的action层</p><p>2、@service 服务（注入dao）</p><p><br /></p><p>用于标注服务层，主要用来进行业务的逻辑处理</p><p>3、@repository（实现dao访问）</p><p><br /></p><p>用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件.</p><p>4、@component （把普通pojo实例化到spring容器中，相当于配置文件中的 </p><p>&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;）</p><p><br /></p><p>泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。</p><p>案例： </p><p>&lt;context:component-scan base-package=”com.*”&gt; </p><p>上面的这个例子是引入Component组件的例子，其中base-package表示为需要扫描的所有子包。 </p><p>共同点：被@controller 、@service、@repository 、@component 注解的类，都会把这些类纳入进spring容器中进行管理\r</p>",
    "public": 1,
    "status": 1,
    "likes_count": 1,
    "comments_count": 0,
    "content_updated_at": "2018-12-14T01:41:13.000Z",
    "deleted_at": null,
    "created_at": "2018-12-14T01:40:23.000Z",
    "updated_at": "2018-12-14T01:41:27.000Z",
    "published_at": "2018-12-14T01:41:13.000Z",
    "first_published_at": null,
    "word_count": 277,
    "cover": null,
    "description": "今天在写程序的时候看见一个以前没有见过的注解（@Component），在网上查找过后，经过实践，决定把它记录下来。 1、@controller 控制器（注入服务）用于标注控制层，相当于struts中的action层2、@service 服务（注入dao）用于标注服务层，主要用来进行业务的逻辑处...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1040624,
    "slug": "daq2y7",
    "title": "java mysql 数据类型对照",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n| **类型名称** | **显示长度** | **数据库类型** | **JAVA类型** | **JDBC类型索引(int)** | **描述** |\n| --- | --- | --- | --- | --- | --- |\n|   |   |   |   |   |   |\n| **VARCHAR** | **L+N** | **VARCHAR** | **java.lang.String** | **12** |   |\n| **CHAR** | **N** | **CHAR** | **java.lang.String** | **1** |   |\n| **BLOB** | **L+N** | **BLOB** | **java.lang.byte[]** | **-4** |   |\n| **TEXT** | **65535** | **VARCHAR** | **java.lang.String** | **-1** |   |\n|   |   |   |   |   |   |\n| **INTEGER** | **4** | **INTEGER UNSIGNED** | **java.lang.Long** | **4** |   |\n| **TINYINT** | **3** | **TINYINT UNSIGNED** | **java.lang.Integer** | **-6** |   |\n| **SMALLINT** | **5** | **SMALLINT UNSIGNED** | **java.lang.Integer** | **5** |   |\n| **MEDIUMINT** | **8** | **MEDIUMINT UNSIGNED** | **java.lang.Integer** | **4** |   |\n| **BIT** | **1** | **BIT** | **java.lang.Boolean** | **-7** |   |\n| **BIGINT** | **20** | **BIGINT UNSIGNED** | **java.math.BigInteger** | **-5** |   |\n| **FLOAT** | **4+8** | **FLOAT** | **java.lang.Float** | **7** |   |\n| **DOUBLE** | **22** | **DOUBLE** | **java.lang.Double** | **8** |   |\n| **DECIMAL** | **11** | **DECIMAL** | **java.math.BigDecimal** | **3** |   |\n| **BOOLEAN** | **1** | **同TINYINT** |   |   |   |\n|   |   |   |   |   |   |\n| **ID** | **11** | **PK (INTEGER UNSIGNED)** | **java.lang.Long** | **4** |   |\n|   |   |   |   |   |   |\n| **DATE** | **10** | **DATE** | **java.sql.Date** | **91** |   |\n| **TIME** | **8** | **TIME** | **java.sql.Time** | **92** |   |\n| **DATETIME** | **19** | **DATETIME** | **java.sql.Timestamp** | **93** |   |\n| **TIMESTAMP** | **19** | **TIMESTAMP** | **java.sql.Timestamp** | **93** |   |\n| **YEAR** | **4** | **YEAR** | **java.sql.Date** | 91 |  |\n\n| 对于bolb，一般用于对图片的数据库存储，原理是把图片打成二进制，然后进行的一种存储方式，在java中对应byte［］数组。<br /><br />对于boolen类型，在mysql数据库中，个人认为用int类型代替较好，对bit操作不是很方便，尤其是在具有web页面开发的项目中，表示0/1，对应java类型的Integer较好。 |\n| --- |\n\n<br /> \n\n\ndecimal列的声明语法是decimal(m,d)。\n\n在mysql5.1中，参数的取值范围： <br />1、M是数字的最大数（精度）。其范围为1～65（在较旧的MySQL版本中，允许的范围是1～254）。 <br />2、D是小数点右侧数字的数目（标度）。其范围是0～30，但不得超过M。 <br />说明：float占4个字节，double占8个字节，decimail(M,D)占M+2个字节。 <br />如DECIMAL(5, 2) 的最大值为9 9 9 9 . 9 9，因为有7 个字节可用。 \n",
    "body_draft": "\n\n| __类型名称__ | __显示长度__ | __数据库类型__ | __JAVA类型__ | __JDBC类型索引(int)__ | __描述__ |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n|   |   |   |   |   |   |\n| __VARCHAR__ | __L+N__ | __VARCHAR__ | __java.lang.String__ | __12__ |   |\n| __CHAR__ | __N__ | __CHAR__ | __java.lang.String__ | __1__ |   |\n| __BLOB__ | __L+N__ | __BLOB__ | __java.lang.byte[]__ | __-4__ |   |\n| __TEXT__ | __65535__ | __VARCHAR__ | __java.lang.String__ | __-1__ |   |\n|   |   |   |   |   |   |\n| __INTEGER__ | __4__ | __INTEGER UNSIGNED__ | __java.lang.Long__ | __4__ |   |\n| __TINYINT__ | __3__ | __TINYINT UNSIGNED__ | __java.lang.Integer__ | __-6__ |   |\n| __SMALLINT__ | __5__ | __SMALLINT UNSIGNED__ | __java.lang.Integer__ | __5__ |   |\n| __MEDIUMINT__ | __8__ | __MEDIUMINT UNSIGNED__ | __java.lang.Integer__ | __4__ |   |\n| __BIT__ | __1__ | __BIT__ | __java.lang.Boolean__ | __-7__ |   |\n| __BIGINT__ | __20__ | __BIGINT UNSIGNED__ | __java.math.BigInteger__ | __-5__ |   |\n| __FLOAT__ | __4+8__ | __FLOAT__ | __java.lang.Float__ | __7__ |   |\n| __DOUBLE__ | __22__ | __DOUBLE__ | __java.lang.Double__ | __8__ |   |\n| __DECIMAL__ | __11__ | __DECIMAL__ | __java.math.BigDecimal__ | __3__ |   |\n| __BOOLEAN__ | __1__ | __同TINYINT__ |   |   |   |\n|   |   |   |   |   |   |\n| __ID__ | __11__ | __PK (INTEGER UNSIGNED)__ | __java.lang.Long__ | __4__ |   |\n|   |   |   |   |   |   |\n| __DATE__ | __10__ | __DATE__ | __java.sql.Date__ | __91__ |   |\n| __TIME__ | __8__ | __TIME__ | __java.sql.Time__ | __92__ |   |\n| __DATETIME__ | __19__ | __DATETIME__ | __java.sql.Timestamp__ | __93__ |   |\n| __TIMESTAMP__ | __19__ | __TIMESTAMP__ | __java.sql.Timestamp__ | __93__ |   |\n| __YEAR__ | __4__ | __YEAR__ | __java.sql.Date__ | 91 |  |\n\n\n<div class=\"bi-table\">\n  <table>\n    <colgroup>\n      <col width=\"auto\" />\n    </colgroup>\n    <tbody>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">对于bolb，一般用于对图片的数据库存储，原理是把图片打成二进制，然后进行的一种存储方式，在java中对应byte［］数组。 对于boolen类型，在mysql数据库中，个人认为用int类型代替较好，对bit操作不是很方便，尤其是在具有web页面开发的项目中，表示0/1，对应java类型的Integer较好。\n\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n \n\n\ndecimal列的声明语法是decimal(m,d)。\n\n在mysql5.1中，参数的取值范围： \n1、M是数字的最大数（精度）。其范围为1～65（在较旧的MySQL版本中，允许的范围是1～254）。 \n2、D是小数点右侧数字的数目（标度）。其范围是0～30，但不得超过M。 \n说明：float占4个字节，double占8个字节，decimail(M,D)占M+2个字节。 \n如DECIMAL(5, 2) 的最大值为9 9 9 9 . 9 9，因为有7 个字节可用。 \n",
    "body_html": "<p><br /></p><table class=\"lake-table\" style=\"width: 750px;\"><colgroup><col width=\"125\"></col><col width=\"125\"></col><col width=\"125\"></col><col width=\"125\"></col><col width=\"125\"></col><col width=\"125\"></col></colgroup><tbody><tr><td><p><strong>类型名称</strong></p></td><td><p><strong>显示长度</strong></p></td><td><p><strong>数据库类型</strong></p></td><td><p><strong>JAVA类型</strong></p></td><td><p><strong>JDBC类型索引(int)</strong></p></td><td><p><strong>描述</strong></p></td></tr><tr><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td></tr><tr><td><p><strong>VARCHAR</strong></p></td><td><p><strong>L+N</strong></p></td><td><p><strong>VARCHAR</strong></p></td><td><p><strong>java.lang.String</strong></p></td><td><p><strong>12</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>CHAR</strong></p></td><td><p><strong>N</strong></p></td><td><p><strong>CHAR</strong></p></td><td><p><strong>java.lang.String</strong></p></td><td><p><strong>1</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>BLOB</strong></p></td><td><p><strong>L+N</strong></p></td><td><p><strong>BLOB</strong></p></td><td><p><strong>java.lang.byte[]</strong></p></td><td><p><strong>-4</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>TEXT</strong></p></td><td><p><strong>65535</strong></p></td><td><p><strong>VARCHAR</strong></p></td><td><p><strong>java.lang.String</strong></p></td><td><p><strong>-1</strong></p></td><td><p> </p></td></tr><tr><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td></tr><tr><td><p><strong>INTEGER</strong></p></td><td><p><strong>4</strong></p></td><td><p><strong>INTEGER UNSIGNED</strong></p></td><td><p><strong>java.lang.Long</strong></p></td><td><p><strong>4</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>TINYINT</strong></p></td><td><p><strong>3</strong></p></td><td><p><strong>TINYINT UNSIGNED</strong></p></td><td><p><strong>java.lang.Integer</strong></p></td><td><p><strong>-6</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>SMALLINT</strong></p></td><td><p><strong>5</strong></p></td><td><p><strong>SMALLINT UNSIGNED</strong></p></td><td><p><strong>java.lang.Integer</strong></p></td><td><p><strong>5</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>MEDIUMINT</strong></p></td><td><p><strong>8</strong></p></td><td><p><strong>MEDIUMINT UNSIGNED</strong></p></td><td><p><strong>java.lang.Integer</strong></p></td><td><p><strong>4</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>BIT</strong></p></td><td><p><strong>1</strong></p></td><td><p><strong>BIT</strong></p></td><td><p><strong>java.lang.Boolean</strong></p></td><td><p><strong>-7</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>BIGINT</strong></p></td><td><p><strong>20</strong></p></td><td><p><strong>BIGINT UNSIGNED</strong></p></td><td><p><strong>java.math.BigInteger</strong></p></td><td><p><strong>-5</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>FLOAT</strong></p></td><td><p><strong>4+8</strong></p></td><td><p><strong>FLOAT</strong></p></td><td><p><strong>java.lang.Float</strong></p></td><td><p><strong>7</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>DOUBLE</strong></p></td><td><p><strong>22</strong></p></td><td><p><strong>DOUBLE</strong></p></td><td><p><strong>java.lang.Double</strong></p></td><td><p><strong>8</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>DECIMAL</strong></p></td><td><p><strong>11</strong></p></td><td><p><strong>DECIMAL</strong></p></td><td><p><strong>java.math.BigDecimal</strong></p></td><td><p><strong>3</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>BOOLEAN</strong></p></td><td><p><strong>1</strong></p></td><td><p><strong>同TINYINT</strong></p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td></tr><tr><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td></tr><tr><td><p><strong>ID</strong></p></td><td><p><strong>11</strong></p></td><td><p><strong>PK (INTEGER UNSIGNED)</strong></p></td><td><p><strong>java.lang.Long</strong></p></td><td><p><strong>4</strong></p></td><td><p> </p></td></tr><tr><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td><td><p> </p></td></tr><tr><td><p><strong>DATE</strong></p></td><td><p><strong>10</strong></p></td><td><p><strong>DATE</strong></p></td><td><p><strong>java.sql.Date</strong></p></td><td><p><strong>91</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>TIME</strong></p></td><td><p><strong>8</strong></p></td><td><p><strong>TIME</strong></p></td><td><p><strong>java.sql.Time</strong></p></td><td><p><strong>92</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>DATETIME</strong></p></td><td><p><strong>19</strong></p></td><td><p><strong>DATETIME</strong></p></td><td><p><strong>java.sql.Timestamp</strong></p></td><td><p><strong>93</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>TIMESTAMP</strong></p></td><td><p><strong>19</strong></p></td><td><p><strong>TIMESTAMP</strong></p></td><td><p><strong>java.sql.Timestamp</strong></p></td><td><p><strong>93</strong></p></td><td><p> </p></td></tr><tr><td><p><strong>YEAR</strong></p></td><td><p><strong>4</strong></p></td><td><p><strong>YEAR</strong></p></td><td><p><strong>java.sql.Date</strong></p></td><td><p>91</p></td><td><p><br /></p></td></tr></tbody></table><p><table class=\"lake-table\" style=\"width: 750px;\"><colgroup><col width=\"750\"></col></colgroup><tbody><tr><td><p>对于bolb，一般用于对图片的数据库存储，原理是把图片打成二进制，然后进行的一种存储方式，在java中对应byte［］数组。<br /><br />对于boolen类型，在mysql数据库中，个人认为用int类型代替较好，对bit操作不是很方便，尤其是在具有web页面开发的项目中，表示0/1，对应java类型的Integer较好。</p></td></tr></tbody></table></p><p> </p><p></p><p><br /></p><p>decimal列的声明语法是decimal(m,d)。</p><p><br /></p><p>在mysql5.1中，参数的取值范围： <br />1、M是数字的最大数（精度）。其范围为1～65（在较旧的MySQL版本中，允许的范围是1～254）。 <br />2、D是小数点右侧数字的数目（标度）。其范围是0～30，但不得超过M。 <br />说明：float占4个字节，double占8个字节，decimail(M,D)占M+2个字节。 <br />如DECIMAL(5, 2) 的最大值为9 9 9 9 . 9 9，因为有7 个字节可用。 </p>",
    "body_lake": "<!doctype lake><p><br /></p><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%2267138258%22%2C%22rows%22%3A25%2C%22cols%22%3A6%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22125%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22125%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22125%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22125%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22125%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22125%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E%E7%B1%BB%E5%9E%8B%E5%90%8D%E7%A7%B0%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E%E6%98%BE%E7%A4%BA%E9%95%BF%E5%BA%A6%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EJAVA%E7%B1%BB%E5%9E%8B%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EJDBC%E7%B1%BB%E5%9E%8B%E7%B4%A2%E5%BC%95(int)%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E%E6%8F%8F%E8%BF%B0%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EVARCHAR%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EL%2BN%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EVARCHAR%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.String%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E12%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ECHAR%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EN%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ECHAR%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.String%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E1%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EBLOB%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EL%2BN%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EBLOB%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.byte%5B%5D%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E-4%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ETEXT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E65535%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EVARCHAR%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.String%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E-1%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EINTEGER%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E4%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EINTEGER%20UNSIGNED%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.Long%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E4%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ETINYINT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E3%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ETINYINT%20UNSIGNED%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.Integer%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E-6%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ESMALLINT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E5%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ESMALLINT%20UNSIGNED%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.Integer%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E5%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EMEDIUMINT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E8%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EMEDIUMINT%20UNSIGNED%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.Integer%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E4%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EBIT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E1%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EBIT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.Boolean%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E-7%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EBIGINT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E20%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EBIGINT%20UNSIGNED%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.math.BigInteger%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E-5%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EFLOAT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E4%2B8%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EFLOAT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.Float%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E7%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EDOUBLE%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E22%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EDOUBLE%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.Double%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E8%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EDECIMAL%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E11%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EDECIMAL%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.math.BigDecimal%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E3%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EBOOLEAN%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E1%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E%E5%90%8CTINYINT%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EID%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E11%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EPK%20(INTEGER%20UNSIGNED)%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.lang.Long%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E4%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EDATE%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E10%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EDATE%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.sql.Date%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E91%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ETIME%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E8%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ETIME%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.sql.Time%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E92%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EDATETIME%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E19%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EDATETIME%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.sql.Timestamp%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E93%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ETIMESTAMP%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E19%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3ETIMESTAMP%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.sql.Timestamp%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E93%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%C2%A0%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EYEAR%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3E4%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3EYEAR%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cstrong%3Ejava.sql.Date%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E91%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%7D\"></card><p><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%223f5d7e32%22%2C%22rows%22%3A1%2C%22cols%22%3A1%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22750%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E5%AF%B9%E4%BA%8Ebolb%EF%BC%8C%E4%B8%80%E8%88%AC%E7%94%A8%E4%BA%8E%E5%AF%B9%E5%9B%BE%E7%89%87%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%EF%BC%8C%E5%8E%9F%E7%90%86%E6%98%AF%E6%8A%8A%E5%9B%BE%E7%89%87%E6%89%93%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%9B%E8%A1%8C%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%EF%BC%8C%E5%9C%A8java%E4%B8%AD%E5%AF%B9%E5%BA%94byte%EF%BC%BB%EF%BC%BD%E6%95%B0%E7%BB%84%E3%80%82%3Cbr%20%2F%3E%3Cbr%20%2F%3E%E5%AF%B9%E4%BA%8Eboolen%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%9C%A8mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%EF%BC%8C%E4%B8%AA%E4%BA%BA%E8%AE%A4%E4%B8%BA%E7%94%A8int%E7%B1%BB%E5%9E%8B%E4%BB%A3%E6%9B%BF%E8%BE%83%E5%A5%BD%EF%BC%8C%E5%AF%B9bit%E6%93%8D%E4%BD%9C%E4%B8%8D%E6%98%AF%E5%BE%88%E6%96%B9%E4%BE%BF%EF%BC%8C%E5%B0%A4%E5%85%B6%E6%98%AF%E5%9C%A8%E5%85%B7%E6%9C%89web%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%AD%EF%BC%8C%E8%A1%A8%E7%A4%BA0%2F1%EF%BC%8C%E5%AF%B9%E5%BA%94java%E7%B1%BB%E5%9E%8B%E7%9A%84Integer%E8%BE%83%E5%A5%BD%E3%80%82%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%7D\"></card><p> </p></p><p><br /></p><p>decimal列的声明语法是decimal(m,d)。</p><p><br /></p><p>在mysql5.1中，参数的取值范围： <br />1、M是数字的最大数（精度）。其范围为1～65（在较旧的MySQL版本中，允许的范围是1～254）。 <br />2、D是小数点右侧数字的数目（标度）。其范围是0～30，但不得超过M。 <br />说明：float占4个字节，double占8个字节，decimail(M,D)占M+2个字节。 <br />如DECIMAL(5, 2) 的最大值为9 9 9 9 . 9 9，因为有7 个字节可用。 </p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-12-10T01:05:34.000Z",
    "deleted_at": null,
    "created_at": "2018-12-10T01:04:03.000Z",
    "updated_at": "2018-12-10T01:05:34.000Z",
    "published_at": "2018-12-10T01:05:34.000Z",
    "first_published_at": null,
    "word_count": 399,
    "cover": null,
    "description": "类型名称显示长度数据库类型JAVA类型JDBC类型索引(int)描述      VARCHARL+NVARCHARjava.lang.String12 CHARNCHARjava.lang.String1 BLOBL+NBLOBjava.lang.byte[]-4 TEXT65535VARCH...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1029402,
    "slug": "ewsium",
    "title": "Spring IOC",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"n6dmzl\"></a>\n### [](#n6dmzl)1.1  IoC是什么\n\nIoc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：\n\n \n\n●**谁控制谁，控制什么：**传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。\n\n●**为何是反转，哪些方面反转了：**有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。\n\n用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：\n\n![](http://sishuok.com/forum/upload/2012/2/19/a02c1e3154ef4be3f15fb91275a26494__1.JPG#width=) <br />\n<br />图2-1 传统应用程序示意图\n\n当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:\n\n ![](http://sishuok.com/forum/upload/2012/2/19/6fdf1048726cc2edcac4fca685f050ac__2.JPG#width=)\n\n图2-2有IoC/DI容器后程序结构示意图\n\n<a name=\"mcx1iu\"></a>\n### [](#mcx1iu) \n\n<a name=\"gzchhf\"></a>\n### [](#gzchhf)1.2  IoC能做什么\n\nIoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。\n\n其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。\n\nIoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。\n\n<a name=\"l17mde\"></a>\n### [](#l17mde) \n\n<a name=\"2ptrxq\"></a>\n### [](#2ptrxq)1.3  IoC和DI\n\nDI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。\n\n \n\n理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：\n\n \n\n●**谁依赖于谁：**当然是某个容器管理对象依赖于IoC容器；“被注入对象的对象”依赖于“依赖对象”；\n\n●**为什么需要依赖：**容器管理对象需要IoC容器来提供对象需要的外部资源；\n\n●**谁注入谁：**很明显是IoC容器注入某个对象，也就是注入“依赖对象”；\n\n**●注入了什么：**就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。\n\n \n\nIoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，**“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。**\n\n \n",
    "body_draft": "### <a name=\"n6dmzl\"></a>1.1  IoC是什么\n\nIoc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：\n\n \n\n●__谁控制谁，控制什么：__传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。\n\n●__为何是反转，哪些方面反转了：__有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。\n\n用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：\n\n<div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n  <div data-type=\"p\">\n    <div data-type=\"image\" data-display=\"block\" data-align=\"center\" data-src=\"http://sishuok.com/forum/upload/2012/2/19/a02c1e3154ef4be3f15fb91275a26494__1.JPG\" data-width=\"\">\n      <img src=\"http://sishuok.com/forum/upload/2012/2/19/a02c1e3154ef4be3f15fb91275a26494__1.JPG\" width=\"\" />\n    </div> </div>\n</div>\n\n<div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n  <div data-type=\"p\"></div>\n</div>\n\n<div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n  <div data-type=\"p\">图2-1 传统应用程序示意图</div>\n</div>\n\n\n当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:\n\n \n\n![image | center](http://sishuok.com/forum/upload/2012/2/19/6fdf1048726cc2edcac4fca685f050ac__2.JPG \"\")\n\n\n<div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n  <div data-type=\"p\">图2-2有IoC/DI容器后程序结构示意图</div>\n</div>\n\n\n### <a name=\"mcx1iu\"></a>\n\n### <a name=\"gzchhf\"></a>1.2  IoC能做什么\n\nIoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。\n\n其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。\n\nIoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。\n\n### <a name=\"l17mde\"></a>\n\n### <a name=\"2ptrxq\"></a>1.3  IoC和DI\n\nDI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。\n\n \n\n理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：\n\n \n\n●__谁依赖于谁：__当然是某个容器管理对象依赖于IoC容器；“被注入对象的对象”依赖于“依赖对象”；\n\n●__为什么需要依赖：__容器管理对象需要IoC容器来提供对象需要的外部资源；\n\n●__谁注入谁：__很明显是IoC容器注入某个对象，也就是注入“依赖对象”；\n\n__●注入了什么：__就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。\n\n \n\nIoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，__“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。__\n\n \n",
    "body_html": "<h3 id=\"n6dmzl\"><a href=\"#n6dmzl\"></a>1.1  IoC是什么</h3><p><br /></p><p>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><p><br /></p><p> </p><p><br /></p><p>●<strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p><p><br /></p><p>●<strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p><p><br /></p><p>用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：</p><p><br /></p><p style=\"text-align: center;\"><img src=\"http://sishuok.com/forum/upload/2012/2/19/a02c1e3154ef4be3f15fb91275a26494__1.JPG#width=\" style=\"max-width: 600px;\" /> </p><p style=\"text-align: center;\"><br /></p><p style=\"text-align: center;\">图2-1 传统应用程序示意图</p><p><br /></p><p>当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:</p><p><br /></p><p> <img src=\"http://sishuok.com/forum/upload/2012/2/19/6fdf1048726cc2edcac4fca685f050ac__2.JPG#width=\" style=\"max-width: 600px;\" /></p><p><br /></p><p style=\"text-align: center;\">图2-2有IoC/DI容器后程序结构示意图</p><p><br /></p><h3 id=\"mcx1iu\"><a href=\"#mcx1iu\"></a> </h3><p><br /></p><h3 id=\"gzchhf\"><a href=\"#gzchhf\"></a>1.2  IoC能做什么</h3><p><br /></p><p>IoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p><br /></p><p>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p><p><br /></p><p>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><p><br /></p><h3 id=\"l17mde\"><a href=\"#l17mde\"></a> </h3><p><br /></p><h3 id=\"2ptrxq\"><a href=\"#2ptrxq\"></a>1.3  IoC和DI</h3><p><br /></p><p>DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p><br /></p><p> </p><p><br /></p><p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><p><br /></p><p> </p><p><br /></p><p>●<strong>谁依赖于谁：</strong>当然是某个容器管理对象依赖于IoC容器；“被注入对象的对象”依赖于“依赖对象”；</p><p><br /></p><p>●<strong>为什么需要依赖：</strong>容器管理对象需要IoC容器来提供对象需要的外部资源；</p><p><br /></p><p>●<strong>谁注入谁：</strong>很明显是IoC容器注入某个对象，也就是注入“依赖对象”；</p><p><br /></p><p><strong>●注入了什么：</strong>就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</p><p><br /></p><p> </p><p><br /></p><p>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，<strong>“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</strong></p><p><br /></p><p> </p>",
    "body_lake": "<!doctype lake><h3 id=\"n6dmzl\"><a href=\"#n6dmzl\" id=\"1.1-ioc是什么\"></a>1.1  IoC是什么</h3><p><br /></p><p>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><p><br /></p><p> </p><p><br /></p><p>●<strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p><p><br /></p><p>●<strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p><p><br /></p><p>用图例说明一下，传统程序设计如图2-1，都是主动去创建相关对象然后再组合起来：</p><p><br /></p><p style=\"text-align:center\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22http%3A%2F%2Fsishuok.com%2Fforum%2Fupload%2F2012%2F2%2F19%2Fa02c1e3154ef4be3f15fb91275a26494__1.JPG%22%2C%22width%22%3A%22%22%7D\"></card> </p><p style=\"text-align:center\"><br /></p><p style=\"text-align:center\">图2-1 传统应用程序示意图</p><p><br /></p><p>当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图2-2所示:</p><p><br /></p><p> <card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22http%3A%2F%2Fsishuok.com%2Fforum%2Fupload%2F2012%2F2%2F19%2F6fdf1048726cc2edcac4fca685f050ac__2.JPG%22%2C%22width%22%3A%22%22%7D\"></card></p><p><br /></p><p style=\"text-align:center\">图2-2有IoC/DI容器后程序结构示意图</p><p><br /></p><h3 id=\"mcx1iu\"><a href=\"#mcx1iu\" id=\"-\"></a> </h3><p><br /></p><h3 id=\"gzchhf\"><a href=\"#gzchhf\" id=\"1.2-ioc能做什么\"></a>1.2  IoC能做什么</h3><p><br /></p><p>IoC不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p><br /></p><p>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p><p><br /></p><p>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><p><br /></p><h3 id=\"l17mde\"><a href=\"#l17mde\" id=\"-\"></a> </h3><p><br /></p><h3 id=\"2ptrxq\"><a href=\"#2ptrxq\" id=\"1.3-ioc和di\"></a>1.3  IoC和DI</h3><p><br /></p><p>DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p><br /></p><p> </p><p><br /></p><p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><p><br /></p><p> </p><p><br /></p><p>●<strong>谁依赖于谁：</strong>当然是某个容器管理对象依赖于IoC容器；“被注入对象的对象”依赖于“依赖对象”；</p><p><br /></p><p>●<strong>为什么需要依赖：</strong>容器管理对象需要IoC容器来提供对象需要的外部资源；</p><p><br /></p><p>●<strong>谁注入谁：</strong>很明显是IoC容器注入某个对象，也就是注入“依赖对象”；</p><p><br /></p><p><strong>●注入了什么：</strong>就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</p><p><br /></p><p> </p><p><br /></p><p>IoC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，<strong>“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。</strong></p><p><br /></p><p> </p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-12-05T06:35:22.000Z",
    "deleted_at": null,
    "created_at": "2018-12-05T06:30:12.000Z",
    "updated_at": "2018-12-05T06:35:22.000Z",
    "published_at": "2018-12-05T06:35:22.000Z",
    "first_published_at": null,
    "word_count": 1273,
    "cover": null,
    "description": "1.1  IoC是什么Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1029357,
    "slug": "vxe9ev",
    "title": "分享Bromon的blog上对IoC与DI浅显易懂的讲解",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"t5\"></a>\n### [](#t5)1、IoC(控制反转)\n\n　　首先想说说**IoC（Inversion of Control，控制反转）**。这是**spring的核心**，贯穿始终。**所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。**这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。\n\n　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。**Spring所倡导的开发方式**就是如此，**所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。**\n\n<a name=\"t6\"></a>\n### [](#t6)2、DI(依赖注入)\n\n　　**IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的**。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。\n\n　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。\n",
    "body_draft": "### <a name=\"t5\"></a>1、IoC(控制反转)\n\n　　首先想说说__IoC（Inversion of Control，控制反转）__。这是__spring的核心__，贯穿始终。__所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。__这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。\n\n　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。__Spring所倡导的开发方式__就是如此，__所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。__\n\n### <a name=\"t6\"></a>2、DI(依赖注入)\n\n　　__IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的__。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。\n\n　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。\n",
    "body_html": "<h3 id=\"t5\"><a href=\"#t5\"></a>1、IoC(控制反转)</h3><p><br /></p><p>　　首先想说说<strong>IoC（Inversion of Control，控制反转）</strong>。这是<strong>spring的核心</strong>，贯穿始终。<strong>所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。</strong>这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。</p><p><br /></p><p>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。<strong>Spring所倡导的开发方式</strong>就是如此，<strong>所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</strong></p><p><br /></p><h3 id=\"t6\"><a href=\"#t6\"></a>2、DI(依赖注入)</h3><p><br /></p><p>　　<strong>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的</strong>。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p><p><br /></p><p>　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p>",
    "body_lake": "<!doctype lake><h3 id=\"t5\"><a href=\"#t5\" id=\"1、ioc(控制反转)\"></a>1、IoC(控制反转)</h3><p><br /></p><p>　　首先想说说<strong>IoC（Inversion of Control，控制反转）</strong>。这是<strong>spring的核心</strong>，贯穿始终。<strong>所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。</strong>这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。</p><p><br /></p><p>　　那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。<strong>Spring所倡导的开发方式</strong>就是如此，<strong>所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。</strong></p><p><br /></p><h3 id=\"t6\"><a href=\"#t6\" id=\"2、di(依赖注入)\"></a>2、DI(依赖注入)</h3><p><br /></p><p>　　<strong>IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的</strong>。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。</p><p><br /></p><p>　　理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-12-05T06:26:07.000Z",
    "deleted_at": null,
    "created_at": "2018-12-05T06:25:18.000Z",
    "updated_at": "2018-12-05T06:26:07.000Z",
    "published_at": "2018-12-05T06:26:07.000Z",
    "first_published_at": null,
    "word_count": 951,
    "cover": null,
    "description": "1、IoC(控制反转)　　首先想说说IoC（Inversion of Control，控制反转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1029035,
    "slug": "ov6k02",
    "title": "Java中 VO、 PO、DO、DTO、 BO、 QO、DAO、POJO的概念",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"x6ayok\"></a>\n## [](#x6ayok)PO(persistant object) 持久对象\n\n在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。\n\n<a name=\"wkahye\"></a>\n## [](#wkahye)DO（Domain Object）领域对象\n\n就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。\n\n<a name=\"2hs4rg\"></a>\n## [](#2hs4rg)TO(Transfer Object) ，数据传输对象\n\n在应用程序不同 tie( 关系 ) 之间传输的对象\n\n<a name=\"g9zslt\"></a>\n## [](#g9zslt)DTO（Data Transfer Object）数据传输对象\n\n这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。\n\n<a name=\"3acxat\"></a>\n## [](#3acxat)VO(view object) 值对象\n\n视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。\n\n<a name=\"uk5fmy\"></a>\n## [](#uk5fmy)BO(business object) 业务对象\n\n从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。\n\n<a name=\"zkwixy\"></a>\n## [](#zkwixy)POJO(plain ordinary java object) 简单无规则 java 对象\n\n纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。\n\n<a name=\"508ibc\"></a>\n## [](#508ibc)DAO(data access object) 数据访问对象\n\n是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作\n",
    "body_draft": "## <a name=\"x6ayok\"></a>PO(persistant object) 持久对象\n\n在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。\n\n## <a name=\"wkahye\"></a>DO（Domain Object）领域对象\n\n就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。\n\n## <a name=\"2hs4rg\"></a>TO(Transfer Object) ，数据传输对象\n\n在应用程序不同 tie( 关系 ) 之间传输的对象\n\n## <a name=\"g9zslt\"></a>DTO（Data Transfer Object）数据传输对象\n\n这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。\n\n## <a name=\"3acxat\"></a>VO(view object) 值对象\n\n视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。\n\n## <a name=\"uk5fmy\"></a>BO(business object) 业务对象\n\n从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。\n\n## <a name=\"zkwixy\"></a>POJO(plain ordinary java object) 简单无规则 java 对象\n\n纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。\n\n## <a name=\"508ibc\"></a>DAO(data access object) 数据访问对象\n\n是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作\n",
    "body_html": "<h2 id=\"x6ayok\"><a href=\"#x6ayok\"></a>PO(persistant object) 持久对象</h2><p><br /></p><p>在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。</p><p><br /></p><h2 id=\"wkahye\"><a href=\"#wkahye\"></a>DO（Domain Object）领域对象</h2><p><br /></p><p>就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。</p><p><br /></p><h2 id=\"2hs4rg\"><a href=\"#2hs4rg\"></a>TO(Transfer Object) ，数据传输对象</h2><p><br /></p><p>在应用程序不同 tie( 关系 ) 之间传输的对象</p><p><br /></p><h2 id=\"g9zslt\"><a href=\"#g9zslt\"></a>DTO（Data Transfer Object）数据传输对象</h2><p><br /></p><p>这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p><p><br /></p><h2 id=\"3acxat\"><a href=\"#3acxat\"></a>VO(view object) 值对象</h2><p><br /></p><p>视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p><p><br /></p><h2 id=\"uk5fmy\"><a href=\"#uk5fmy\"></a>BO(business object) 业务对象</h2><p><br /></p><p>从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。</p><p><br /></p><h2 id=\"zkwixy\"><a href=\"#zkwixy\"></a>POJO(plain ordinary java object) 简单无规则 java 对象</h2><p><br /></p><p>纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。</p><p><br /></p><h2 id=\"508ibc\"><a href=\"#508ibc\"></a>DAO(data access object) 数据访问对象</h2><p><br /></p><p>是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作</p>",
    "body_lake": "<!doctype lake><h2 id=\"x6ayok\"><a href=\"#x6ayok\" id=\"po(persistant-object)-持久对象\"></a>PO(persistant object) 持久对象</h2><p><br /></p><p>在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包含任何对数据库的操作。</p><p><br /></p><h2 id=\"wkahye\"><a href=\"#wkahye\" id=\"do（domain-object）领域对象\"></a>DO（Domain Object）领域对象</h2><p><br /></p><p>就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。</p><p><br /></p><h2 id=\"2hs4rg\"><a href=\"#2hs4rg\" id=\"to(transfer-object)-，数据传输对象\"></a>TO(Transfer Object) ，数据传输对象</h2><p><br /></p><p>在应用程序不同 tie( 关系 ) 之间传输的对象</p><p><br /></p><h2 id=\"g9zslt\"><a href=\"#g9zslt\" id=\"dto（data-transfer-object）数据传输对象\"></a>DTO（Data Transfer Object）数据传输对象</h2><p><br /></p><p>这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p><p><br /></p><h2 id=\"3acxat\"><a href=\"#3acxat\" id=\"vo(view-object)-值对象\"></a>VO(view object) 值对象</h2><p><br /></p><p>视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p><p><br /></p><h2 id=\"uk5fmy\"><a href=\"#uk5fmy\" id=\"bo(business-object)-业务对象\"></a>BO(business object) 业务对象</h2><p><br /></p><p>从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。 business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。</p><p><br /></p><h2 id=\"zkwixy\"><a href=\"#zkwixy\" id=\"pojo(plain-ordinary-java-object)-简单无规则-java-对象\"></a>POJO(plain ordinary java object) 简单无规则 java 对象</h2><p><br /></p><p>纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean ，只有属性字段及 setter 和 getter 方法！。</p><p><br /></p><h2 id=\"508ibc\"><a href=\"#508ibc\" id=\"dao(data-access-object)-数据访问对象\"></a>DAO(data access object) 数据访问对象</h2><p><br /></p><p>是一个 sun 的一个标准 j2ee 设计模式， 这个模式中有个接口就是 DAO ，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用， DAO 中包含了各种数据库的操作方法。通过它的方法 , 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-12-05T04:26:24.000Z",
    "deleted_at": null,
    "created_at": "2018-12-05T04:23:46.000Z",
    "updated_at": "2018-12-05T04:26:25.000Z",
    "published_at": "2018-12-05T04:26:24.000Z",
    "first_published_at": null,
    "word_count": 766,
    "cover": null,
    "description": "PO(persistant object) 持久对象在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 1015661,
    "slug": "xrsl49",
    "title": "常用小工具整理",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "每周定期更新\n<a name=\"w0xbni\"></a>\n### [](#w0xbni)产品经理必备应用：\n\n| 应用名称 | 软件 | 官网 |\n| --- | --- | --- |\n| Sketch | 下载链接 | [https://www.sketchapp.com/](https://www.sketchapp.com/) |\n| Sketch18国语言插件 | [下载链接](https://github.com/cute/SketchI18N/archive/master.zip) | [https://github.com/cute/SketchI18N](https://github.com/cute/SketchI18N) |\n| Kitchen（Sketch的扩展插件，流程图产品原型图，报表图等等，高大上图） | [下载链接](https://gw.alipayobjects.com/os/kitchen/42515441-04c0-47d5-9bd0-552fc70e248b/kitchen-2.10.5.zip) | [http://kitchen.alipay.com/](http://kitchen.alipay.com/) |\n| 飞冰（ice）（网页原型设计） | [下载链接](https://alibaba.github.io/ice/iceworks) | [https://alibaba.github.io/ice/](https://alibaba.github.io/ice/) |\n|  |  |  |\n|  |  |  |\n\n<a name=\"gbzosw\"></a>\n### [](#gbzosw)**开发人员必备：**\n\n| 应用名称 | 软件 | 官网 |\n| --- | --- | --- |\n| [ant.design](https://ant.design/index-cn)(前端开发必备，后端自研必备) | [ant.design](https://ant.design/index-cn) | [https://ant.design/index-cn](https://ant.design/index-cn) |\n| 飞冰（ice）（网页原型设计） | [​下载链接​](https://alibaba.github.io/ice/iceworks) | ​https://alibaba.github.io/ice/​ |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n\n\n",
    "body_draft": "每周定期更新\n### <a name=\"w0xbni\"></a>产品经理必备应用：\n\n\n<div class=\"bi-table\">\n  <table>\n    <colgroup>\n      <col width=\"auto\" />\n      <col width=\"auto\" />\n      <col width=\"auto\" />\n    </colgroup>\n    <tbody>\n      <tr height=\"34px\">\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">应用名称</div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">软件</div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">官网</div>\n          </div>\n        </td>\n      </tr>\n      <tr height=\"34px\">\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">Sketch</div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\"><span>下载链接</span></div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">\n            <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://www.sketchapp.com/\" class=\"bi-link\">https://www.sketchapp.com/</a>\n          </div>\n        </td>\n      </tr>\n      <tr height=\"34px\">\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">Sketch18国语言插件</div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">\n              <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/cute/SketchI18N/archive/master.zip\" class=\"bi-link\">下载链接</a>\n            </div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">\n              <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://github.com/cute/SketchI18N\" class=\"bi-link\">https://github.com/cute/SketchI18N</a>\n            </div>\n          </div>\n        </td>\n      </tr>\n      <tr height=\"34px\">\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">Kitchen（Sketch的扩展插件，流程图产品原型图，报表图等等，高大上图）</div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">\n              <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://gw.alipayobjects.com/os/kitchen/42515441-04c0-47d5-9bd0-552fc70e248b/kitchen-2.10.5.zip\" class=\"bi-link\">下载链接</a>\n            </div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">\n            <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"http://kitchen.alipay.com/\" class=\"bi-link\">http://kitchen.alipay.com/</a>\n          </div>\n        </td>\n      </tr>\n      <tr height=\"34px\">\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">飞冰（ice）（网页原型设计）</div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n            <div data-type=\"p\">\n              <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://alibaba.github.io/ice/iceworks\" class=\"bi-link\">下载链接</a>\n            </div>\n          </div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\">\n            <a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://alibaba.github.io/ice/\" class=\"bi-link\">https://alibaba.github.io/ice/</a>\n          </div>\n        </td>\n      </tr>\n      <tr height=\"34px\">\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\"></div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\"></div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\"></div>\n        </td>\n      </tr>\n      <tr height=\"34px\">\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\"></div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\"></div>\n        </td>\n        <td rowspan=\"1\" colSpan=\"1\">\n          <div data-type=\"p\"></div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n### <a name=\"gbzosw\"></a>__开发人员必备：__\n\n\n| 应用名称 | 软件 | 官网 |\n| --- | --- | --- |\n| [ant.design](https://ant.design/index-cn)(前端开发必备，后端自研必备) | [ant.design](https://ant.design/index-cn) | [https://ant.design/index-cn](https://ant.design/index-cn) |\n| 飞冰（ice）（网页原型设计） | [​下载链接​](https://alibaba.github.io/ice/iceworks) | ​https://alibaba.github.io/ice/​ |\n|  |  |  |\n|  |  |  |\n|  |  |  |\n\n\n",
    "body_html": "<p>每周定期更新</p><h3 id=\"w0xbni\"><a href=\"#w0xbni\"></a>产品经理必备应用：</h3><p><br /></p><table class=\"lake-table\" style=\"width: 750px;\"><colgroup><col width=\"250\"></col><col width=\"250\"></col><col width=\"250\"></col></colgroup><tbody><tr><td><p style=\"text-align: center;\">应用名称</p></td><td><p style=\"text-align: center;\">软件</p></td><td><p style=\"text-align: center;\">官网</p></td></tr><tr><td><p style=\"text-align: center;\">Sketch</p></td><td><p style=\"text-align: center;\"><span>下载链接</span></p></td><td><p><a href=\"https://www.sketchapp.com/\" target=\"_blank\">https://www.sketchapp.com/</a></p></td></tr><tr><td><p style=\"text-align: center;\">Sketch18国语言插件</p></td><td><p style=\"text-align: center;\"><a href=\"https://github.com/cute/SketchI18N/archive/master.zip\" target=\"_blank\">下载链接</a></p></td><td><p style=\"text-align: center;\"><a href=\"https://github.com/cute/SketchI18N\" target=\"_blank\">https://github.com/cute/SketchI18N</a></p></td></tr><tr><td><p style=\"text-align: center;\">Kitchen（Sketch的扩展插件，流程图产品原型图，报表图等等，高大上图）</p></td><td><p style=\"text-align: center;\"><a href=\"https://gw.alipayobjects.com/os/kitchen/42515441-04c0-47d5-9bd0-552fc70e248b/kitchen-2.10.5.zip\" target=\"_blank\">下载链接</a></p></td><td><p><a href=\"http://kitchen.alipay.com/\" target=\"_blank\">http://kitchen.alipay.com/</a></p></td></tr><tr><td><p style=\"text-align: center;\">飞冰（ice）（网页原型设计）</p></td><td><p style=\"text-align: center;\"><a href=\"https://alibaba.github.io/ice/iceworks\" target=\"_blank\">下载链接</a></p></td><td><p><a href=\"https://alibaba.github.io/ice/\" target=\"_blank\">https://alibaba.github.io/ice/</a></p></td></tr><tr><td><p><br /></p></td><td><p><br /></p></td><td><p><br /></p></td></tr><tr><td><p><br /></p></td><td><p><br /></p></td><td><p><br /></p></td></tr></tbody></table><h3 id=\"gbzosw\"><a href=\"#gbzosw\"></a><strong>开发人员必备：</strong></h3><p><br /></p><table class=\"lake-table\" style=\"width: 750px;\"><colgroup><col width=\"314\"></col><col width=\"218\"></col><col width=\"218\"></col></colgroup><tbody><tr><td><p>应用名称</p></td><td><p>软件</p></td><td><p>官网</p></td></tr><tr><td><p><a href=\"https://ant.design/index-cn\" target=\"_blank\">ant.design</a>(前端开发必备，后端自研必备)</p></td><td><p><a href=\"https://ant.design/index-cn\" target=\"_blank\">ant.design</a></p></td><td><p><a href=\"https://ant.design/index-cn\" target=\"_blank\">https://ant.design/index-cn</a></p></td></tr><tr><td><p>飞冰（ice）（网页原型设计）</p></td><td><p><a href=\"https://alibaba.github.io/ice/iceworks\" target=\"_blank\">​下载链接​</a></p></td><td><p>​https://alibaba.github.io/ice/​</p></td></tr><tr><td><p><br /></p></td><td><p><br /></p></td><td><p><br /></p></td></tr><tr><td><p><br /></p></td><td><p><br /></p></td><td><p><br /></p></td></tr><tr><td><p><br /></p></td><td><p><br /></p></td><td><p><br /></p></td></tr></tbody></table><p><br /></p>",
    "body_lake": "<!doctype lake><p>每周定期更新</p><h3 id=\"w0xbni\"><a href=\"#w0xbni\" id=\"产品经理必备应用：\"></a>产品经理必备应用：</h3><p><br /></p><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%224e2ba076%22%2C%22rows%22%3A7%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22250%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22250%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22250%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3E%E5%BA%94%E7%94%A8%E5%90%8D%E7%A7%B0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3E%E8%BD%AF%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3E%E5%AE%98%E7%BD%91%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3ESketch%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3E%3Cspan%3E%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Ca%20href%3D%5C%22https%3A%2F%2Fwww.sketchapp.com%2F%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3Ehttps%3A%2F%2Fwww.sketchapp.com%2F%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3ESketch18%E5%9B%BD%E8%AF%AD%E8%A8%80%E6%8F%92%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3E%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Fcute%2FSketchI18N%2Farchive%2Fmaster.zip%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3E%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3E%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Fcute%2FSketchI18N%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3Ehttps%3A%2F%2Fgithub.com%2Fcute%2FSketchI18N%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3EKitchen%EF%BC%88Sketch%E7%9A%84%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6%EF%BC%8C%E6%B5%81%E7%A8%8B%E5%9B%BE%E4%BA%A7%E5%93%81%E5%8E%9F%E5%9E%8B%E5%9B%BE%EF%BC%8C%E6%8A%A5%E8%A1%A8%E5%9B%BE%E7%AD%89%E7%AD%89%EF%BC%8C%E9%AB%98%E5%A4%A7%E4%B8%8A%E5%9B%BE%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3E%3Ca%20href%3D%5C%22https%3A%2F%2Fgw.alipayobjects.com%2Fos%2Fkitchen%2F42515441-04c0-47d5-9bd0-552fc70e248b%2Fkitchen-2.10.5.zip%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3E%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Ca%20href%3D%5C%22http%3A%2F%2Fkitchen.alipay.com%2F%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3Ehttp%3A%2F%2Fkitchen.alipay.com%2F%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3E%E9%A3%9E%E5%86%B0%EF%BC%88ice%EF%BC%89%EF%BC%88%E7%BD%91%E9%A1%B5%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%20style%3D%5C%22text-align%3Acenter%5C%22%3E%3Ca%20href%3D%5C%22https%3A%2F%2Falibaba.github.io%2Fice%2Ficeworks%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3E%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Ca%20href%3D%5C%22https%3A%2F%2Falibaba.github.io%2Fice%2F%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3Ehttps%3A%2F%2Falibaba.github.io%2Fice%2F%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%7D\"></card><h3 id=\"gbzosw\"><a href=\"#gbzosw\" id=\"span,[object-object],strong,[object-object],开发人员必备：\"></a><strong>开发人员必备：</strong></h3><p><br /></p><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%2269ee92e5%22%2C%22rows%22%3A6%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22314%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22218%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22218%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E5%BA%94%E7%94%A8%E5%90%8D%E7%A7%B0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E8%BD%AF%E4%BB%B6%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%AE%98%E7%BD%91%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Ca%20href%3D%5C%22https%3A%2F%2Fant.design%2Findex-cn%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3Eant.design%3C%2Fa%3E(%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87%EF%BC%8C%E5%90%8E%E7%AB%AF%E8%87%AA%E7%A0%94%E5%BF%85%E5%A4%87)%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Ca%20href%3D%5C%22https%3A%2F%2Fant.design%2Findex-cn%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3Eant.design%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Ca%20href%3D%5C%22https%3A%2F%2Fant.design%2Findex-cn%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3Ehttps%3A%2F%2Fant.design%2Findex-cn%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E9%A3%9E%E5%86%B0%EF%BC%88ice%EF%BC%89%EF%BC%88%E7%BD%91%E9%A1%B5%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Ca%20href%3D%5C%22https%3A%2F%2Falibaba.github.io%2Fice%2Ficeworks%5C%22%20target%3D%5C%22_blank%5C%22%20rel%3D%5C%22noopener%20noreferrer%20nofollow%5C%22%3E%E2%80%8B%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%E2%80%8B%3C%2Fa%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E2%80%8Bhttps%3A%2F%2Falibaba.github.io%2Fice%2F%E2%80%8B%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-30T07:48:01.000Z",
    "deleted_at": null,
    "created_at": "2018-11-30T07:25:31.000Z",
    "updated_at": "2018-11-30T07:48:01.000Z",
    "published_at": "2018-11-30T07:48:01.000Z",
    "first_published_at": null,
    "word_count": 152,
    "cover": null,
    "description": "每周定期更新产品经理必备应用：应用名称软件官网Sketch下载链接https://www.sketchapp.com/Sketch18国语言插件下载链接https://github.com/cute/SketchI18NKitchen（Sketch的扩展插件，流程图产品原型图，报表图等等，高大...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 984053,
    "slug": "ur74sk",
    "title": "大搜车笔试题",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "",
    "body_draft": "20个选择\n考逻辑题，基础java题，和一些网络相关的知识，说实话网络那题我真心不会，什么跨站请求。我就选了一个我认识的写了一下。\n3个简答题\n1个编程题\n1个开放题\n这题贼逗，问我\n\n",
    "body_html": "",
    "body_lake": "",
    "public": 1,
    "status": 0,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-23T07:37:30.000Z",
    "deleted_at": null,
    "created_at": "2018-11-20T10:50:49.000Z",
    "updated_at": "2018-11-23T07:37:30.000Z",
    "published_at": null,
    "first_published_at": null,
    "word_count": 0,
    "cover": null,
    "description": "",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 983191,
    "slug": "ge9ezn",
    "title": "无标题",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "",
    "body_draft": "",
    "body_html": "",
    "body_lake": "",
    "public": 1,
    "status": 0,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-20T07:05:31.000Z",
    "deleted_at": null,
    "created_at": "2018-11-20T07:05:31.000Z",
    "updated_at": "2018-11-20T07:05:31.000Z",
    "published_at": null,
    "first_published_at": null,
    "word_count": 0,
    "cover": null,
    "description": "",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 983080,
    "slug": "vfog53",
    "title": "Java中ArrayList和LinkedList区别",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "其实这两个数据结构蛮好玩的，都是List列表存储<br />1.ArrayList底层是数组存储，LinkedList底层是基于双向链表存储的<br />2.由于底层存储方式不同，一些特性也就由此展现。<br />3.数组存储：添加删除操作都是比较浪费存储时间的，以为每一次操作，都要进行数据的迁移。但是对于数据经常查询.get()方法的时候，Array的优势就体现了。基于链表存储，他的添加删除操作是比较快的，但查询来说就相对较慢，因为他需要遍历每一个节点，从而得倒想要的数据。\n\n```java\npackage com.zhangyi;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class compare {\n    static final int N=100000;\n    static long timeList(List list){\n        long start=System.currentTimeMillis();\n        Object o = new Object();\n        for(int i=0;i<N;i++) {\n            list.add(0, o);\n        }\n        return System.currentTimeMillis()-start;\n    }\n    static long readList(List list){\n        long start=System.currentTimeMillis();\n        for(int i=0,j=list.size();i<j;i++){\n\n        }\n        return System.currentTimeMillis()-start;\n    }\n\n    static List addList(List list){\n        Object o = new Object();\n        for(int i=0;i<N;i++) {\n            list.add(0, o);\n        }\n        return list;\n    }\n    public static void main(String[] args) {\n        System.out.println(\"ArrayList添加\"+N+\"条耗时：\"+timeList(new ArrayList()));\n        System.out.println(\"LinkedList添加\"+N+\"条耗时：\"+timeList(new LinkedList()));\n\n        List list1=addList(new ArrayList<>());\n        List list2=addList(new LinkedList<>());\n        System.out.println(\"ArrayList查找\"+N+\"条耗时：\"+readList(list1));\n        System.out.println(\"LinkedList查找\"+N+\"条耗时：\"+timeList(list2));\n    }\n}\n```\n```basic\n/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/bin/java \"-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52811:/Applications/IntelliJ IDEA.app/Contents/bin\" -Dfile.encoding=UTF-8 -classpath /opt/dev/java/Course/out/production/Course:/Users/zhangyi/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.3.1/junit-jupiter-api-5.3.1.jar:/Users/zhangyi/.m2/repository/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar:/Users/zhangyi/.m2/repository/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar:/Users/zhangyi/.m2/repository/org/junit/platform/junit-platform-commons/1.3.1/junit-platform-commons-1.3.1.jar:/Users/zhangyi/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/zhangyi/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar com.zhangyi.compare\nArrayList添加100000条耗时：523\nLinkedList添加100000条耗时：6\nArrayList查找100000条耗时：1\nLinkedList查找100000条耗时：2\n\nProcess finished with exit code 0\n```\n通过这个小程序，可以清楚的发现查找如果对于数据存储而言，如果Arraylist进行添加数据，除了在尾部添加效率相对较高，但是还要考虑扩容问题，那么LinkedList就比较划算了，而数据查找起来，ArrayList相对Linkedlist优势比较明显。所以我觉得若果在数据库读取数据的时候存储应该优先考虑将数据保存为ArrayList格式。\n",
    "body_draft": "其实这两个数据结构蛮好玩的，都是List列表存储\n1.ArrayList底层是数组存储，LinkedList底层是基于双向链表存储的\n2.由于底层存储方式不同，一些特性也就由此展现。\n3.数组存储：添加删除操作都是比较浪费存储时间的，以为每一次操作，都要进行数据的迁移。但是对于数据经常查询.get()方法的时候，Array的优势就体现了。基于链表存储，他的添加删除操作是比较快的，但查询来说就相对较慢，因为他需要遍历每一个节点，从而得倒想要的数据。\n\n```java\npackage com.zhangyi;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class compare {\n    static final int N=100000;\n    static long timeList(List list){\n        long start=System.currentTimeMillis();\n        Object o = new Object();\n        for(int i=0;i<N;i++) {\n            list.add(0, o);\n        }\n        return System.currentTimeMillis()-start;\n    }\n    static long readList(List list){\n        long start=System.currentTimeMillis();\n        for(int i=0,j=list.size();i<j;i++){\n\n        }\n        return System.currentTimeMillis()-start;\n    }\n\n    static List addList(List list){\n        Object o = new Object();\n        for(int i=0;i<N;i++) {\n            list.add(0, o);\n        }\n        return list;\n    }\n    public static void main(String[] args) {\n        System.out.println(\"ArrayList添加\"+N+\"条耗时：\"+timeList(new ArrayList()));\n        System.out.println(\"LinkedList添加\"+N+\"条耗时：\"+timeList(new LinkedList()));\n\n        List list1=addList(new ArrayList<>());\n        List list2=addList(new LinkedList<>());\n        System.out.println(\"ArrayList查找\"+N+\"条耗时：\"+readList(list1));\n        System.out.println(\"LinkedList查找\"+N+\"条耗时：\"+timeList(list2));\n    }\n}\n```\n```basic\n/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/bin/java \"-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52811:/Applications/IntelliJ IDEA.app/Contents/bin\" -Dfile.encoding=UTF-8 -classpath /opt/dev/java/Course/out/production/Course:/Users/zhangyi/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.3.1/junit-jupiter-api-5.3.1.jar:/Users/zhangyi/.m2/repository/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar:/Users/zhangyi/.m2/repository/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar:/Users/zhangyi/.m2/repository/org/junit/platform/junit-platform-commons/1.3.1/junit-platform-commons-1.3.1.jar:/Users/zhangyi/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/zhangyi/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar com.zhangyi.compare\nArrayList添加100000条耗时：523\nLinkedList添加100000条耗时：6\nArrayList查找100000条耗时：1\nLinkedList查找100000条耗时：2\n\nProcess finished with exit code 0\n```\n通过这个小程序，可以清楚的发现查找如果对于数据存储而言，如果Arraylist进行添加数据，除了在尾部添加效率相对较高，但是还要考虑扩容问题，那么LinkedList就比较划算了，而数据查找起来，ArrayList相对Linkedlist优势比较明显。所以我觉得若果在数据库读取数据的时候存储应该优先考虑将数据保存为ArrayList格式。\n",
    "body_html": "<p>其实这两个数据结构蛮好玩的，都是List列表存储</p><p>1.ArrayList底层是数组存储，LinkedList底层是基于双向链表存储的</p><p>2.由于底层存储方式不同，一些特性也就由此展现。</p><p>3.数组存储：添加删除操作都是比较浪费存储时间的，以为每一次操作，都要进行数据的迁移。但是对于数据经常查询.get()方法的时候，Array的优势就体现了。基于链表存储，他的添加删除操作是比较快的，但查询来说就相对较慢，因为他需要遍历每一个节点，从而得倒想要的数据。</p><p><br /></p><pre data-lang=\"java\"><code>package com.zhangyi;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class compare {\n    static final int N=100000;\n    static long timeList(List list){\n        long start=System.currentTimeMillis();\n        Object o = new Object();\n        for(int i=0;i&lt;N;i++) {\n            list.add(0, o);\n        }\n        return System.currentTimeMillis()-start;\n    }\n    static long readList(List list){\n        long start=System.currentTimeMillis();\n        for(int i=0,j=list.size();i&lt;j;i++){\n\n        }\n        return System.currentTimeMillis()-start;\n    }\n\n    static List addList(List list){\n        Object o = new Object();\n        for(int i=0;i&lt;N;i++) {\n            list.add(0, o);\n        }\n        return list;\n    }\n    public static void main(String[] args) {\n        System.out.println(&quot;ArrayList添加&quot;+N+&quot;条耗时：&quot;+timeList(new ArrayList()));\n        System.out.println(&quot;LinkedList添加&quot;+N+&quot;条耗时：&quot;+timeList(new LinkedList()));\n\n        List list1=addList(new ArrayList&lt;&gt;());\n        List list2=addList(new LinkedList&lt;&gt;());\n        System.out.println(&quot;ArrayList查找&quot;+N+&quot;条耗时：&quot;+readList(list1));\n        System.out.println(&quot;LinkedList查找&quot;+N+&quot;条耗时：&quot;+timeList(list2));\n    }\n}</code></pre><pre data-lang=\"basic\"><code>/Library/Java/JavaVirtualMachines/jdk-11.0.1.jdk/Contents/Home/bin/java &quot;-javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52811:/Applications/IntelliJ IDEA.app/Contents/bin&quot; -Dfile.encoding=UTF-8 -classpath /opt/dev/java/Course/out/production/Course:/Users/zhangyi/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.3.1/junit-jupiter-api-5.3.1.jar:/Users/zhangyi/.m2/repository/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar:/Users/zhangyi/.m2/repository/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar:/Users/zhangyi/.m2/repository/org/junit/platform/junit-platform-commons/1.3.1/junit-platform-commons-1.3.1.jar:/Users/zhangyi/.m2/repository/junit/junit/4.12/junit-4.12.jar:/Users/zhangyi/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar com.zhangyi.compare\nArrayList添加100000条耗时：523\nLinkedList添加100000条耗时：6\nArrayList查找100000条耗时：1\nLinkedList查找100000条耗时：2\n\nProcess finished with exit code 0</code></pre><p>通过这个小程序，可以清楚的发现查找如果对于数据存储而言，如果Arraylist进行添加数据，除了在尾部添加效率相对较高，但是还要考虑扩容问题，那么LinkedList就比较划算了，而数据查找起来，ArrayList相对Linkedlist优势比较明显。所以我觉得若果在数据库读取数据的时候存储应该优先考虑将数据保存为ArrayList格式。</p>",
    "body_lake": "<!doctype lake><p>其实这两个数据结构蛮好玩的，都是List列表存储</p><p>1.ArrayList底层是数组存储，LinkedList底层是基于双向链表存储的</p><p>2.由于底层存储方式不同，一些特性也就由此展现。</p><p>3.数组存储：添加删除操作都是比较浪费存储时间的，以为每一次操作，都要进行数据的迁移。但是对于数据经常查询.get()方法的时候，Array的优势就体现了。基于链表存储，他的添加删除操作是比较快的，但查询来说就相对较慢，因为他需要遍历每一个节点，从而得倒想要的数据。</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%221f01060b%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22package%20com.zhangyi%3B%5Cn%5Cnimport%20java.util.ArrayList%3B%5Cnimport%20java.util.LinkedList%3B%5Cnimport%20java.util.List%3B%5Cn%5Cnpublic%20class%20compare%20%7B%5Cn%20%20%20%20static%20final%20int%20N%3D100000%3B%5Cn%20%20%20%20static%20long%20timeList(List%20list)%7B%5Cn%20%20%20%20%20%20%20%20long%20start%3DSystem.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20Object%20o%20%3D%20new%20Object()%3B%5Cn%20%20%20%20%20%20%20%20for(int%20i%3D0%3Bi%3CN%3Bi%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20list.add(0%2C%20o)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20System.currentTimeMillis()-start%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20static%20long%20readList(List%20list)%7B%5Cn%20%20%20%20%20%20%20%20long%20start%3DSystem.currentTimeMillis()%3B%5Cn%20%20%20%20%20%20%20%20for(int%20i%3D0%2Cj%3Dlist.size()%3Bi%3Cj%3Bi%2B%2B)%7B%5Cn%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20System.currentTimeMillis()-start%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20static%20List%20addList(List%20list)%7B%5Cn%20%20%20%20%20%20%20%20Object%20o%20%3D%20new%20Object()%3B%5Cn%20%20%20%20%20%20%20%20for(int%20i%3D0%3Bi%3CN%3Bi%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20list.add(0%2C%20o)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20list%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5D%20args)%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22ArrayList%E6%B7%BB%E5%8A%A0%5C%22%2BN%2B%5C%22%E6%9D%A1%E8%80%97%E6%97%B6%EF%BC%9A%5C%22%2BtimeList(new%20ArrayList()))%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22LinkedList%E6%B7%BB%E5%8A%A0%5C%22%2BN%2B%5C%22%E6%9D%A1%E8%80%97%E6%97%B6%EF%BC%9A%5C%22%2BtimeList(new%20LinkedList()))%3B%5Cn%5Cn%20%20%20%20%20%20%20%20List%20list1%3DaddList(new%20ArrayList%3C%3E())%3B%5Cn%20%20%20%20%20%20%20%20List%20list2%3DaddList(new%20LinkedList%3C%3E())%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22ArrayList%E6%9F%A5%E6%89%BE%5C%22%2BN%2B%5C%22%E6%9D%A1%E8%80%97%E6%97%B6%EF%BC%9A%5C%22%2BreadList(list1))%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22LinkedList%E6%9F%A5%E6%89%BE%5C%22%2BN%2B%5C%22%E6%9D%A1%E8%80%97%E6%97%B6%EF%BC%9A%5C%22%2BtimeList(list2))%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fb8584c1%22%2C%22mode%22%3A%22basic%22%2C%22code%22%3A%22%2FLibrary%2FJava%2FJavaVirtualMachines%2Fjdk-11.0.1.jdk%2FContents%2FHome%2Fbin%2Fjava%20%5C%22-javaagent%3A%2FApplications%2FIntelliJ%20IDEA.app%2FContents%2Flib%2Fidea_rt.jar%3D52811%3A%2FApplications%2FIntelliJ%20IDEA.app%2FContents%2Fbin%5C%22%20-Dfile.encoding%3DUTF-8%20-classpath%20%2Fopt%2Fdev%2Fjava%2FCourse%2Fout%2Fproduction%2FCourse%3A%2FUsers%2Fzhangyi%2F.m2%2Frepository%2Forg%2Fjunit%2Fjupiter%2Fjunit-jupiter-api%2F5.3.1%2Fjunit-jupiter-api-5.3.1.jar%3A%2FUsers%2Fzhangyi%2F.m2%2Frepository%2Forg%2Fapiguardian%2Fapiguardian-api%2F1.0.0%2Fapiguardian-api-1.0.0.jar%3A%2FUsers%2Fzhangyi%2F.m2%2Frepository%2Forg%2Fopentest4j%2Fopentest4j%2F1.1.1%2Fopentest4j-1.1.1.jar%3A%2FUsers%2Fzhangyi%2F.m2%2Frepository%2Forg%2Fjunit%2Fplatform%2Fjunit-platform-commons%2F1.3.1%2Fjunit-platform-commons-1.3.1.jar%3A%2FUsers%2Fzhangyi%2F.m2%2Frepository%2Fjunit%2Fjunit%2F4.12%2Fjunit-4.12.jar%3A%2FUsers%2Fzhangyi%2F.m2%2Frepository%2Forg%2Fhamcrest%2Fhamcrest-core%2F1.3%2Fhamcrest-core-1.3.jar%20com.zhangyi.compare%5CnArrayList%E6%B7%BB%E5%8A%A0100000%E6%9D%A1%E8%80%97%E6%97%B6%EF%BC%9A523%5CnLinkedList%E6%B7%BB%E5%8A%A0100000%E6%9D%A1%E8%80%97%E6%97%B6%EF%BC%9A6%5CnArrayList%E6%9F%A5%E6%89%BE100000%E6%9D%A1%E8%80%97%E6%97%B6%EF%BC%9A1%5CnLinkedList%E6%9F%A5%E6%89%BE100000%E6%9D%A1%E8%80%97%E6%97%B6%EF%BC%9A2%5Cn%5CnProcess%20finished%20with%20exit%20code%200%22%7D\"></card><p>通过这个小程序，可以清楚的发现查找如果对于数据存储而言，如果Arraylist进行添加数据，除了在尾部添加效率相对较高，但是还要考虑扩容问题，那么LinkedList就比较划算了，而数据查找起来，ArrayList相对Linkedlist优势比较明显。所以我觉得若果在数据库读取数据的时候存储应该优先考虑将数据保存为ArrayList格式。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-20T07:04:07.000Z",
    "deleted_at": null,
    "created_at": "2018-11-20T06:49:16.000Z",
    "updated_at": "2018-11-20T07:04:07.000Z",
    "published_at": "2018-11-20T07:04:07.000Z",
    "first_published_at": null,
    "word_count": 653,
    "cover": null,
    "description": "其实这两个数据结构蛮好玩的，都是List列表存储1.ArrayList底层是数组存储，LinkedList底层是基于双向链表存储的2.由于底层存储方式不同，一些特性也就由此展现。3.数组存储：添加删除操作都是比较浪费存储时间的，以为每一次操作，都要进行数据的迁移。但是对于数据经常查询.get(...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 981612,
    "slug": "qiirhi",
    "title": "Python 中文速查表（Cheatsheet）",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n```python\nPython 速查表中文版\n===\n\n- 本手册是 [Python cheat sheet](http://datasciencefree.com/python.pdf) 的中文翻译版。原作者：Arianne Colton and Sean Chen(data.scientist.info@gmail.com)\n- 编译：[ucasFL](https://github.com/ucasFL)\n\n[惯例](#惯例)\n\n[获取帮助](#获取帮助)\n\n[模块](#模块)\n\n[数值类类型](#数值类类型)\n\n[数据结构](#数据结构)\n\n[函数](#函数)\n\n[控制流](#控制流)\n\n[面向对象编程](#面向对象编程)\n\n[常见字符串操作](#常见字符串操作)\n\n[异常处理](#异常处理)\n\n[对列表、字典和元组的深入理解](#对列表和字典以及元组的深入理解)\n\n## 惯例\n\n- Python 对大小写敏感；\n- Python 的索引从 0 开始（所有编程语言均如此）；\n- Python 使用空白符（制表符或空格）来缩进代码，而不是使用花括号。\n\n## 获取帮助\n\n- 获取主页帮助： `help()`\n- 获取函数帮助： `help(str.replace)`\n- 获取模块帮助： `help(re)`\n\n## 模块\n\n模块亦称库，它只是一个简单地以 `.py` 为后缀的文件。\n\n- 列出模块内容：`dir(module1)`\n- 导入模块：`import module `\n- 调用模块中的函数：`module1.func1()`\n\n**注：`import` 语句会创建一个新的名字空间，并且在该名字空间内执行 `.py` 文件中的所有语句。如果你想把模块内容导入到当前名字空间，请使用 `from module1 import *` 语句。**\n\n## 数值类类型\n\n查看变量的数据类型：`type(variable)`\n\n### 六种经常使用的数据类型\n\n1. **int/long**：过大的 `int` 类型会被自动转化为 `long` 类型。\n\n2. **float**：64 位，Python 中没有 `double` 类型。\n\n3. **bool**：真或假。\n\n4. **str**：在 Python 2 中默认以 ASCII 编码，而在 Python 3 中默认以 Unicode 编码；\n\n   - 字符串可置于单/双/三引号中；\n   - 字符串是字符的序列，因此可以像处理其他序列一样处理字符串；\n   - 特殊字符可通过 `\\` 或者前缀 `r` 实现：\n\n   ```python\n   str1 = r'this\\f?ff'\n   ```\n\n   - 字符串可通过多种方式格式化：\n\n   ```python\n   template = '%.2f %s haha $%d';\n   str1 = template % (4.88, 'hola', 2)\n   ```\n\n5. **NoneType(None)**：Python `null` 值（只有 None 对象的一个实例中存在）。\n\n   - `None` 不是一个保留关键字，而是 **NoneType** 的一个唯一实例。\n   - `None` 通常是可选函数参数的默认值：\n\n   ```python\n   def func1(a, b, c = None)\n   ```\n\n   - `None` 的常见用法：\n\n   ```python\n   if variable is None :\n   ```\n\n6. **datatime**：Python 内建的 datetime 模块提供了 `datetime`、`data` 以及 `time` 类型。\n\n   - `datetime` 组合了存储于 `date` 和 `time` 中的信息。\n\n\n```python\n#从字符串中创建 datetime\ndt1 = datetime.strptime('20091031', '%Y%m%d')\n#获取 date 对象\ndt1.date()\n#获取 time 对象\ndt1.time()\n#将 datetime 格式化为字符串\ndt1.strftime('%m/%d/%Y%H:%M')\n#更改字段值\ndt2 = dt1.replace(minute = 0, second = 30)\n#做差, diff 是一个 datetime.timedelta 对象\ndiff = dt1 - dt2\n```\n\n**注：Python 中的绝大多数对象都是可变的，只有字符串和元组例外。**\n\n## 数据结构\n\n**注：所有的 non-Get 函数调用，比如下面例子中的 `list1.sort()` 都是原地操作，即不会创建新的对象，除非特别声明。**\n\n### 元组\n\n元组是 Python 中任何类型的对象的一个一维、固定长度、不可变的序列。\n\n```python\n#创建元组\ntup1 = 4, 5, 6 \n# or\ntup1 = (6, 7, 8)\n#创建嵌套元组\ntup1 = (4, 5, 6), (7, 8)\n#将序列或迭代器转化为元组\ntuple([1, 0, 2])\n#连接元组\ntup1 + tup2\n#解包元组\na, b, c = tup1\n```\n\n元组应用：\n\n```python\n#交换两个变量的值\na, b = b, a\n```\n\n### 列表\n\n列表是 Python 中任何类型的对象的一个一维、非固定长度、可变（比如内容可以被修改）的序列。\n\n```python\n#创建列表\nlist1 = [1, 'a', 3]\n#or\nlist1 = list(tup1)\n#连接列表\nlist1 + list2 \n#or\nlist1.extend(list2)\n#追加到列表的末尾\nlist1.append('b')\n#插入指定位置\nlist1.insert(PosIndex, 'a')\n#反向插入，即弹出给定位置的值/删除\nValueAtIdx = list1.pop(PosIndex)\n#移除列表中的第一个值, a 必须是列表中第一个值\nlist1.remove('a')\n#检查成员资格\n3 in list1 => True or False\n#对列表进行排序\nlist1.sort()\n#按特定方式排序\nlist1.sort(key = len) # 按长度排序\n```\n\n- 使用 + 连接列表会有比较大的开支，因为这个过程中会创建一个新的列表，然后复制对象。因此，使用 `extend()` 是更明智的选择；\n- `insert` 和 `append` 相比会有更大的开支（时间/空间）；\n- 在列表中检查是否包含一个值会比在字典和集合中慢很多，因为前者需要进行线性扫描，而后者是基于哈希表的，所以只需要花费常数时间。\n\n#### 内建的 `bisect` 模块\n\n- 对一个排序好的列表进行二分查找或插入；\n- `bisect.bisect`找到元素在列表中的位置，`bisect.insort`将元素插入到相应位置。用法：\n\n```python\nimport bisect\nlist1 = list(range(10))\n#找到 5 在 list1 中的位置，从 1 开始，因此 position = index + 1\nbisect.bisect(list1, 5)\n#将 3.5 插入 list1 中合适位置\nbisect.insort(list1, 3.5)\n```\n\n**注：`bisect` 模块中的函数并不会去检查列表是否排序好，因为这会花费很多时间。所以，对未排序好的列表使用这些函数也不会报错，但可能会返回不正确的结果。**\n\n### 针对序列类型的切片\n\n序列类型包括 `str`、`array`、`tuple`、`list` 等。\n\n用法：\n\n```python\nlist1[start:stop]\n#如果使用 step\nlist1(start:stop:step)\n```\n\n**注：切片结果包含 `start` 索引，但不包含 `stop` 索引；`start/stop` 索引可以省略，如果省略，则默认为序列从开始到结束，如 `list1 == list1[:]` 。**\n\n`step` 的应用：\n\n```python\n#取出奇数位置的元素\nlist1[::2]\n#反转字符串\nstr1[::-1]\n```\n\n### 字典（哈希映射）\n\n```python\n#创建字典\ndict1 = {'key1': 'value1', 2: [3,2]}\n#从序列创建字典\ndict(zip(KeyList, ValueList))\n#获取/设置/插入元素\ndict1['key1']\ndict1['key1'] = 'NewValue'\n#get 提供默认值\ndict1.get('key1', DefaultValue)\n#检查键是否存在\n'key1' in dict1\n#获取键列表\ndict1.keys()\n#获取值列表\ndict1.values()\n#更新值\ndict1.update(dict2)#dict1 的值被 dict2 替换\n```\n\n- 如果键不存在，则会出现 `KeyError Exception` 。\n- 当键不存在时，如果 `get()`不提供默认值则会返回 `None` 。\n- 以相同的顺序返回键列表和值列表，但顺序不是特定的，又称极大可能非排序。\n\n#### 有效字典键类型\n\n- 键必须是不可变的，比如标量类型(`int`、`float`、`string`)或者元组（元组中的所有对象也必须是不可变的）。\n- 这儿涉及的技术术语是 `hashability`。可以用函数 `hash()`来检查一个对象是否是可哈希的，比如 `hash('This is a string')` 会返回一个哈希值，而 `hash([1,2])` 则会报错（不可哈希）。\n\n### 集合\n\n- 一个集合是一些无序且唯一的元素的聚集；\n- 你可以把它看成只有键的字典；\n\n```python\n#创建集合\nset([3, 6, 3])\n#or\n{3, 6, 3}\n#子集测试\nset1.issubset(set2)\n#超集测试\nset1.issuperset(set2)\n#测试两个集合中的元素是否完全相同\nset1 == set2\n```\n\n#### 集合操作\n\n- 并（又称或）：`set1 | set2`\n- 交（又称与）：`set1 & set2`\n- 差：`set1 - set2`\n- 对称差（又称异或）：`set1 ^ set2`\n\n## 函数\n\nPython 的函数参数传递是通过**引用传递**。\n\n- 基本形式\n\n```python\ndef func1(posArg1, keywordArg1 = 1, ..)\n```\n\n**注**\n\n- 关键字参数必须跟在位置参数的后面；\n- 默认情况下，Python 不会“延迟求值”，表达式的值会立刻求出来。\n\n### 函数调用机制\n\n- 所有函数均位于模块内部作用域。见“模块”部分。\n- 在调用函数时，参数被打包成一个元组和一个字典，函数接收一个元组 `args` 和一个字典 `kwargs`，然后在函数内部解包。\n\n\n“函数是对象”的常见用法：\n\n```python\ndef func1(ops = [str.strip, user_define_func, ..], ..):\n  for function in ops:\n    value = function(value)\n```\n\n### 返回值\n\n- 如果函数末尾没有 `return` 语句，则不会返回任何东西。\n- 如果有多个返回值则通过一个元组来实现。\n\n```python\nreturn (value1, value2)\nvalue1, value2 = func1(..)\n```\n\n### 匿名函数（又称 LAMBDA 函数）\n\n- 什么是匿名函数？\n\n匿名函数是一个只包含一条语句的简单函数。\n\n```python\nlambda x : x * 2\n#def func1(x) : return x * 2\n```\n\n- 匿名函数的应用：'curring'，又称利用已存在函数的部分参数来派生新的函数。\n\n```python\nma60 = lambda x : pd.rolling_mean(x, 60)\n```\n\n### 一些有用的函数（针对数据结构）\n\n- `enumerate()` 返回一个序列`(i, value)`元组，`i` 是当前 `item` 的索引。\n\n```python\nfor i, value in enumerate(collection):\n```\n\n应用：创建一个序列中值与其在序列中的位置的字典映射（假设每一个值都是唯一的）。\n\n- `sort()`可以从任意序列中返回一个排序好的序列。\n\n```python\nsorted([2, 1, 3]) => [1, 2, 3]\n```\n\n应用：\n\n```python\nsorted(set('abc bcd')) => [' ',\n'a', 'b', 'c', 'd']\n# 返回一个字符串排序后无重复的字母序列\n```\n\n- `zip()`函数可以把许多列表、元组或其他序列的元素配对起来创建一系列的元组。\n\n```python\nzip(seq1, seq2) => [('seq1_1', 'seq2_1'), (..), ..]\n```\n\n1. `zip()`可以接收任意数量的序列作为参数，但是产生的元素的数目取决于最短的序列。\n\n应用：多个序列同时迭代：\n\n```python \nfor i, (a, b) in enumerate(zip(seq1, seq2)):\n```\n\n2. `unzip`：另一种思考方式是把一些行转化为一些列：\n\n```python\nseq1, seq2 = zip(zipOutput)\n```\n\n- `reversed()` 将一个序列的元素以逆序迭代。\n\n```python \nlist(reversed(range(10))) \n```\n\n**`reversed()` 会返回一个迭代器，`list()` 使之成为一个列表。**\n\n## 控制流\n\n- 用于 `if-else` 条件中的操作符：\n\n```python\n#检查两个变量是否是相同的对象\nvar1 is var2\n#检查两个变量是否是不同的对象\nvar1 is not var2\n#检查两个变量的值是否相等\nvar1 == var2\n```\n\n**注：Python 中使用 `and`、`or`、`not` 来组合条件，而不是使用 `&&`、`||`、`!` 。**\n\n- `for`循环的常见用法：\n\n```python \n#可迭代对象（list、tuple）或迭代器\nfor element in iterator:\n#如果元素是可以解包的序列\nfor a, b, c in iterator:\n```\n\n- `pass`：无操作语句，在不需要进行任何操作的块中使用。\n- 三元表达式，又称简洁的 `if-else`，基本形式：\n\n```python\nvalue = true-expr if condition else false-expr\n```\n\n- Python 中没有 `switch/case` 语句，请使用 `if/elif`。\n\n## 面向对象编程\n\n- **对象**是 Python 中所有类型的根。\n- 万物（数字、字符串、函数、类、模块等）皆为对象，每个对象均有一个类型（type）。对象变量是一个指向变量在内存中位置的指针。\n- 所有对象均为**引用计数**。\n\n```python\nsys.getrefcount(5) => x\na = 5, b = a\n#上式会在等号的右边创建一个对象的引用，因此 a 和 b 均指向 5\nsys.getrefcount(5)\n=> x + 2\ndel(a); sys.getrefcount(5) => x + 1\n```\n\n- 类的基本形式：\n\n```python \nclass MyObject(object):\n  # 'self' 等价于 Java/C++ 中的 'this'\n  def __init__(self, name):\n    self.name = name\n  def memberFunc1(self, arg1):\n      ..\n  @staticmethod\n  def classFunc2(arg1):\n    ..\nobj1 = MyObject('name1')\nobj1.memberFunc1('a')\nMyObject.classFunc2('b')\n```\n\n- 有用的交互式工具：\n\n```python\ndir(variable1) #列出对象的所有可用方法\n```\n\n## 常见字符串操作\n\n```python\n#通过分隔符连接列表/元组\n', '.join([ 'v1', 'v2', 'v3']) => 'v1, v2, v3'\n\n#格式化字符串\nstring1 = 'My name is {0}　{name}'\nnewString1 = string1.format('Sean', name =　'Chen')\n\n#分裂字符串\nsep = '-';\nstringList1 =　string1.split(sep)\n\n#获取子串\nstart = 1;\nstring1[start:8]\n\n#补 '0' 向右对齐字符串\nmonth = '5';\nmonth.zfill(2) => '05'\nmonth = '12';\nmonth.zfill(2) => '12'\nmonth.zfill(3) => '012'\n```\n对列表和字典以及元组的深入理解\n## 异常处理\n\n- 基本形式：\n\n```python\ntry:\n  ..\nexcept ValueError as e:\n  print e\nexcept (TypeError, AnotherError):\n  ..\nexcept:\n  ..\nfinally:\n  .. # 清理，比如 close db;\n```\n\n- 手动引发异常：\n\n```python\nraise AssertionError # 断言失败\nraise SystemExit\n# 请求程序退出\nraise RuntimeError('错误信息 :..')\n```\n\n## 对列表和字典以及元组的深入理解\n\n语法糖（syntactic sugar）会使代码变得更加易读易写。\n\n### 对列表的理解\n\n将一些元素通过一个简短的语句传入一个过滤器进行过滤和转化，然后可以组成一个新的列表。\n\n```python\n#基本形式\n[expr for val in collection if condition]\n#ShortCut\nresult = []\nfor val in collection:\n  if condition:\n    result.append(expr)\n```\n\n可以省略过滤条件，只留下表达式。\n\n### 对字典的理解\n\n基本形式：\n\n```python\n{key-expr : value-expr for value in collection if condition}\n```\n\n### 对集合的理解\n\n基本形式：和列表一样，只是应该使用 `()` 而不是 `[]` 。\n\n### 嵌套列表\n\n基本形式：\n\n```python\n[expr for val in collection for innerVal in val if condition]\n```\n```\n\n",
    "body_draft": "\n  Python 速查表中文版\n  ===\n  \n  - 本手册是 [Python cheat sheet](http://datasciencefree.com/python.pdf) 的中文翻译版。原作者：Arianne Colton and Sean Chen(data.scientist.info@gmail.com)\n  - 编译：[ucasFL](https://github.com/ucasFL)\n  \n  [惯例](#惯例)\n  \n  [获取帮助](#获取帮助)\n  \n  [模块](#模块)\n  \n  [数值类类型](#数值类类型)\n  \n  [数据结构](#数据结构)\n  \n  [函数](#函数)\n  \n  [控制流](#控制流)\n  \n  [面向对象编程](#面向对象编程)\n  \n  [常见字符串操作](#常见字符串操作)\n  \n  [异常处理](#异常处理)\n  \n  [对列表、字典和元组的深入理解](#对列表和字典以及元组的深入理解)\n  \n  ## 惯例\n  \n  - Python 对大小写敏感；\n  - Python 的索引从 0 开始（所有编程语言均如此）；\n  - Python 使用空白符（制表符或空格）来缩进代码，而不是使用花括号。\n  \n  ## 获取帮助\n  \n  - 获取主页帮助： `help()`\n  - 获取函数帮助： `help(str.replace)`\n  - 获取模块帮助： `help(re)`\n  \n  ## 模块\n  \n  模块亦称库，它只是一个简单地以 `.py` 为后缀的文件。\n  \n  - 列出模块内容：`dir(module1)`\n  - 导入模块：`import module `\n  - 调用模块中的函数：`module1.func1()`\n  \n  **注：`import` 语句会创建一个新的名字空间，并且在该名字空间内执行 `.py` 文件中的所有语句。如果你想把模块内容导入到当前名字空间，请使用 `from module1 import *` 语句。**\n  \n  ## 数值类类型\n  \n  查看变量的数据类型：`type(variable)`\n  \n  ### 六种经常使用的数据类型\n  \n  1. **int/long**：过大的 `int` 类型会被自动转化为 `long` 类型。\n  \n  2. **float**：64 位，Python 中没有 `double` 类型。\n  \n  3. **bool**：真或假。\n  \n  4. **str**：在 Python 2 中默认以 ASCII 编码，而在 Python 3 中默认以 Unicode 编码；\n  \n     - 字符串可置于单/双/三引号中；\n     - 字符串是字符的序列，因此可以像处理其他序列一样处理字符串；\n     - 特殊字符可通过 `\\` 或者前缀 `r` 实现：\n  \n     ```python\n     str1 = r'this\\f?ff'\n     ```\n  \n     - 字符串可通过多种方式格式化：\n  \n     ```python\n     template = '%.2f %s haha $%d';\n     str1 = template % (4.88, 'hola', 2)\n     ```\n  \n  5. **NoneType(None)**：Python `null` 值（只有 None 对象的一个实例中存在）。\n  \n     - `None` 不是一个保留关键字，而是 **NoneType** 的一个唯一实例。\n     - `None` 通常是可选函数参数的默认值：\n  \n     ```python\n     def func1(a, b, c = None)\n     ```\n  \n     - `None` 的常见用法：\n  \n     ```python\n     if variable is None :\n     ```\n  \n  6. **datatime**：Python 内建的 datetime 模块提供了 `datetime`、`data` 以及 `time` 类型。\n  \n     - `datetime` 组合了存储于 `date` 和 `time` 中的信息。\n  \n  \n  ```python\n  #从字符串中创建 datetime\n  dt1 = datetime.strptime('20091031', '%Y%m%d')\n  #获取 date 对象\n  dt1.date()\n  #获取 time 对象\n  dt1.time()\n  #将 datetime 格式化为字符串\n  dt1.strftime('%m/%d/%Y%H:%M')\n  #更改字段值\n  dt2 = dt1.replace(minute = 0, second = 30)\n  #做差, diff 是一个 datetime.timedelta 对象\n  diff = dt1 - dt2\n  ```\n  \n  **注：Python 中的绝大多数对象都是可变的，只有字符串和元组例外。**\n  \n  ## 数据结构\n  \n  **注：所有的 non-Get 函数调用，比如下面例子中的 `list1.sort()` 都是原地操作，即不会创建新的对象，除非特别声明。**\n  \n  ### 元组\n  \n  元组是 Python 中任何类型的对象的一个一维、固定长度、不可变的序列。\n  \n  ```python\n  #创建元组\n  tup1 = 4, 5, 6 \n  # or\n  tup1 = (6, 7, 8)\n  #创建嵌套元组\n  tup1 = (4, 5, 6), (7, 8)\n  #将序列或迭代器转化为元组\n  tuple([1, 0, 2])\n  #连接元组\n  tup1 + tup2\n  #解包元组\n  a, b, c = tup1\n  ```\n  \n  元组应用：\n  \n  ```python\n  #交换两个变量的值\n  a, b = b, a\n  ```\n  \n  ### 列表\n  \n  列表是 Python 中任何类型的对象的一个一维、非固定长度、可变（比如内容可以被修改）的序列。\n  \n  ```python\n  #创建列表\n  list1 = [1, 'a', 3]\n  #or\n  list1 = list(tup1)\n  #连接列表\n  list1 + list2 \n  #or\n  list1.extend(list2)\n  #追加到列表的末尾\n  list1.append('b')\n  #插入指定位置\n  list1.insert(PosIndex, 'a')\n  #反向插入，即弹出给定位置的值/删除\n  ValueAtIdx = list1.pop(PosIndex)\n  #移除列表中的第一个值, a 必须是列表中第一个值\n  list1.remove('a')\n  #检查成员资格\n  3 in list1 => True or False\n  #对列表进行排序\n  list1.sort()\n  #按特定方式排序\n  list1.sort(key = len) # 按长度排序\n  ```\n  \n  - 使用 + 连接列表会有比较大的开支，因为这个过程中会创建一个新的列表，然后复制对象。因此，使用 `extend()` 是更明智的选择；\n  - `insert` 和 `append` 相比会有更大的开支（时间/空间）；\n  - 在列表中检查是否包含一个值会比在字典和集合中慢很多，因为前者需要进行线性扫描，而后者是基于哈希表的，所以只需要花费常数时间。\n  \n  #### 内建的 `bisect` 模块\n  \n  - 对一个排序好的列表进行二分查找或插入；\n  - `bisect.bisect`找到元素在列表中的位置，`bisect.insort`将元素插入到相应位置。用法：\n  \n  ```python\n  import bisect\n  list1 = list(range(10))\n  #找到 5 在 list1 中的位置，从 1 开始，因此 position = index + 1\n  bisect.bisect(list1, 5)\n  #将 3.5 插入 list1 中合适位置\n  bisect.insort(list1, 3.5)\n  ```\n  \n  **注：`bisect` 模块中的函数并不会去检查列表是否排序好，因为这会花费很多时间。所以，对未排序好的列表使用这些函数也不会报错，但可能会返回不正确的结果。**\n  \n  ### 针对序列类型的切片\n  \n  序列类型包括 `str`、`array`、`tuple`、`list` 等。\n  \n  用法：\n  \n  ```python\n  list1[start:stop]\n  #如果使用 step\n  list1(start:stop:step)\n  ```\n  \n  **注：切片结果包含 `start` 索引，但不包含 `stop` 索引；`start/stop` 索引可以省略，如果省略，则默认为序列从开始到结束，如 `list1 == list1[:]` 。**\n  \n  `step` 的应用：\n  \n  ```python\n  #取出奇数位置的元素\n  list1[::2]\n  #反转字符串\n  str1[::-1]\n  ```\n  \n  ### 字典（哈希映射）\n  \n  ```python\n  #创建字典\n  dict1 = {'key1': 'value1', 2: [3,2]}\n  #从序列创建字典\n  dict(zip(KeyList, ValueList))\n  #获取/设置/插入元素\n  dict1['key1']\n  dict1['key1'] = 'NewValue'\n  #get 提供默认值\n  dict1.get('key1', DefaultValue)\n  #检查键是否存在\n  'key1' in dict1\n  #获取键列表\n  dict1.keys()\n  #获取值列表\n  dict1.values()\n  #更新值\n  dict1.update(dict2)#dict1 的值被 dict2 替换\n  ```\n  \n  - 如果键不存在，则会出现 `KeyError Exception` 。\n  - 当键不存在时，如果 `get()`不提供默认值则会返回 `None` 。\n  - 以相同的顺序返回键列表和值列表，但顺序不是特定的，又称极大可能非排序。\n  \n  #### 有效字典键类型\n  \n  - 键必须是不可变的，比如标量类型(`int`、`float`、`string`)或者元组（元组中的所有对象也必须是不可变的）。\n  - 这儿涉及的技术术语是 `hashability`。可以用函数 `hash()`来检查一个对象是否是可哈希的，比如 `hash('This is a string')` 会返回一个哈希值，而 `hash([1,2])` 则会报错（不可哈希）。\n  \n  ### 集合\n  \n  - 一个集合是一些无序且唯一的元素的聚集；\n  - 你可以把它看成只有键的字典；\n  \n  ```python\n  #创建集合\n  set([3, 6, 3])\n  #or\n  {3, 6, 3}\n  #子集测试\n  set1.issubset(set2)\n  #超集测试\n  set1.issuperset(set2)\n  #测试两个集合中的元素是否完全相同\n  set1 == set2\n  ```\n  \n  #### 集合操作\n  \n  - 并（又称或）：`set1 | set2`\n  - 交（又称与）：`set1 & set2`\n  - 差：`set1 - set2`\n  - 对称差（又称异或）：`set1 ^ set2`\n  \n  ## 函数\n  \n  Python 的函数参数传递是通过**引用传递**。\n  \n  - 基本形式\n  \n  ```python\n  def func1(posArg1, keywordArg1 = 1, ..)\n  ```\n  \n  **注**\n  \n  - 关键字参数必须跟在位置参数的后面；\n  - 默认情况下，Python 不会“延迟求值”，表达式的值会立刻求出来。\n  \n  ### 函数调用机制\n  \n  - 所有函数均位于模块内部作用域。见“模块”部分。\n  - 在调用函数时，参数被打包成一个元组和一个字典，函数接收一个元组 `args` 和一个字典 `kwargs`，然后在函数内部解包。\n  \n  \n  “函数是对象”的常见用法：\n  \n  ```python\n  def func1(ops = [str.strip, user_define_func, ..], ..):\n    for function in ops:\n      value = function(value)\n  ```\n  \n  ### 返回值\n  \n  - 如果函数末尾没有 `return` 语句，则不会返回任何东西。\n  - 如果有多个返回值则通过一个元组来实现。\n  \n  ```python\n  return (value1, value2)\n  value1, value2 = func1(..)\n  ```\n  \n  ### 匿名函数（又称 LAMBDA 函数）\n  \n  - 什么是匿名函数？\n  \n  匿名函数是一个只包含一条语句的简单函数。\n  \n  ```python\n  lambda x : x * 2\n  #def func1(x) : return x * 2\n  ```\n  \n  - 匿名函数的应用：'curring'，又称利用已存在函数的部分参数来派生新的函数。\n  \n  ```python\n  ma60 = lambda x : pd.rolling_mean(x, 60)\n  ```\n  \n  ### 一些有用的函数（针对数据结构）\n  \n  - `enumerate()` 返回一个序列`(i, value)`元组，`i` 是当前 `item` 的索引。\n  \n  ```python\n  for i, value in enumerate(collection):\n  ```\n  \n  应用：创建一个序列中值与其在序列中的位置的字典映射（假设每一个值都是唯一的）。\n  \n  - `sort()`可以从任意序列中返回一个排序好的序列。\n  \n  ```python\n  sorted([2, 1, 3]) => [1, 2, 3]\n  ```\n  \n  应用：\n  \n  ```python\n  sorted(set('abc bcd')) => [' ',\n  'a', 'b', 'c', 'd']\n  # 返回一个字符串排序后无重复的字母序列\n  ```\n  \n  - `zip()`函数可以把许多列表、元组或其他序列的元素配对起来创建一系列的元组。\n  \n  ```python\n  zip(seq1, seq2) => [('seq1_1', 'seq2_1'), (..), ..]\n  ```\n  \n  1. `zip()`可以接收任意数量的序列作为参数，但是产生的元素的数目取决于最短的序列。\n  \n  应用：多个序列同时迭代：\n  \n  ```python \n  for i, (a, b) in enumerate(zip(seq1, seq2)):\n  ```\n  \n  2. `unzip`：另一种思考方式是把一些行转化为一些列：\n  \n  ```python\n  seq1, seq2 = zip(zipOutput)\n  ```\n  \n  - `reversed()` 将一个序列的元素以逆序迭代。\n  \n  ```python \n  list(reversed(range(10))) \n  ```\n  \n  **`reversed()` 会返回一个迭代器，`list()` 使之成为一个列表。**\n  \n  ## 控制流\n  \n  - 用于 `if-else` 条件中的操作符：\n  \n  ```python\n  #检查两个变量是否是相同的对象\n  var1 is var2\n  #检查两个变量是否是不同的对象\n  var1 is not var2\n  #检查两个变量的值是否相等\n  var1 == var2\n  ```\n  \n  **注：Python 中使用 `and`、`or`、`not` 来组合条件，而不是使用 `&&`、`||`、`!` 。**\n  \n  - `for`循环的常见用法：\n  \n  ```python \n  #可迭代对象（list、tuple）或迭代器\n  for element in iterator:\n  #如果元素是可以解包的序列\n  for a, b, c in iterator:\n  ```\n  \n  - `pass`：无操作语句，在不需要进行任何操作的块中使用。\n  - 三元表达式，又称简洁的 `if-else`，基本形式：\n  \n  ```python\n  value = true-expr if condition else false-expr\n  ```\n  \n  - Python 中没有 `switch/case` 语句，请使用 `if/elif`。\n  \n  ## 面向对象编程\n  \n  - **对象**是 Python 中所有类型的根。\n  - 万物（数字、字符串、函数、类、模块等）皆为对象，每个对象均有一个类型（type）。对象变量是一个指向变量在内存中位置的指针。\n  - 所有对象均为**引用计数**。\n  \n  ```python\n  sys.getrefcount(5) => x\n  a = 5, b = a\n  #上式会在等号的右边创建一个对象的引用，因此 a 和 b 均指向 5\n  sys.getrefcount(5)\n  => x + 2\n  del(a); sys.getrefcount(5) => x + 1\n  ```\n  \n  - 类的基本形式：\n  \n  ```python \n  class MyObject(object):\n    # 'self' 等价于 Java/C++ 中的 'this'\n    def __init__(self, name):\n      self.name = name\n    def memberFunc1(self, arg1):\n        ..\n    @staticmethod\n    def classFunc2(arg1):\n      ..\n  obj1 = MyObject('name1')\n  obj1.memberFunc1('a')\n  MyObject.classFunc2('b')\n  ```\n  \n  - 有用的交互式工具：\n  \n  ```python\n  dir(variable1) #列出对象的所有可用方法\n  ```\n  \n  ## 常见字符串操作\n  \n  ```python\n  #通过分隔符连接列表/元组\n  ', '.join([ 'v1', 'v2', 'v3']) => 'v1, v2, v3'\n  \n  #格式化字符串\n  string1 = 'My name is {0}　{name}'\n  newString1 = string1.format('Sean', name =　'Chen')\n  \n  #分裂字符串\n  sep = '-';\n  stringList1 =　string1.split(sep)\n  \n  #获取子串\n  start = 1;\n  string1[start:8]\n  \n  #补 '0' 向右对齐字符串\n  month = '5';\n  month.zfill(2) => '05'\n  month = '12';\n  month.zfill(2) => '12'\n  month.zfill(3) => '012'\n  ```\n  对列表和字典以及元组的深入理解\n  ## 异常处理\n  \n  - 基本形式：\n  \n  ```python\n  try:\n    ..\n  except ValueError as e:\n    print e\n  except (TypeError, AnotherError):\n    ..\n  except:\n    ..\n  finally:\n    .. # 清理，比如 close db;\n  ```\n  \n  - 手动引发异常：\n  \n  ```python\n  raise AssertionError # 断言失败\n  raise SystemExit\n  # 请求程序退出\n  raise RuntimeError('错误信息 :..')\n  ```\n  \n  ## 对列表和字典以及元组的深入理解\n  \n  语法糖（syntactic sugar）会使代码变得更加易读易写。\n  \n  ### 对列表的理解\n  \n  将一些元素通过一个简短的语句传入一个过滤器进行过滤和转化，然后可以组成一个新的列表。\n  \n  ```python\n  #基本形式\n  [expr for val in collection if condition]\n  #ShortCut\n  result = []\n  for val in collection:\n    if condition:\n      result.append(expr)\n  ```\n  \n  可以省略过滤条件，只留下表达式。\n  \n  ### 对字典的理解\n  \n  基本形式：\n  \n  ```python\n  {key-expr : value-expr for value in collection if condition}\n  ```\n  \n  ### 对集合的理解\n  \n  基本形式：和列表一样，只是应该使用 `()` 而不是 `[]` 。\n  \n  ### 嵌套列表\n  \n  基本形式：\n  \n  ```python\n  [expr for val in collection for innerVal in val if condition]\n  ```\n  \n  \n\n",
    "body_html": "<p><br /></p><pre data-lang=\"python\"><code>Python 速查表中文版\n===\n\n- 本手册是 [Python cheat sheet](http://datasciencefree.com/python.pdf) 的中文翻译版。原作者：Arianne Colton and Sean Chen(data.scientist.info@gmail.com)\n- 编译：[ucasFL](https://github.com/ucasFL)\n\n[惯例](#惯例)\n\n[获取帮助](#获取帮助)\n\n[模块](#模块)\n\n[数值类类型](#数值类类型)\n\n[数据结构](#数据结构)\n\n[函数](#函数)\n\n[控制流](#控制流)\n\n[面向对象编程](#面向对象编程)\n\n[常见字符串操作](#常见字符串操作)\n\n[异常处理](#异常处理)\n\n[对列表、字典和元组的深入理解](#对列表和字典以及元组的深入理解)\n\n## 惯例\n\n- Python 对大小写敏感；\n- Python 的索引从 0 开始（所有编程语言均如此）；\n- Python 使用空白符（制表符或空格）来缩进代码，而不是使用花括号。\n\n## 获取帮助\n\n- 获取主页帮助： `help()`\n- 获取函数帮助： `help(str.replace)`\n- 获取模块帮助： `help(re)`\n\n## 模块\n\n模块亦称库，它只是一个简单地以 `.py` 为后缀的文件。\n\n- 列出模块内容：`dir(module1)`\n- 导入模块：`import module `\n- 调用模块中的函数：`module1.func1()`\n\n**注：`import` 语句会创建一个新的名字空间，并且在该名字空间内执行 `.py` 文件中的所有语句。如果你想把模块内容导入到当前名字空间，请使用 `from module1 import *` 语句。**\n\n## 数值类类型\n\n查看变量的数据类型：`type(variable)`\n\n### 六种经常使用的数据类型\n\n1. **int/long**：过大的 `int` 类型会被自动转化为 `long` 类型。\n\n2. **float**：64 位，Python 中没有 `double` 类型。\n\n3. **bool**：真或假。\n\n4. **str**：在 Python 2 中默认以 ASCII 编码，而在 Python 3 中默认以 Unicode 编码；\n\n   - 字符串可置于单/双/三引号中；\n   - 字符串是字符的序列，因此可以像处理其他序列一样处理字符串；\n   - 特殊字符可通过 `\\` 或者前缀 `r` 实现：\n\n   ```python\n   str1 = r'this\\f?ff'\n   ```\n\n   - 字符串可通过多种方式格式化：\n\n   ```python\n   template = '%.2f %s haha $%d';\n   str1 = template % (4.88, 'hola', 2)\n   ```\n\n5. **NoneType(None)**：Python `null` 值（只有 None 对象的一个实例中存在）。\n\n   - `None` 不是一个保留关键字，而是 **NoneType** 的一个唯一实例。\n   - `None` 通常是可选函数参数的默认值：\n\n   ```python\n   def func1(a, b, c = None)\n   ```\n\n   - `None` 的常见用法：\n\n   ```python\n   if variable is None :\n   ```\n\n6. **datatime**：Python 内建的 datetime 模块提供了 `datetime`、`data` 以及 `time` 类型。\n\n   - `datetime` 组合了存储于 `date` 和 `time` 中的信息。\n\n\n```python\n#从字符串中创建 datetime\ndt1 = datetime.strptime('20091031', '%Y%m%d')\n#获取 date 对象\ndt1.date()\n#获取 time 对象\ndt1.time()\n#将 datetime 格式化为字符串\ndt1.strftime('%m/%d/%Y%H:%M')\n#更改字段值\ndt2 = dt1.replace(minute = 0, second = 30)\n#做差, diff 是一个 datetime.timedelta 对象\ndiff = dt1 - dt2\n```\n\n**注：Python 中的绝大多数对象都是可变的，只有字符串和元组例外。**\n\n## 数据结构\n\n**注：所有的 non-Get 函数调用，比如下面例子中的 `list1.sort()` 都是原地操作，即不会创建新的对象，除非特别声明。**\n\n### 元组\n\n元组是 Python 中任何类型的对象的一个一维、固定长度、不可变的序列。\n\n```python\n#创建元组\ntup1 = 4, 5, 6 \n# or\ntup1 = (6, 7, 8)\n#创建嵌套元组\ntup1 = (4, 5, 6), (7, 8)\n#将序列或迭代器转化为元组\ntuple([1, 0, 2])\n#连接元组\ntup1 + tup2\n#解包元组\na, b, c = tup1\n```\n\n元组应用：\n\n```python\n#交换两个变量的值\na, b = b, a\n```\n\n### 列表\n\n列表是 Python 中任何类型的对象的一个一维、非固定长度、可变（比如内容可以被修改）的序列。\n\n```python\n#创建列表\nlist1 = [1, 'a', 3]\n#or\nlist1 = list(tup1)\n#连接列表\nlist1 + list2 \n#or\nlist1.extend(list2)\n#追加到列表的末尾\nlist1.append('b')\n#插入指定位置\nlist1.insert(PosIndex, 'a')\n#反向插入，即弹出给定位置的值/删除\nValueAtIdx = list1.pop(PosIndex)\n#移除列表中的第一个值, a 必须是列表中第一个值\nlist1.remove('a')\n#检查成员资格\n3 in list1 =&gt; True or False\n#对列表进行排序\nlist1.sort()\n#按特定方式排序\nlist1.sort(key = len) # 按长度排序\n```\n\n- 使用 + 连接列表会有比较大的开支，因为这个过程中会创建一个新的列表，然后复制对象。因此，使用 `extend()` 是更明智的选择；\n- `insert` 和 `append` 相比会有更大的开支（时间/空间）；\n- 在列表中检查是否包含一个值会比在字典和集合中慢很多，因为前者需要进行线性扫描，而后者是基于哈希表的，所以只需要花费常数时间。\n\n#### 内建的 `bisect` 模块\n\n- 对一个排序好的列表进行二分查找或插入；\n- `bisect.bisect`找到元素在列表中的位置，`bisect.insort`将元素插入到相应位置。用法：\n\n```python\nimport bisect\nlist1 = list(range(10))\n#找到 5 在 list1 中的位置，从 1 开始，因此 position = index + 1\nbisect.bisect(list1, 5)\n#将 3.5 插入 list1 中合适位置\nbisect.insort(list1, 3.5)\n```\n\n**注：`bisect` 模块中的函数并不会去检查列表是否排序好，因为这会花费很多时间。所以，对未排序好的列表使用这些函数也不会报错，但可能会返回不正确的结果。**\n\n### 针对序列类型的切片\n\n序列类型包括 `str`、`array`、`tuple`、`list` 等。\n\n用法：\n\n```python\nlist1[start:stop]\n#如果使用 step\nlist1(start:stop:step)\n```\n\n**注：切片结果包含 `start` 索引，但不包含 `stop` 索引；`start/stop` 索引可以省略，如果省略，则默认为序列从开始到结束，如 `list1 == list1[:]` 。**\n\n`step` 的应用：\n\n```python\n#取出奇数位置的元素\nlist1[::2]\n#反转字符串\nstr1[::-1]\n```\n\n### 字典（哈希映射）\n\n```python\n#创建字典\ndict1 = {'key1': 'value1', 2: [3,2]}\n#从序列创建字典\ndict(zip(KeyList, ValueList))\n#获取/设置/插入元素\ndict1['key1']\ndict1['key1'] = 'NewValue'\n#get 提供默认值\ndict1.get('key1', DefaultValue)\n#检查键是否存在\n'key1' in dict1\n#获取键列表\ndict1.keys()\n#获取值列表\ndict1.values()\n#更新值\ndict1.update(dict2)#dict1 的值被 dict2 替换\n```\n\n- 如果键不存在，则会出现 `KeyError Exception` 。\n- 当键不存在时，如果 `get()`不提供默认值则会返回 `None` 。\n- 以相同的顺序返回键列表和值列表，但顺序不是特定的，又称极大可能非排序。\n\n#### 有效字典键类型\n\n- 键必须是不可变的，比如标量类型(`int`、`float`、`string`)或者元组（元组中的所有对象也必须是不可变的）。\n- 这儿涉及的技术术语是 `hashability`。可以用函数 `hash()`来检查一个对象是否是可哈希的，比如 `hash('This is a string')` 会返回一个哈希值，而 `hash([1,2])` 则会报错（不可哈希）。\n\n### 集合\n\n- 一个集合是一些无序且唯一的元素的聚集；\n- 你可以把它看成只有键的字典；\n\n```python\n#创建集合\nset([3, 6, 3])\n#or\n{3, 6, 3}\n#子集测试\nset1.issubset(set2)\n#超集测试\nset1.issuperset(set2)\n#测试两个集合中的元素是否完全相同\nset1 == set2\n```\n\n#### 集合操作\n\n- 并（又称或）：`set1 | set2`\n- 交（又称与）：`set1 &amp; set2`\n- 差：`set1 - set2`\n- 对称差（又称异或）：`set1 ^ set2`\n\n## 函数\n\nPython 的函数参数传递是通过**引用传递**。\n\n- 基本形式\n\n```python\ndef func1(posArg1, keywordArg1 = 1, ..)\n```\n\n**注**\n\n- 关键字参数必须跟在位置参数的后面；\n- 默认情况下，Python 不会“延迟求值”，表达式的值会立刻求出来。\n\n### 函数调用机制\n\n- 所有函数均位于模块内部作用域。见“模块”部分。\n- 在调用函数时，参数被打包成一个元组和一个字典，函数接收一个元组 `args` 和一个字典 `kwargs`，然后在函数内部解包。\n\n\n“函数是对象”的常见用法：\n\n```python\ndef func1(ops = [str.strip, user_define_func, ..], ..):\n  for function in ops:\n    value = function(value)\n```\n\n### 返回值\n\n- 如果函数末尾没有 `return` 语句，则不会返回任何东西。\n- 如果有多个返回值则通过一个元组来实现。\n\n```python\nreturn (value1, value2)\nvalue1, value2 = func1(..)\n```\n\n### 匿名函数（又称 LAMBDA 函数）\n\n- 什么是匿名函数？\n\n匿名函数是一个只包含一条语句的简单函数。\n\n```python\nlambda x : x * 2\n#def func1(x) : return x * 2\n```\n\n- 匿名函数的应用：'curring'，又称利用已存在函数的部分参数来派生新的函数。\n\n```python\nma60 = lambda x : pd.rolling_mean(x, 60)\n```\n\n### 一些有用的函数（针对数据结构）\n\n- `enumerate()` 返回一个序列`(i, value)`元组，`i` 是当前 `item` 的索引。\n\n```python\nfor i, value in enumerate(collection):\n```\n\n应用：创建一个序列中值与其在序列中的位置的字典映射（假设每一个值都是唯一的）。\n\n- `sort()`可以从任意序列中返回一个排序好的序列。\n\n```python\nsorted([2, 1, 3]) =&gt; [1, 2, 3]\n```\n\n应用：\n\n```python\nsorted(set('abc bcd')) =&gt; [' ',\n'a', 'b', 'c', 'd']\n# 返回一个字符串排序后无重复的字母序列\n```\n\n- `zip()`函数可以把许多列表、元组或其他序列的元素配对起来创建一系列的元组。\n\n```python\nzip(seq1, seq2) =&gt; [('seq1_1', 'seq2_1'), (..), ..]\n```\n\n1. `zip()`可以接收任意数量的序列作为参数，但是产生的元素的数目取决于最短的序列。\n\n应用：多个序列同时迭代：\n\n```python \nfor i, (a, b) in enumerate(zip(seq1, seq2)):\n```\n\n2. `unzip`：另一种思考方式是把一些行转化为一些列：\n\n```python\nseq1, seq2 = zip(zipOutput)\n```\n\n- `reversed()` 将一个序列的元素以逆序迭代。\n\n```python \nlist(reversed(range(10))) \n```\n\n**`reversed()` 会返回一个迭代器，`list()` 使之成为一个列表。**\n\n## 控制流\n\n- 用于 `if-else` 条件中的操作符：\n\n```python\n#检查两个变量是否是相同的对象\nvar1 is var2\n#检查两个变量是否是不同的对象\nvar1 is not var2\n#检查两个变量的值是否相等\nvar1 == var2\n```\n\n**注：Python 中使用 `and`、`or`、`not` 来组合条件，而不是使用 `&amp;&amp;`、`||`、`!` 。**\n\n- `for`循环的常见用法：\n\n```python \n#可迭代对象（list、tuple）或迭代器\nfor element in iterator:\n#如果元素是可以解包的序列\nfor a, b, c in iterator:\n```\n\n- `pass`：无操作语句，在不需要进行任何操作的块中使用。\n- 三元表达式，又称简洁的 `if-else`，基本形式：\n\n```python\nvalue = true-expr if condition else false-expr\n```\n\n- Python 中没有 `switch/case` 语句，请使用 `if/elif`。\n\n## 面向对象编程\n\n- **对象**是 Python 中所有类型的根。\n- 万物（数字、字符串、函数、类、模块等）皆为对象，每个对象均有一个类型（type）。对象变量是一个指向变量在内存中位置的指针。\n- 所有对象均为**引用计数**。\n\n```python\nsys.getrefcount(5) =&gt; x\na = 5, b = a\n#上式会在等号的右边创建一个对象的引用，因此 a 和 b 均指向 5\nsys.getrefcount(5)\n=&gt; x + 2\ndel(a); sys.getrefcount(5) =&gt; x + 1\n```\n\n- 类的基本形式：\n\n```python \nclass MyObject(object):\n  # 'self' 等价于 Java/C++ 中的 'this'\n  def __init__(self, name):\n    self.name = name\n  def memberFunc1(self, arg1):\n      ..\n  @staticmethod\n  def classFunc2(arg1):\n    ..\nobj1 = MyObject('name1')\nobj1.memberFunc1('a')\nMyObject.classFunc2('b')\n```\n\n- 有用的交互式工具：\n\n```python\ndir(variable1) #列出对象的所有可用方法\n```\n\n## 常见字符串操作\n\n```python\n#通过分隔符连接列表/元组\n', '.join([ 'v1', 'v2', 'v3']) =&gt; 'v1, v2, v3'\n\n#格式化字符串\nstring1 = 'My name is {0}　{name}'\nnewString1 = string1.format('Sean', name =　'Chen')\n\n#分裂字符串\nsep = '-';\nstringList1 =　string1.split(sep)\n\n#获取子串\nstart = 1;\nstring1[start:8]\n\n#补 '0' 向右对齐字符串\nmonth = '5';\nmonth.zfill(2) =&gt; '05'\nmonth = '12';\nmonth.zfill(2) =&gt; '12'\nmonth.zfill(3) =&gt; '012'\n```\n对列表和字典以及元组的深入理解\n## 异常处理\n\n- 基本形式：\n\n```python\ntry:\n  ..\nexcept ValueError as e:\n  print e\nexcept (TypeError, AnotherError):\n  ..\nexcept:\n  ..\nfinally:\n  .. # 清理，比如 close db;\n```\n\n- 手动引发异常：\n\n```python\nraise AssertionError # 断言失败\nraise SystemExit\n# 请求程序退出\nraise RuntimeError('错误信息 :..')\n```\n\n## 对列表和字典以及元组的深入理解\n\n语法糖（syntactic sugar）会使代码变得更加易读易写。\n\n### 对列表的理解\n\n将一些元素通过一个简短的语句传入一个过滤器进行过滤和转化，然后可以组成一个新的列表。\n\n```python\n#基本形式\n[expr for val in collection if condition]\n#ShortCut\nresult = []\nfor val in collection:\n  if condition:\n    result.append(expr)\n```\n\n可以省略过滤条件，只留下表达式。\n\n### 对字典的理解\n\n基本形式：\n\n```python\n{key-expr : value-expr for value in collection if condition}\n```\n\n### 对集合的理解\n\n基本形式：和列表一样，只是应该使用 `()` 而不是 `[]` 。\n\n### 嵌套列表\n\n基本形式：\n\n```python\n[expr for val in collection for innerVal in val if condition]\n```</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22b7a52437%22%2C%22mode%22%3A%22python%22%2C%22code%22%3A%22Python%20%E9%80%9F%E6%9F%A5%E8%A1%A8%E4%B8%AD%E6%96%87%E7%89%88%5Cn%3D%3D%3D%5Cn%5Cn-%20%E6%9C%AC%E6%89%8B%E5%86%8C%E6%98%AF%20%5BPython%20cheat%20sheet%5D(http%3A%2F%2Fdatasciencefree.com%2Fpython.pdf)%20%E7%9A%84%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91%E7%89%88%E3%80%82%E5%8E%9F%E4%BD%9C%E8%80%85%EF%BC%9AArianne%20Colton%20and%20Sean%20Chen(data.scientist.info%40gmail.com)%5Cn-%20%E7%BC%96%E8%AF%91%EF%BC%9A%5BucasFL%5D(https%3A%2F%2Fgithub.com%2FucasFL)%5Cn%5Cn%5B%E6%83%AF%E4%BE%8B%5D(%23%E6%83%AF%E4%BE%8B)%5Cn%5Cn%5B%E8%8E%B7%E5%8F%96%E5%B8%AE%E5%8A%A9%5D(%23%E8%8E%B7%E5%8F%96%E5%B8%AE%E5%8A%A9)%5Cn%5Cn%5B%E6%A8%A1%E5%9D%97%5D(%23%E6%A8%A1%E5%9D%97)%5Cn%5Cn%5B%E6%95%B0%E5%80%BC%E7%B1%BB%E7%B1%BB%E5%9E%8B%5D(%23%E6%95%B0%E5%80%BC%E7%B1%BB%E7%B1%BB%E5%9E%8B)%5Cn%5Cn%5B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%5D(%23%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)%5Cn%5Cn%5B%E5%87%BD%E6%95%B0%5D(%23%E5%87%BD%E6%95%B0)%5Cn%5Cn%5B%E6%8E%A7%E5%88%B6%E6%B5%81%5D(%23%E6%8E%A7%E5%88%B6%E6%B5%81)%5Cn%5Cn%5B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%5D(%23%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B)%5Cn%5Cn%5B%E5%B8%B8%E8%A7%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%5D(%23%E5%B8%B8%E8%A7%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C)%5Cn%5Cn%5B%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%5D(%23%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86)%5Cn%5Cn%5B%E5%AF%B9%E5%88%97%E8%A1%A8%E3%80%81%E5%AD%97%E5%85%B8%E5%92%8C%E5%85%83%E7%BB%84%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%5D(%23%E5%AF%B9%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8%E4%BB%A5%E5%8F%8A%E5%85%83%E7%BB%84%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3)%5Cn%5Cn%23%23%20%E6%83%AF%E4%BE%8B%5Cn%5Cn-%20Python%20%E5%AF%B9%E5%A4%A7%E5%B0%8F%E5%86%99%E6%95%8F%E6%84%9F%EF%BC%9B%5Cn-%20Python%20%E7%9A%84%E7%B4%A2%E5%BC%95%E4%BB%8E%200%20%E5%BC%80%E5%A7%8B%EF%BC%88%E6%89%80%E6%9C%89%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%9D%87%E5%A6%82%E6%AD%A4%EF%BC%89%EF%BC%9B%5Cn-%20Python%20%E4%BD%BF%E7%94%A8%E7%A9%BA%E7%99%BD%E7%AC%A6%EF%BC%88%E5%88%B6%E8%A1%A8%E7%AC%A6%E6%88%96%E7%A9%BA%E6%A0%BC%EF%BC%89%E6%9D%A5%E7%BC%A9%E8%BF%9B%E4%BB%A3%E7%A0%81%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E4%BD%BF%E7%94%A8%E8%8A%B1%E6%8B%AC%E5%8F%B7%E3%80%82%5Cn%5Cn%23%23%20%E8%8E%B7%E5%8F%96%E5%B8%AE%E5%8A%A9%5Cn%5Cn-%20%E8%8E%B7%E5%8F%96%E4%B8%BB%E9%A1%B5%E5%B8%AE%E5%8A%A9%EF%BC%9A%20%60help()%60%5Cn-%20%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E5%B8%AE%E5%8A%A9%EF%BC%9A%20%60help(str.replace)%60%5Cn-%20%E8%8E%B7%E5%8F%96%E6%A8%A1%E5%9D%97%E5%B8%AE%E5%8A%A9%EF%BC%9A%20%60help(re)%60%5Cn%5Cn%23%23%20%E6%A8%A1%E5%9D%97%5Cn%5Cn%E6%A8%A1%E5%9D%97%E4%BA%A6%E7%A7%B0%E5%BA%93%EF%BC%8C%E5%AE%83%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E5%9C%B0%E4%BB%A5%20%60.py%60%20%E4%B8%BA%E5%90%8E%E7%BC%80%E7%9A%84%E6%96%87%E4%BB%B6%E3%80%82%5Cn%5Cn-%20%E5%88%97%E5%87%BA%E6%A8%A1%E5%9D%97%E5%86%85%E5%AE%B9%EF%BC%9A%60dir(module1)%60%5Cn-%20%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97%EF%BC%9A%60import%20module%20%60%5Cn-%20%E8%B0%83%E7%94%A8%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%9A%60module1.func1()%60%5Cn%5Cn**%E6%B3%A8%EF%BC%9A%60import%60%20%E8%AF%AD%E5%8F%A5%E4%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%90%8D%E5%AD%97%E7%A9%BA%E9%97%B4%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%9C%A8%E8%AF%A5%E5%90%8D%E5%AD%97%E7%A9%BA%E9%97%B4%E5%86%85%E6%89%A7%E8%A1%8C%20%60.py%60%20%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E8%AF%AD%E5%8F%A5%E3%80%82%E5%A6%82%E6%9E%9C%E4%BD%A0%E6%83%B3%E6%8A%8A%E6%A8%A1%E5%9D%97%E5%86%85%E5%AE%B9%E5%AF%BC%E5%85%A5%E5%88%B0%E5%BD%93%E5%89%8D%E5%90%8D%E5%AD%97%E7%A9%BA%E9%97%B4%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%20%60from%20module1%20import%20*%60%20%E8%AF%AD%E5%8F%A5%E3%80%82**%5Cn%5Cn%23%23%20%E6%95%B0%E5%80%BC%E7%B1%BB%E7%B1%BB%E5%9E%8B%5Cn%5Cn%E6%9F%A5%E7%9C%8B%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%9A%60type(variable)%60%5Cn%5Cn%23%23%23%20%E5%85%AD%E7%A7%8D%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cn%5Cn1.%20**int%2Flong**%EF%BC%9A%E8%BF%87%E5%A4%A7%E7%9A%84%20%60int%60%20%E7%B1%BB%E5%9E%8B%E4%BC%9A%E8%A2%AB%E8%87%AA%E5%8A%A8%E8%BD%AC%E5%8C%96%E4%B8%BA%20%60long%60%20%E7%B1%BB%E5%9E%8B%E3%80%82%5Cn%5Cn2.%20**float**%EF%BC%9A64%20%E4%BD%8D%EF%BC%8CPython%20%E4%B8%AD%E6%B2%A1%E6%9C%89%20%60double%60%20%E7%B1%BB%E5%9E%8B%E3%80%82%5Cn%5Cn3.%20**bool**%EF%BC%9A%E7%9C%9F%E6%88%96%E5%81%87%E3%80%82%5Cn%5Cn4.%20**str**%EF%BC%9A%E5%9C%A8%20Python%202%20%E4%B8%AD%E9%BB%98%E8%AE%A4%E4%BB%A5%20ASCII%20%E7%BC%96%E7%A0%81%EF%BC%8C%E8%80%8C%E5%9C%A8%20Python%203%20%E4%B8%AD%E9%BB%98%E8%AE%A4%E4%BB%A5%20Unicode%20%E7%BC%96%E7%A0%81%EF%BC%9B%5Cn%5Cn%20%20%20-%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%AF%E7%BD%AE%E4%BA%8E%E5%8D%95%2F%E5%8F%8C%2F%E4%B8%89%E5%BC%95%E5%8F%B7%E4%B8%AD%EF%BC%9B%5Cn%20%20%20-%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%AD%97%E7%AC%A6%E7%9A%84%E5%BA%8F%E5%88%97%EF%BC%8C%E5%9B%A0%E6%AD%A4%E5%8F%AF%E4%BB%A5%E5%83%8F%E5%A4%84%E7%90%86%E5%85%B6%E4%BB%96%E5%BA%8F%E5%88%97%E4%B8%80%E6%A0%B7%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%9B%5Cn%20%20%20-%20%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%8F%AF%E9%80%9A%E8%BF%87%20%60%5C%5C%60%20%E6%88%96%E8%80%85%E5%89%8D%E7%BC%80%20%60r%60%20%E5%AE%9E%E7%8E%B0%EF%BC%9A%5Cn%5Cn%20%20%20%60%60%60python%5Cn%20%20%20str1%20%3D%20r'this%5C%5Cf%3Fff'%5Cn%20%20%20%60%60%60%5Cn%5Cn%20%20%20-%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%AF%E9%80%9A%E8%BF%87%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%A0%BC%E5%BC%8F%E5%8C%96%EF%BC%9A%5Cn%5Cn%20%20%20%60%60%60python%5Cn%20%20%20template%20%3D%20'%25.2f%20%25s%20haha%20%24%25d'%3B%5Cn%20%20%20str1%20%3D%20template%20%25%20(4.88%2C%20'hola'%2C%202)%5Cn%20%20%20%60%60%60%5Cn%5Cn5.%20**NoneType(None)**%EF%BC%9APython%20%60null%60%20%E5%80%BC%EF%BC%88%E5%8F%AA%E6%9C%89%20None%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%E4%B8%AD%E5%AD%98%E5%9C%A8%EF%BC%89%E3%80%82%5Cn%5Cn%20%20%20-%20%60None%60%20%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%8C%E8%80%8C%E6%98%AF%20**NoneType**%20%E7%9A%84%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AE%9E%E4%BE%8B%E3%80%82%5Cn%20%20%20-%20%60None%60%20%E9%80%9A%E5%B8%B8%E6%98%AF%E5%8F%AF%E9%80%89%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC%EF%BC%9A%5Cn%5Cn%20%20%20%60%60%60python%5Cn%20%20%20def%20func1(a%2C%20b%2C%20c%20%3D%20None)%5Cn%20%20%20%60%60%60%5Cn%5Cn%20%20%20-%20%60None%60%20%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%EF%BC%9A%5Cn%5Cn%20%20%20%60%60%60python%5Cn%20%20%20if%20variable%20is%20None%20%3A%5Cn%20%20%20%60%60%60%5Cn%5Cn6.%20**datatime**%EF%BC%9APython%20%E5%86%85%E5%BB%BA%E7%9A%84%20datetime%20%E6%A8%A1%E5%9D%97%E6%8F%90%E4%BE%9B%E4%BA%86%20%60datetime%60%E3%80%81%60data%60%20%E4%BB%A5%E5%8F%8A%20%60time%60%20%E7%B1%BB%E5%9E%8B%E3%80%82%5Cn%5Cn%20%20%20-%20%60datetime%60%20%E7%BB%84%E5%90%88%E4%BA%86%E5%AD%98%E5%82%A8%E4%BA%8E%20%60date%60%20%E5%92%8C%20%60time%60%20%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E3%80%82%5Cn%5Cn%5Cn%60%60%60python%5Cn%23%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%88%9B%E5%BB%BA%20datetime%5Cndt1%20%3D%20datetime.strptime('20091031'%2C%20'%25Y%25m%25d')%5Cn%23%E8%8E%B7%E5%8F%96%20date%20%E5%AF%B9%E8%B1%A1%5Cndt1.date()%5Cn%23%E8%8E%B7%E5%8F%96%20time%20%E5%AF%B9%E8%B1%A1%5Cndt1.time()%5Cn%23%E5%B0%86%20datetime%20%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cndt1.strftime('%25m%2F%25d%2F%25Y%25H%3A%25M')%5Cn%23%E6%9B%B4%E6%94%B9%E5%AD%97%E6%AE%B5%E5%80%BC%5Cndt2%20%3D%20dt1.replace(minute%20%3D%200%2C%20second%20%3D%2030)%5Cn%23%E5%81%9A%E5%B7%AE%2C%20diff%20%E6%98%AF%E4%B8%80%E4%B8%AA%20datetime.timedelta%20%E5%AF%B9%E8%B1%A1%5Cndiff%20%3D%20dt1%20-%20dt2%5Cn%60%60%60%5Cn%5Cn**%E6%B3%A8%EF%BC%9APython%20%E4%B8%AD%E7%9A%84%E7%BB%9D%E5%A4%A7%E5%A4%9A%E6%95%B0%E5%AF%B9%E8%B1%A1%E9%83%BD%E6%98%AF%E5%8F%AF%E5%8F%98%E7%9A%84%EF%BC%8C%E5%8F%AA%E6%9C%89%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%85%83%E7%BB%84%E4%BE%8B%E5%A4%96%E3%80%82**%5Cn%5Cn%23%23%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%5Cn%5Cn**%E6%B3%A8%EF%BC%9A%E6%89%80%E6%9C%89%E7%9A%84%20non-Get%20%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%EF%BC%8C%E6%AF%94%E5%A6%82%E4%B8%8B%E9%9D%A2%E4%BE%8B%E5%AD%90%E4%B8%AD%E7%9A%84%20%60list1.sort()%60%20%E9%83%BD%E6%98%AF%E5%8E%9F%E5%9C%B0%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%8D%B3%E4%B8%8D%E4%BC%9A%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E9%99%A4%E9%9D%9E%E7%89%B9%E5%88%AB%E5%A3%B0%E6%98%8E%E3%80%82**%5Cn%5Cn%23%23%23%20%E5%85%83%E7%BB%84%5Cn%5Cn%E5%85%83%E7%BB%84%E6%98%AF%20Python%20%E4%B8%AD%E4%BB%BB%E4%BD%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E4%B8%AA%E4%B8%80%E7%BB%B4%E3%80%81%E5%9B%BA%E5%AE%9A%E9%95%BF%E5%BA%A6%E3%80%81%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E5%BA%8F%E5%88%97%E3%80%82%5Cn%5Cn%60%60%60python%5Cn%23%E5%88%9B%E5%BB%BA%E5%85%83%E7%BB%84%5Cntup1%20%3D%204%2C%205%2C%206%20%5Cn%23%20or%5Cntup1%20%3D%20(6%2C%207%2C%208)%5Cn%23%E5%88%9B%E5%BB%BA%E5%B5%8C%E5%A5%97%E5%85%83%E7%BB%84%5Cntup1%20%3D%20(4%2C%205%2C%206)%2C%20(7%2C%208)%5Cn%23%E5%B0%86%E5%BA%8F%E5%88%97%E6%88%96%E8%BF%AD%E4%BB%A3%E5%99%A8%E8%BD%AC%E5%8C%96%E4%B8%BA%E5%85%83%E7%BB%84%5Cntuple(%5B1%2C%200%2C%202%5D)%5Cn%23%E8%BF%9E%E6%8E%A5%E5%85%83%E7%BB%84%5Cntup1%20%2B%20tup2%5Cn%23%E8%A7%A3%E5%8C%85%E5%85%83%E7%BB%84%5Cna%2C%20b%2C%20c%20%3D%20tup1%5Cn%60%60%60%5Cn%5Cn%E5%85%83%E7%BB%84%E5%BA%94%E7%94%A8%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cn%23%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%5Cna%2C%20b%20%3D%20b%2C%20a%5Cn%60%60%60%5Cn%5Cn%23%23%23%20%E5%88%97%E8%A1%A8%5Cn%5Cn%E5%88%97%E8%A1%A8%E6%98%AF%20Python%20%E4%B8%AD%E4%BB%BB%E4%BD%95%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%80%E4%B8%AA%E4%B8%80%E7%BB%B4%E3%80%81%E9%9D%9E%E5%9B%BA%E5%AE%9A%E9%95%BF%E5%BA%A6%E3%80%81%E5%8F%AF%E5%8F%98%EF%BC%88%E6%AF%94%E5%A6%82%E5%86%85%E5%AE%B9%E5%8F%AF%E4%BB%A5%E8%A2%AB%E4%BF%AE%E6%94%B9%EF%BC%89%E7%9A%84%E5%BA%8F%E5%88%97%E3%80%82%5Cn%5Cn%60%60%60python%5Cn%23%E5%88%9B%E5%BB%BA%E5%88%97%E8%A1%A8%5Cnlist1%20%3D%20%5B1%2C%20'a'%2C%203%5D%5Cn%23or%5Cnlist1%20%3D%20list(tup1)%5Cn%23%E8%BF%9E%E6%8E%A5%E5%88%97%E8%A1%A8%5Cnlist1%20%2B%20list2%20%5Cn%23or%5Cnlist1.extend(list2)%5Cn%23%E8%BF%BD%E5%8A%A0%E5%88%B0%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%AB%E5%B0%BE%5Cnlist1.append('b')%5Cn%23%E6%8F%92%E5%85%A5%E6%8C%87%E5%AE%9A%E4%BD%8D%E7%BD%AE%5Cnlist1.insert(PosIndex%2C%20'a')%5Cn%23%E5%8F%8D%E5%90%91%E6%8F%92%E5%85%A5%EF%BC%8C%E5%8D%B3%E5%BC%B9%E5%87%BA%E7%BB%99%E5%AE%9A%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%80%BC%2F%E5%88%A0%E9%99%A4%5CnValueAtIdx%20%3D%20list1.pop(PosIndex)%5Cn%23%E7%A7%BB%E9%99%A4%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%2C%20a%20%E5%BF%85%E9%A1%BB%E6%98%AF%E5%88%97%E8%A1%A8%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%80%BC%5Cnlist1.remove('a')%5Cn%23%E6%A3%80%E6%9F%A5%E6%88%90%E5%91%98%E8%B5%84%E6%A0%BC%5Cn3%20in%20list1%20%3D%3E%20True%20or%20False%5Cn%23%E5%AF%B9%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%5Cnlist1.sort()%5Cn%23%E6%8C%89%E7%89%B9%E5%AE%9A%E6%96%B9%E5%BC%8F%E6%8E%92%E5%BA%8F%5Cnlist1.sort(key%20%3D%20len)%20%23%20%E6%8C%89%E9%95%BF%E5%BA%A6%E6%8E%92%E5%BA%8F%5Cn%60%60%60%5Cn%5Cn-%20%E4%BD%BF%E7%94%A8%20%2B%20%E8%BF%9E%E6%8E%A5%E5%88%97%E8%A1%A8%E4%BC%9A%E6%9C%89%E6%AF%94%E8%BE%83%E5%A4%A7%E7%9A%84%E5%BC%80%E6%94%AF%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%88%97%E8%A1%A8%EF%BC%8C%E7%84%B6%E5%90%8E%E5%A4%8D%E5%88%B6%E5%AF%B9%E8%B1%A1%E3%80%82%E5%9B%A0%E6%AD%A4%EF%BC%8C%E4%BD%BF%E7%94%A8%20%60extend()%60%20%E6%98%AF%E6%9B%B4%E6%98%8E%E6%99%BA%E7%9A%84%E9%80%89%E6%8B%A9%EF%BC%9B%5Cn-%20%60insert%60%20%E5%92%8C%20%60append%60%20%E7%9B%B8%E6%AF%94%E4%BC%9A%E6%9C%89%E6%9B%B4%E5%A4%A7%E7%9A%84%E5%BC%80%E6%94%AF%EF%BC%88%E6%97%B6%E9%97%B4%2F%E7%A9%BA%E9%97%B4%EF%BC%89%EF%BC%9B%5Cn-%20%E5%9C%A8%E5%88%97%E8%A1%A8%E4%B8%AD%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%8C%85%E5%90%AB%E4%B8%80%E4%B8%AA%E5%80%BC%E4%BC%9A%E6%AF%94%E5%9C%A8%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88%E4%B8%AD%E6%85%A2%E5%BE%88%E5%A4%9A%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%89%8D%E8%80%85%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E7%BA%BF%E6%80%A7%E6%89%AB%E6%8F%8F%EF%BC%8C%E8%80%8C%E5%90%8E%E8%80%85%E6%98%AF%E5%9F%BA%E4%BA%8E%E5%93%88%E5%B8%8C%E8%A1%A8%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E5%8F%AA%E9%9C%80%E8%A6%81%E8%8A%B1%E8%B4%B9%E5%B8%B8%E6%95%B0%E6%97%B6%E9%97%B4%E3%80%82%5Cn%5Cn%23%23%23%23%20%E5%86%85%E5%BB%BA%E7%9A%84%20%60bisect%60%20%E6%A8%A1%E5%9D%97%5Cn%5Cn-%20%E5%AF%B9%E4%B8%80%E4%B8%AA%E6%8E%92%E5%BA%8F%E5%A5%BD%E7%9A%84%E5%88%97%E8%A1%A8%E8%BF%9B%E8%A1%8C%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E6%88%96%E6%8F%92%E5%85%A5%EF%BC%9B%5Cn-%20%60bisect.bisect%60%E6%89%BE%E5%88%B0%E5%85%83%E7%B4%A0%E5%9C%A8%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%60bisect.insort%60%E5%B0%86%E5%85%83%E7%B4%A0%E6%8F%92%E5%85%A5%E5%88%B0%E7%9B%B8%E5%BA%94%E4%BD%8D%E7%BD%AE%E3%80%82%E7%94%A8%E6%B3%95%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cnimport%20bisect%5Cnlist1%20%3D%20list(range(10))%5Cn%23%E6%89%BE%E5%88%B0%205%20%E5%9C%A8%20list1%20%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E4%BB%8E%201%20%E5%BC%80%E5%A7%8B%EF%BC%8C%E5%9B%A0%E6%AD%A4%20position%20%3D%20index%20%2B%201%5Cnbisect.bisect(list1%2C%205)%5Cn%23%E5%B0%86%203.5%20%E6%8F%92%E5%85%A5%20list1%20%E4%B8%AD%E5%90%88%E9%80%82%E4%BD%8D%E7%BD%AE%5Cnbisect.insort(list1%2C%203.5)%5Cn%60%60%60%5Cn%5Cn**%E6%B3%A8%EF%BC%9A%60bisect%60%20%E6%A8%A1%E5%9D%97%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E5%B9%B6%E4%B8%8D%E4%BC%9A%E5%8E%BB%E6%A3%80%E6%9F%A5%E5%88%97%E8%A1%A8%E6%98%AF%E5%90%A6%E6%8E%92%E5%BA%8F%E5%A5%BD%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%BF%99%E4%BC%9A%E8%8A%B1%E8%B4%B9%E5%BE%88%E5%A4%9A%E6%97%B6%E9%97%B4%E3%80%82%E6%89%80%E4%BB%A5%EF%BC%8C%E5%AF%B9%E6%9C%AA%E6%8E%92%E5%BA%8F%E5%A5%BD%E7%9A%84%E5%88%97%E8%A1%A8%E4%BD%BF%E7%94%A8%E8%BF%99%E4%BA%9B%E5%87%BD%E6%95%B0%E4%B9%9F%E4%B8%8D%E4%BC%9A%E6%8A%A5%E9%94%99%EF%BC%8C%E4%BD%86%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E7%BB%93%E6%9E%9C%E3%80%82**%5Cn%5Cn%23%23%23%20%E9%92%88%E5%AF%B9%E5%BA%8F%E5%88%97%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%87%E7%89%87%5Cn%5Cn%E5%BA%8F%E5%88%97%E7%B1%BB%E5%9E%8B%E5%8C%85%E6%8B%AC%20%60str%60%E3%80%81%60array%60%E3%80%81%60tuple%60%E3%80%81%60list%60%20%E7%AD%89%E3%80%82%5Cn%5Cn%E7%94%A8%E6%B3%95%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cnlist1%5Bstart%3Astop%5D%5Cn%23%E5%A6%82%E6%9E%9C%E4%BD%BF%E7%94%A8%20step%5Cnlist1(start%3Astop%3Astep)%5Cn%60%60%60%5Cn%5Cn**%E6%B3%A8%EF%BC%9A%E5%88%87%E7%89%87%E7%BB%93%E6%9E%9C%E5%8C%85%E5%90%AB%20%60start%60%20%E7%B4%A2%E5%BC%95%EF%BC%8C%E4%BD%86%E4%B8%8D%E5%8C%85%E5%90%AB%20%60stop%60%20%E7%B4%A2%E5%BC%95%EF%BC%9B%60start%2Fstop%60%20%E7%B4%A2%E5%BC%95%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%EF%BC%8C%E5%A6%82%E6%9E%9C%E7%9C%81%E7%95%A5%EF%BC%8C%E5%88%99%E9%BB%98%E8%AE%A4%E4%B8%BA%E5%BA%8F%E5%88%97%E4%BB%8E%E5%BC%80%E5%A7%8B%E5%88%B0%E7%BB%93%E6%9D%9F%EF%BC%8C%E5%A6%82%20%60list1%20%3D%3D%20list1%5B%3A%5D%60%20%E3%80%82**%5Cn%5Cn%60step%60%20%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cn%23%E5%8F%96%E5%87%BA%E5%A5%87%E6%95%B0%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%85%83%E7%B4%A0%5Cnlist1%5B%3A%3A2%5D%5Cn%23%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cnstr1%5B%3A%3A-1%5D%5Cn%60%60%60%5Cn%5Cn%23%23%23%20%E5%AD%97%E5%85%B8%EF%BC%88%E5%93%88%E5%B8%8C%E6%98%A0%E5%B0%84%EF%BC%89%5Cn%5Cn%60%60%60python%5Cn%23%E5%88%9B%E5%BB%BA%E5%AD%97%E5%85%B8%5Cndict1%20%3D%20%7B'key1'%3A%20'value1'%2C%202%3A%20%5B3%2C2%5D%7D%5Cn%23%E4%BB%8E%E5%BA%8F%E5%88%97%E5%88%9B%E5%BB%BA%E5%AD%97%E5%85%B8%5Cndict(zip(KeyList%2C%20ValueList))%5Cn%23%E8%8E%B7%E5%8F%96%2F%E8%AE%BE%E7%BD%AE%2F%E6%8F%92%E5%85%A5%E5%85%83%E7%B4%A0%5Cndict1%5B'key1'%5D%5Cndict1%5B'key1'%5D%20%3D%20'NewValue'%5Cn%23get%20%E6%8F%90%E4%BE%9B%E9%BB%98%E8%AE%A4%E5%80%BC%5Cndict1.get('key1'%2C%20DefaultValue)%5Cn%23%E6%A3%80%E6%9F%A5%E9%94%AE%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%5Cn'key1'%20in%20dict1%5Cn%23%E8%8E%B7%E5%8F%96%E9%94%AE%E5%88%97%E8%A1%A8%5Cndict1.keys()%5Cn%23%E8%8E%B7%E5%8F%96%E5%80%BC%E5%88%97%E8%A1%A8%5Cndict1.values()%5Cn%23%E6%9B%B4%E6%96%B0%E5%80%BC%5Cndict1.update(dict2)%23dict1%20%E7%9A%84%E5%80%BC%E8%A2%AB%20dict2%20%E6%9B%BF%E6%8D%A2%5Cn%60%60%60%5Cn%5Cn-%20%E5%A6%82%E6%9E%9C%E9%94%AE%E4%B8%8D%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%88%99%E4%BC%9A%E5%87%BA%E7%8E%B0%20%60KeyError%20Exception%60%20%E3%80%82%5Cn-%20%E5%BD%93%E9%94%AE%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%97%B6%EF%BC%8C%E5%A6%82%E6%9E%9C%20%60get()%60%E4%B8%8D%E6%8F%90%E4%BE%9B%E9%BB%98%E8%AE%A4%E5%80%BC%E5%88%99%E4%BC%9A%E8%BF%94%E5%9B%9E%20%60None%60%20%E3%80%82%5Cn-%20%E4%BB%A5%E7%9B%B8%E5%90%8C%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%BF%94%E5%9B%9E%E9%94%AE%E5%88%97%E8%A1%A8%E5%92%8C%E5%80%BC%E5%88%97%E8%A1%A8%EF%BC%8C%E4%BD%86%E9%A1%BA%E5%BA%8F%E4%B8%8D%E6%98%AF%E7%89%B9%E5%AE%9A%E7%9A%84%EF%BC%8C%E5%8F%88%E7%A7%B0%E6%9E%81%E5%A4%A7%E5%8F%AF%E8%83%BD%E9%9D%9E%E6%8E%92%E5%BA%8F%E3%80%82%5Cn%5Cn%23%23%23%23%20%E6%9C%89%E6%95%88%E5%AD%97%E5%85%B8%E9%94%AE%E7%B1%BB%E5%9E%8B%5Cn%5Cn-%20%E9%94%AE%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%EF%BC%8C%E6%AF%94%E5%A6%82%E6%A0%87%E9%87%8F%E7%B1%BB%E5%9E%8B(%60int%60%E3%80%81%60float%60%E3%80%81%60string%60)%E6%88%96%E8%80%85%E5%85%83%E7%BB%84%EF%BC%88%E5%85%83%E7%BB%84%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E4%B9%9F%E5%BF%85%E9%A1%BB%E6%98%AF%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%EF%BC%89%E3%80%82%5Cn-%20%E8%BF%99%E5%84%BF%E6%B6%89%E5%8F%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E6%9C%AF%E8%AF%AD%E6%98%AF%20%60hashability%60%E3%80%82%E5%8F%AF%E4%BB%A5%E7%94%A8%E5%87%BD%E6%95%B0%20%60hash()%60%E6%9D%A5%E6%A3%80%E6%9F%A5%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E6%98%AF%E5%8F%AF%E5%93%88%E5%B8%8C%E7%9A%84%EF%BC%8C%E6%AF%94%E5%A6%82%20%60hash('This%20is%20a%20string')%60%20%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%93%88%E5%B8%8C%E5%80%BC%EF%BC%8C%E8%80%8C%20%60hash(%5B1%2C2%5D)%60%20%E5%88%99%E4%BC%9A%E6%8A%A5%E9%94%99%EF%BC%88%E4%B8%8D%E5%8F%AF%E5%93%88%E5%B8%8C%EF%BC%89%E3%80%82%5Cn%5Cn%23%23%23%20%E9%9B%86%E5%90%88%5Cn%5Cn-%20%E4%B8%80%E4%B8%AA%E9%9B%86%E5%90%88%E6%98%AF%E4%B8%80%E4%BA%9B%E6%97%A0%E5%BA%8F%E4%B8%94%E5%94%AF%E4%B8%80%E7%9A%84%E5%85%83%E7%B4%A0%E7%9A%84%E8%81%9A%E9%9B%86%EF%BC%9B%5Cn-%20%E4%BD%A0%E5%8F%AF%E4%BB%A5%E6%8A%8A%E5%AE%83%E7%9C%8B%E6%88%90%E5%8F%AA%E6%9C%89%E9%94%AE%E7%9A%84%E5%AD%97%E5%85%B8%EF%BC%9B%5Cn%5Cn%60%60%60python%5Cn%23%E5%88%9B%E5%BB%BA%E9%9B%86%E5%90%88%5Cnset(%5B3%2C%206%2C%203%5D)%5Cn%23or%5Cn%7B3%2C%206%2C%203%7D%5Cn%23%E5%AD%90%E9%9B%86%E6%B5%8B%E8%AF%95%5Cnset1.issubset(set2)%5Cn%23%E8%B6%85%E9%9B%86%E6%B5%8B%E8%AF%95%5Cnset1.issuperset(set2)%5Cn%23%E6%B5%8B%E8%AF%95%E4%B8%A4%E4%B8%AA%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%E6%98%AF%E5%90%A6%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C%5Cnset1%20%3D%3D%20set2%5Cn%60%60%60%5Cn%5Cn%23%23%23%23%20%E9%9B%86%E5%90%88%E6%93%8D%E4%BD%9C%5Cn%5Cn-%20%E5%B9%B6%EF%BC%88%E5%8F%88%E7%A7%B0%E6%88%96%EF%BC%89%EF%BC%9A%60set1%20%7C%20set2%60%5Cn-%20%E4%BA%A4%EF%BC%88%E5%8F%88%E7%A7%B0%E4%B8%8E%EF%BC%89%EF%BC%9A%60set1%20%26%20set2%60%5Cn-%20%E5%B7%AE%EF%BC%9A%60set1%20-%20set2%60%5Cn-%20%E5%AF%B9%E7%A7%B0%E5%B7%AE%EF%BC%88%E5%8F%88%E7%A7%B0%E5%BC%82%E6%88%96%EF%BC%89%EF%BC%9A%60set1%20%5E%20set2%60%5Cn%5Cn%23%23%20%E5%87%BD%E6%95%B0%5Cn%5CnPython%20%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E6%98%AF%E9%80%9A%E8%BF%87**%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92**%E3%80%82%5Cn%5Cn-%20%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F%5Cn%5Cn%60%60%60python%5Cndef%20func1(posArg1%2C%20keywordArg1%20%3D%201%2C%20..)%5Cn%60%60%60%5Cn%5Cn**%E6%B3%A8**%5Cn%5Cn-%20%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%82%E6%95%B0%E5%BF%85%E9%A1%BB%E8%B7%9F%E5%9C%A8%E4%BD%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E7%9A%84%E5%90%8E%E9%9D%A2%EF%BC%9B%5Cn-%20%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8CPython%20%E4%B8%8D%E4%BC%9A%E2%80%9C%E5%BB%B6%E8%BF%9F%E6%B1%82%E5%80%BC%E2%80%9D%EF%BC%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%80%BC%E4%BC%9A%E7%AB%8B%E5%88%BB%E6%B1%82%E5%87%BA%E6%9D%A5%E3%80%82%5Cn%5Cn%23%23%23%20%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%9C%BA%E5%88%B6%5Cn%5Cn-%20%E6%89%80%E6%9C%89%E5%87%BD%E6%95%B0%E5%9D%87%E4%BD%8D%E4%BA%8E%E6%A8%A1%E5%9D%97%E5%86%85%E9%83%A8%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%82%E8%A7%81%E2%80%9C%E6%A8%A1%E5%9D%97%E2%80%9D%E9%83%A8%E5%88%86%E3%80%82%5Cn-%20%E5%9C%A8%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E6%97%B6%EF%BC%8C%E5%8F%82%E6%95%B0%E8%A2%AB%E6%89%93%E5%8C%85%E6%88%90%E4%B8%80%E4%B8%AA%E5%85%83%E7%BB%84%E5%92%8C%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8%EF%BC%8C%E5%87%BD%E6%95%B0%E6%8E%A5%E6%94%B6%E4%B8%80%E4%B8%AA%E5%85%83%E7%BB%84%20%60args%60%20%E5%92%8C%E4%B8%80%E4%B8%AA%E5%AD%97%E5%85%B8%20%60kwargs%60%EF%BC%8C%E7%84%B6%E5%90%8E%E5%9C%A8%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8%E8%A7%A3%E5%8C%85%E3%80%82%5Cn%5Cn%5Cn%E2%80%9C%E5%87%BD%E6%95%B0%E6%98%AF%E5%AF%B9%E8%B1%A1%E2%80%9D%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cndef%20func1(ops%20%3D%20%5Bstr.strip%2C%20user_define_func%2C%20..%5D%2C%20..)%3A%5Cn%20%20for%20function%20in%20ops%3A%5Cn%20%20%20%20value%20%3D%20function(value)%5Cn%60%60%60%5Cn%5Cn%23%23%23%20%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%5Cn-%20%E5%A6%82%E6%9E%9C%E5%87%BD%E6%95%B0%E6%9C%AB%E5%B0%BE%E6%B2%A1%E6%9C%89%20%60return%60%20%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%88%99%E4%B8%8D%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%BB%BB%E4%BD%95%E4%B8%9C%E8%A5%BF%E3%80%82%5Cn-%20%E5%A6%82%E6%9E%9C%E6%9C%89%E5%A4%9A%E4%B8%AA%E8%BF%94%E5%9B%9E%E5%80%BC%E5%88%99%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AA%E5%85%83%E7%BB%84%E6%9D%A5%E5%AE%9E%E7%8E%B0%E3%80%82%5Cn%5Cn%60%60%60python%5Cnreturn%20(value1%2C%20value2)%5Cnvalue1%2C%20value2%20%3D%20func1(..)%5Cn%60%60%60%5Cn%5Cn%23%23%23%20%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%EF%BC%88%E5%8F%88%E7%A7%B0%20LAMBDA%20%E5%87%BD%E6%95%B0%EF%BC%89%5Cn%5Cn-%20%E4%BB%80%E4%B9%88%E6%98%AF%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%EF%BC%9F%5Cn%5Cn%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%8C%85%E5%90%AB%E4%B8%80%E6%9D%A1%E8%AF%AD%E5%8F%A5%E7%9A%84%E7%AE%80%E5%8D%95%E5%87%BD%E6%95%B0%E3%80%82%5Cn%5Cn%60%60%60python%5Cnlambda%20x%20%3A%20x%20*%202%5Cn%23def%20func1(x)%20%3A%20return%20x%20*%202%5Cn%60%60%60%5Cn%5Cn-%20%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8%EF%BC%9A'curring'%EF%BC%8C%E5%8F%88%E7%A7%B0%E5%88%A9%E7%94%A8%E5%B7%B2%E5%AD%98%E5%9C%A8%E5%87%BD%E6%95%B0%E7%9A%84%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E6%9D%A5%E6%B4%BE%E7%94%9F%E6%96%B0%E7%9A%84%E5%87%BD%E6%95%B0%E3%80%82%5Cn%5Cn%60%60%60python%5Cnma60%20%3D%20lambda%20x%20%3A%20pd.rolling_mean(x%2C%2060)%5Cn%60%60%60%5Cn%5Cn%23%23%23%20%E4%B8%80%E4%BA%9B%E6%9C%89%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%88%E9%92%88%E5%AF%B9%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89%5Cn%5Cn-%20%60enumerate()%60%20%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%BA%8F%E5%88%97%60(i%2C%20value)%60%E5%85%83%E7%BB%84%EF%BC%8C%60i%60%20%E6%98%AF%E5%BD%93%E5%89%8D%20%60item%60%20%E7%9A%84%E7%B4%A2%E5%BC%95%E3%80%82%5Cn%5Cn%60%60%60python%5Cnfor%20i%2C%20value%20in%20enumerate(collection)%3A%5Cn%60%60%60%5Cn%5Cn%E5%BA%94%E7%94%A8%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%BA%8F%E5%88%97%E4%B8%AD%E5%80%BC%E4%B8%8E%E5%85%B6%E5%9C%A8%E5%BA%8F%E5%88%97%E4%B8%AD%E7%9A%84%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%AD%97%E5%85%B8%E6%98%A0%E5%B0%84%EF%BC%88%E5%81%87%E8%AE%BE%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%80%BC%E9%83%BD%E6%98%AF%E5%94%AF%E4%B8%80%E7%9A%84%EF%BC%89%E3%80%82%5Cn%5Cn-%20%60sort()%60%E5%8F%AF%E4%BB%A5%E4%BB%8E%E4%BB%BB%E6%84%8F%E5%BA%8F%E5%88%97%E4%B8%AD%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E6%8E%92%E5%BA%8F%E5%A5%BD%E7%9A%84%E5%BA%8F%E5%88%97%E3%80%82%5Cn%5Cn%60%60%60python%5Cnsorted(%5B2%2C%201%2C%203%5D)%20%3D%3E%20%5B1%2C%202%2C%203%5D%5Cn%60%60%60%5Cn%5Cn%E5%BA%94%E7%94%A8%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cnsorted(set('abc%20bcd'))%20%3D%3E%20%5B'%20'%2C%5Cn'a'%2C%20'b'%2C%20'c'%2C%20'd'%5D%5Cn%23%20%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F%E5%90%8E%E6%97%A0%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BA%8F%E5%88%97%5Cn%60%60%60%5Cn%5Cn-%20%60zip()%60%E5%87%BD%E6%95%B0%E5%8F%AF%E4%BB%A5%E6%8A%8A%E8%AE%B8%E5%A4%9A%E5%88%97%E8%A1%A8%E3%80%81%E5%85%83%E7%BB%84%E6%88%96%E5%85%B6%E4%BB%96%E5%BA%8F%E5%88%97%E7%9A%84%E5%85%83%E7%B4%A0%E9%85%8D%E5%AF%B9%E8%B5%B7%E6%9D%A5%E5%88%9B%E5%BB%BA%E4%B8%80%E7%B3%BB%E5%88%97%E7%9A%84%E5%85%83%E7%BB%84%E3%80%82%5Cn%5Cn%60%60%60python%5Cnzip(seq1%2C%20seq2)%20%3D%3E%20%5B('seq1_1'%2C%20'seq2_1')%2C%20(..)%2C%20..%5D%5Cn%60%60%60%5Cn%5Cn1.%20%60zip()%60%E5%8F%AF%E4%BB%A5%E6%8E%A5%E6%94%B6%E4%BB%BB%E6%84%8F%E6%95%B0%E9%87%8F%E7%9A%84%E5%BA%8F%E5%88%97%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BA%A7%E7%94%9F%E7%9A%84%E5%85%83%E7%B4%A0%E7%9A%84%E6%95%B0%E7%9B%AE%E5%8F%96%E5%86%B3%E4%BA%8E%E6%9C%80%E7%9F%AD%E7%9A%84%E5%BA%8F%E5%88%97%E3%80%82%5Cn%5Cn%E5%BA%94%E7%94%A8%EF%BC%9A%E5%A4%9A%E4%B8%AA%E5%BA%8F%E5%88%97%E5%90%8C%E6%97%B6%E8%BF%AD%E4%BB%A3%EF%BC%9A%5Cn%5Cn%60%60%60python%20%5Cnfor%20i%2C%20(a%2C%20b)%20in%20enumerate(zip(seq1%2C%20seq2))%3A%5Cn%60%60%60%5Cn%5Cn2.%20%60unzip%60%EF%BC%9A%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%80%9D%E8%80%83%E6%96%B9%E5%BC%8F%E6%98%AF%E6%8A%8A%E4%B8%80%E4%BA%9B%E8%A1%8C%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%B8%80%E4%BA%9B%E5%88%97%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cnseq1%2C%20seq2%20%3D%20zip(zipOutput)%5Cn%60%60%60%5Cn%5Cn-%20%60reversed()%60%20%E5%B0%86%E4%B8%80%E4%B8%AA%E5%BA%8F%E5%88%97%E7%9A%84%E5%85%83%E7%B4%A0%E4%BB%A5%E9%80%86%E5%BA%8F%E8%BF%AD%E4%BB%A3%E3%80%82%5Cn%5Cn%60%60%60python%20%5Cnlist(reversed(range(10)))%20%5Cn%60%60%60%5Cn%5Cn**%60reversed()%60%20%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%8C%60list()%60%20%E4%BD%BF%E4%B9%8B%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%88%97%E8%A1%A8%E3%80%82**%5Cn%5Cn%23%23%20%E6%8E%A7%E5%88%B6%E6%B5%81%5Cn%5Cn-%20%E7%94%A8%E4%BA%8E%20%60if-else%60%20%E6%9D%A1%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cn%23%E6%A3%80%E6%9F%A5%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E6%98%AF%E7%9B%B8%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cnvar1%20is%20var2%5Cn%23%E6%A3%80%E6%9F%A5%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E6%98%AF%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cnvar1%20is%20not%20var2%5Cn%23%E6%A3%80%E6%9F%A5%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E6%98%AF%E5%90%A6%E7%9B%B8%E7%AD%89%5Cnvar1%20%3D%3D%20var2%5Cn%60%60%60%5Cn%5Cn**%E6%B3%A8%EF%BC%9APython%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20%60and%60%E3%80%81%60or%60%E3%80%81%60not%60%20%E6%9D%A5%E7%BB%84%E5%90%88%E6%9D%A1%E4%BB%B6%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E4%BD%BF%E7%94%A8%20%60%26%26%60%E3%80%81%60%7C%7C%60%E3%80%81%60!%60%20%E3%80%82**%5Cn%5Cn-%20%60for%60%E5%BE%AA%E7%8E%AF%E7%9A%84%E5%B8%B8%E8%A7%81%E7%94%A8%E6%B3%95%EF%BC%9A%5Cn%5Cn%60%60%60python%20%5Cn%23%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%EF%BC%88list%E3%80%81tuple%EF%BC%89%E6%88%96%E8%BF%AD%E4%BB%A3%E5%99%A8%5Cnfor%20element%20in%20iterator%3A%5Cn%23%E5%A6%82%E6%9E%9C%E5%85%83%E7%B4%A0%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%8C%85%E7%9A%84%E5%BA%8F%E5%88%97%5Cnfor%20a%2C%20b%2C%20c%20in%20iterator%3A%5Cn%60%60%60%5Cn%5Cn-%20%60pass%60%EF%BC%9A%E6%97%A0%E6%93%8D%E4%BD%9C%E8%AF%AD%E5%8F%A5%EF%BC%8C%E5%9C%A8%E4%B8%8D%E9%9C%80%E8%A6%81%E8%BF%9B%E8%A1%8C%E4%BB%BB%E4%BD%95%E6%93%8D%E4%BD%9C%E7%9A%84%E5%9D%97%E4%B8%AD%E4%BD%BF%E7%94%A8%E3%80%82%5Cn-%20%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E5%8F%88%E7%A7%B0%E7%AE%80%E6%B4%81%E7%9A%84%20%60if-else%60%EF%BC%8C%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cnvalue%20%3D%20true-expr%20if%20condition%20else%20false-expr%5Cn%60%60%60%5Cn%5Cn-%20Python%20%E4%B8%AD%E6%B2%A1%E6%9C%89%20%60switch%2Fcase%60%20%E8%AF%AD%E5%8F%A5%EF%BC%8C%E8%AF%B7%E4%BD%BF%E7%94%A8%20%60if%2Felif%60%E3%80%82%5Cn%5Cn%23%23%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%5Cn%5Cn-%20**%E5%AF%B9%E8%B1%A1**%E6%98%AF%20Python%20%E4%B8%AD%E6%89%80%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%A0%B9%E3%80%82%5Cn-%20%E4%B8%87%E7%89%A9%EF%BC%88%E6%95%B0%E5%AD%97%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%87%BD%E6%95%B0%E3%80%81%E7%B1%BB%E3%80%81%E6%A8%A1%E5%9D%97%E7%AD%89%EF%BC%89%E7%9A%86%E4%B8%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%AF%8F%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%9D%87%E6%9C%89%E4%B8%80%E4%B8%AA%E7%B1%BB%E5%9E%8B%EF%BC%88type%EF%BC%89%E3%80%82%E5%AF%B9%E8%B1%A1%E5%8F%98%E9%87%8F%E6%98%AF%E4%B8%80%E4%B8%AA%E6%8C%87%E5%90%91%E5%8F%98%E9%87%8F%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E4%BD%8D%E7%BD%AE%E7%9A%84%E6%8C%87%E9%92%88%E3%80%82%5Cn-%20%E6%89%80%E6%9C%89%E5%AF%B9%E8%B1%A1%E5%9D%87%E4%B8%BA**%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0**%E3%80%82%5Cn%5Cn%60%60%60python%5Cnsys.getrefcount(5)%20%3D%3E%20x%5Cna%20%3D%205%2C%20b%20%3D%20a%5Cn%23%E4%B8%8A%E5%BC%8F%E4%BC%9A%E5%9C%A8%E7%AD%89%E5%8F%B7%E7%9A%84%E5%8F%B3%E8%BE%B9%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%95%E7%94%A8%EF%BC%8C%E5%9B%A0%E6%AD%A4%20a%20%E5%92%8C%20b%20%E5%9D%87%E6%8C%87%E5%90%91%205%5Cnsys.getrefcount(5)%5Cn%3D%3E%20x%20%2B%202%5Cndel(a)%3B%20sys.getrefcount(5)%20%3D%3E%20x%20%2B%201%5Cn%60%60%60%5Cn%5Cn-%20%E7%B1%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F%EF%BC%9A%5Cn%5Cn%60%60%60python%20%5Cnclass%20MyObject(object)%3A%5Cn%20%20%23%20'self'%20%E7%AD%89%E4%BB%B7%E4%BA%8E%20Java%2FC%2B%2B%20%E4%B8%AD%E7%9A%84%20'this'%5Cn%20%20def%20__init__(self%2C%20name)%3A%5Cn%20%20%20%20self.name%20%3D%20name%5Cn%20%20def%20memberFunc1(self%2C%20arg1)%3A%5Cn%20%20%20%20%20%20..%5Cn%20%20%40staticmethod%5Cn%20%20def%20classFunc2(arg1)%3A%5Cn%20%20%20%20..%5Cnobj1%20%3D%20MyObject('name1')%5Cnobj1.memberFunc1('a')%5CnMyObject.classFunc2('b')%5Cn%60%60%60%5Cn%5Cn-%20%E6%9C%89%E7%94%A8%E7%9A%84%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%B7%A5%E5%85%B7%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cndir(variable1)%20%23%E5%88%97%E5%87%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%80%E6%9C%89%E5%8F%AF%E7%94%A8%E6%96%B9%E6%B3%95%5Cn%60%60%60%5Cn%5Cn%23%23%20%E5%B8%B8%E8%A7%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%5Cn%5Cn%60%60%60python%5Cn%23%E9%80%9A%E8%BF%87%E5%88%86%E9%9A%94%E7%AC%A6%E8%BF%9E%E6%8E%A5%E5%88%97%E8%A1%A8%2F%E5%85%83%E7%BB%84%5Cn'%2C%20'.join(%5B%20'v1'%2C%20'v2'%2C%20'v3'%5D)%20%3D%3E%20'v1%2C%20v2%2C%20v3'%5Cn%5Cn%23%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cnstring1%20%3D%20'My%20name%20is%20%7B0%7D%E3%80%80%7Bname%7D'%5CnnewString1%20%3D%20string1.format('Sean'%2C%20name%20%3D%E3%80%80'Chen')%5Cn%5Cn%23%E5%88%86%E8%A3%82%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cnsep%20%3D%20'-'%3B%5CnstringList1%20%3D%E3%80%80string1.split(sep)%5Cn%5Cn%23%E8%8E%B7%E5%8F%96%E5%AD%90%E4%B8%B2%5Cnstart%20%3D%201%3B%5Cnstring1%5Bstart%3A8%5D%5Cn%5Cn%23%E8%A1%A5%20'0'%20%E5%90%91%E5%8F%B3%E5%AF%B9%E9%BD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cnmonth%20%3D%20'5'%3B%5Cnmonth.zfill(2)%20%3D%3E%20'05'%5Cnmonth%20%3D%20'12'%3B%5Cnmonth.zfill(2)%20%3D%3E%20'12'%5Cnmonth.zfill(3)%20%3D%3E%20'012'%5Cn%60%60%60%5Cn%E5%AF%B9%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8%E4%BB%A5%E5%8F%8A%E5%85%83%E7%BB%84%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%5Cn%23%23%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%5Cn%5Cn-%20%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cntry%3A%5Cn%20%20..%5Cnexcept%20ValueError%20as%20e%3A%5Cn%20%20print%20e%5Cnexcept%20(TypeError%2C%20AnotherError)%3A%5Cn%20%20..%5Cnexcept%3A%5Cn%20%20..%5Cnfinally%3A%5Cn%20%20..%20%23%20%E6%B8%85%E7%90%86%EF%BC%8C%E6%AF%94%E5%A6%82%20close%20db%3B%5Cn%60%60%60%5Cn%5Cn-%20%E6%89%8B%E5%8A%A8%E5%BC%95%E5%8F%91%E5%BC%82%E5%B8%B8%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cnraise%20AssertionError%20%23%20%E6%96%AD%E8%A8%80%E5%A4%B1%E8%B4%A5%5Cnraise%20SystemExit%5Cn%23%20%E8%AF%B7%E6%B1%82%E7%A8%8B%E5%BA%8F%E9%80%80%E5%87%BA%5Cnraise%20RuntimeError('%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%20%3A..')%5Cn%60%60%60%5Cn%5Cn%23%23%20%E5%AF%B9%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8%E4%BB%A5%E5%8F%8A%E5%85%83%E7%BB%84%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%5Cn%5Cn%E8%AF%AD%E6%B3%95%E7%B3%96%EF%BC%88syntactic%20sugar%EF%BC%89%E4%BC%9A%E4%BD%BF%E4%BB%A3%E7%A0%81%E5%8F%98%E5%BE%97%E6%9B%B4%E5%8A%A0%E6%98%93%E8%AF%BB%E6%98%93%E5%86%99%E3%80%82%5Cn%5Cn%23%23%23%20%E5%AF%B9%E5%88%97%E8%A1%A8%E7%9A%84%E7%90%86%E8%A7%A3%5Cn%5Cn%E5%B0%86%E4%B8%80%E4%BA%9B%E5%85%83%E7%B4%A0%E9%80%9A%E8%BF%87%E4%B8%80%E4%B8%AA%E7%AE%80%E7%9F%AD%E7%9A%84%E8%AF%AD%E5%8F%A5%E4%BC%A0%E5%85%A5%E4%B8%80%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4%E5%92%8C%E8%BD%AC%E5%8C%96%EF%BC%8C%E7%84%B6%E5%90%8E%E5%8F%AF%E4%BB%A5%E7%BB%84%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%88%97%E8%A1%A8%E3%80%82%5Cn%5Cn%60%60%60python%5Cn%23%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F%5Cn%5Bexpr%20for%20val%20in%20collection%20if%20condition%5D%5Cn%23ShortCut%5Cnresult%20%3D%20%5B%5D%5Cnfor%20val%20in%20collection%3A%5Cn%20%20if%20condition%3A%5Cn%20%20%20%20result.append(expr)%5Cn%60%60%60%5Cn%5Cn%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6%EF%BC%8C%E5%8F%AA%E7%95%99%E4%B8%8B%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%82%5Cn%5Cn%23%23%23%20%E5%AF%B9%E5%AD%97%E5%85%B8%E7%9A%84%E7%90%86%E8%A7%A3%5Cn%5Cn%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cn%7Bkey-expr%20%3A%20value-expr%20for%20value%20in%20collection%20if%20condition%7D%5Cn%60%60%60%5Cn%5Cn%23%23%23%20%E5%AF%B9%E9%9B%86%E5%90%88%E7%9A%84%E7%90%86%E8%A7%A3%5Cn%5Cn%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F%EF%BC%9A%E5%92%8C%E5%88%97%E8%A1%A8%E4%B8%80%E6%A0%B7%EF%BC%8C%E5%8F%AA%E6%98%AF%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%20%60()%60%20%E8%80%8C%E4%B8%8D%E6%98%AF%20%60%5B%5D%60%20%E3%80%82%5Cn%5Cn%23%23%23%20%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%5Cn%5Cn%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F%EF%BC%9A%5Cn%5Cn%60%60%60python%5Cn%5Bexpr%20for%20val%20in%20collection%20for%20innerVal%20in%20val%20if%20condition%5D%5Cn%60%60%60%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-19T15:08:47.000Z",
    "deleted_at": null,
    "created_at": "2018-11-19T15:06:05.000Z",
    "updated_at": "2018-11-19T15:09:02.000Z",
    "published_at": "2018-11-19T15:09:02.000Z",
    "first_published_at": null,
    "word_count": 3300,
    "cover": null,
    "description": "Python 速查表中文版 ===  - 本手册是 [Python cheat sheet](http://datasciencefree.com/python.pdf) 的中文翻译版。原作者：Arianne Colton and Sean Chen(data.scientist.info@g...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 981610,
    "slug": "agh3dp",
    "title": "Golang中文速查表（Cheatsheet）",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n```go\n/*******************************************************************************\n * Golang CHEATSHEET (中文速查表)\n ******************************************************************************/\n\n\n\n /******************************************************************************\n  * Go 编译器命令\n  *****************************************************************************/\ngo command [arguments]                              // go 命令 [参数]\ngo build                                            // 编译包和依赖包\ngo clean                                            // 移除对象和缓存文件\ngo doc                                              // 显示包的文档\ngo env                                              // 打印go的环境变量信息\ngo bug                                              // 报告bug\ngo fix                                              // 更新包使用新的api\ngo fmt                                              // 格式规范化代码\ngo generate                                         // 通过处理资源生成go文件\ngo get                                              // 下载并安装包及其依赖\ngo install                                          // 编译和安装包及其依赖\ngo list                                             // 列出所有包\ngo run                                              // 编译和运行go程序\ngo test                                             // 测试\ngo tool                                             // 运行给定的go工具\ngo version                                          // 显示go当前版本\ngo vet                                              // 发现代码中可能的错误\n\n\n\n/*******************************************************************************\n * Hello World\n ******************************************************************************/\n// main.go\npackage main                                        // 包名\n\nimport \"fmt\"                                        // 导入fmt包\n\nfunc main() {                                       // 主函数\n    fmt.Println(\"Hello World\")                      // 打印输出\n}\n// go run main.go                                   // 直接运行\n// go build && ./main                               // 先编译成二进制文件再运行\n\n\n\n/*******************************************************************************\n * 操作符\n ******************************************************************************/\n// 算数操作符\n+ - * / %                                           // 加 减 乘 除 取余\n& | ^ &^                                            // 位与 位或 位异或 位与非\n<< >>                                               // 左移 右移\n// 比较操作\n== !=                                               // 等于 不等于\n< <=                                                // 小于 小于等于\n> >=                                                // 大于 大于等于\n// 逻辑操作\n&& || !                                             // 逻辑与 逻辑或 逻辑非\n// 其他\n& * <-                                              // 地址 指针引用 通道操作\n\n\n\n/*******************************************************************************\n * 声明\n ******************************************************************************/\na := 1                                              // 直接给一个未声明的变量赋值\nvar b int                                           // var 变量名 数据类型 来声明\nvar c float64\n// 注意：使用var声明过的变量不可再使用 := 赋值\na = 2\nconst d = 1                                         // 常量\n\n\n\n\n/*******************************************************************************\n * 数据类型\n ******************************************************************************/\ns := \"hello\"                                       // 字符\na := 1                                             // int\nb := 1.2                                           // float64\nc := 1 + 5i                                        // complex128\n// 数组\narr1 := [3]int{4, 5, 6}                           // 手动指定长度\narr2 := [...]int{1, 2, 3}                         // 由golang自动计算长度\n// 切片\nsliceInt := []int{1, 2}                           // 不指定长度\nsliceByte := []byte(\"hello\")\n// 指针\na := 1\npoint := &a                                      // 将a的地址赋给point\n\n\n/*******************************************************************************\n * 流程控制\n ******************************************************************************/\n// for\ni := 10\nfor i > 0 {\n    println(i--)\n}\n// if else\nif i == 10 {\n    println(\"i == 10\")\n} else {\n    println(\"i != 10\")\n}\n// switch\nswitch i {\ncase 10:\n    println(\"i == 10\")\ndefault:\n    println(\"i != 10\")\n}\n\n\n/*******************************************************************************\n * 函数\n ******************************************************************************/\n// 以func关键字声明\nfunc test() {}\n\nf := func() {println(\"Lambdas function\")}     // 匿名函数\nf()\n\nfunc get() (a,b string) {                    // 函数多返回值\n    return \"a\", \"b\"\n}\na, b := get()\n\n\n\n\n/*******************************************************************************\n * 结构体\n ******************************************************************************/\n// golang中没有class只有struct\ntype People struct {\n  Age int                                  // 大写开头的变量在包外可以访问\n  name string                              // 小写开头的变量仅可在本包内访问\n}\np1 := People{25, \"Kaven\"}                 // 必须按照结构体内部定义的顺序\np2 := People{name: \"Kaven\", age: 25}      // 若不按顺序则需要指定字段\n\n// 也可以先不赋值\np3 := new(People)\np3.Age = 25\np3.name = \"Kaven\"\n\n\n/*******************************************************************************\n * 方法\n ******************************************************************************/\n// 方法通常是针对一个结构体来说的\ntype Foo struct {\n  a int\n}\n                                        // 值接收者\nfunc (f Foo) test() {\n  f.a = 1                              // 不会改变原来的值\n}\n                                      // 指针接收者\nfunc (f *Foo) test() {\n  f.a = 1                            // 会改变原值\n}\n\n\n\n/*******************************************************************************\n * go 协程\n ******************************************************************************/\ngo func() {\n    time.Sleep(10 * time.Second)\n    println(\"hello\")\n}()                                // 不会阻塞代码的运行 代码会直接向下运行\n// channel 通道\nc := make(chan int)\n// 两个协程间可以通过chan通信\ngo func() {c <- 1}()              // 此时c会被阻塞 直到值被取走前都不可在塞入新值\ngo func() {println(<-c)}()\n// 带缓存的channel\nbc := make(chan int, 2)\ngo func() {c <- 1; c <-2}()      // c中可以存储声明时所定义的缓存大小的数据，这里是2个\ngo func() {println(<-c)}()\n\n\n\n/*******************************************************************************\n * 接口\n ******************************************************************************/\n// go的接口为鸭子类型，即只要你实现了接口中的方法就实现了该接口\ntype Reader interface {\n    Reading()                  // 仅需实现Reading方法就实现了该接口\n}\n\ntype As struct {}\nfunc (a As) Reading() {}      // 实现了Reader接口\n\ntype Bs struct {}\nfunc (b Bs) Reading() {}      // 也实现了Reader接口\nfunc (b Bs) Closing() {}\n\n\n\n\n/*******************************************************************************\n * 一些推荐\n ******************************************************************************/\n// 入门书籍\n《Go学习笔记》                // 雨痕的\n《Go语言实战》                // 强烈推荐\n// 网上资料\nhttps://github.com/astaxie/build-web-application-with-golang    // 谢大的\nhttps://github.com/Unknwon/the-way-to-go_ZH_CN                  // 无闻\nhttps://github.com/Unknwon/go-fundamental-programming           // 无闻教学视频\n// 第三方类库\nhttps://golanglibs.com/\n// 大杂烩\nhttps://github.com/avelino/awesome-go\n\n\n\n/*******************************************************************************\n * References\n ******************************************************************************/\nhttps://github.com/a8m/go-lang-cheat-sheet\nhttps://github.com/LeCoupa/awesome-cheatsheets\n```\n\n",
    "body_draft": "\n```go\n/*******************************************************************************\n * Golang CHEATSHEET (中文速查表)\n ******************************************************************************/\n\n\n\n /******************************************************************************\n  * Go 编译器命令\n  *****************************************************************************/\ngo command [arguments]                              // go 命令 [参数]\ngo build                                            // 编译包和依赖包\ngo clean                                            // 移除对象和缓存文件\ngo doc                                              // 显示包的文档\ngo env                                              // 打印go的环境变量信息\ngo bug                                              // 报告bug\ngo fix                                              // 更新包使用新的api\ngo fmt                                              // 格式规范化代码\ngo generate                                         // 通过处理资源生成go文件\ngo get                                              // 下载并安装包及其依赖\ngo install                                          // 编译和安装包及其依赖\ngo list                                             // 列出所有包\ngo run                                              // 编译和运行go程序\ngo test                                             // 测试\ngo tool                                             // 运行给定的go工具\ngo version                                          // 显示go当前版本\ngo vet                                              // 发现代码中可能的错误\n\n\n\n/*******************************************************************************\n * Hello World\n ******************************************************************************/\n// main.go\npackage main                                        // 包名\n\nimport \"fmt\"                                        // 导入fmt包\n\nfunc main() {                                       // 主函数\n    fmt.Println(\"Hello World\")                      // 打印输出\n}\n// go run main.go                                   // 直接运行\n// go build && ./main                               // 先编译成二进制文件再运行\n\n\n\n/*******************************************************************************\n * 操作符\n ******************************************************************************/\n// 算数操作符\n+ - * / %                                           // 加 减 乘 除 取余\n& | ^ &^                                            // 位与 位或 位异或 位与非\n<< >>                                               // 左移 右移\n// 比较操作\n== !=                                               // 等于 不等于\n< <=                                                // 小于 小于等于\n> >=                                                // 大于 大于等于\n// 逻辑操作\n&& || !                                             // 逻辑与 逻辑或 逻辑非\n// 其他\n& * <-                                              // 地址 指针引用 通道操作\n\n\n\n/*******************************************************************************\n * 声明\n ******************************************************************************/\na := 1                                              // 直接给一个未声明的变量赋值\nvar b int                                           // var 变量名 数据类型 来声明\nvar c float64\n// 注意：使用var声明过的变量不可再使用 := 赋值\na = 2\nconst d = 1                                         // 常量\n\n\n\n\n/*******************************************************************************\n * 数据类型\n ******************************************************************************/\ns := \"hello\"                                       // 字符\na := 1                                             // int\nb := 1.2                                           // float64\nc := 1 + 5i                                        // complex128\n// 数组\narr1 := [3]int{4, 5, 6}                           // 手动指定长度\narr2 := [...]int{1, 2, 3}                         // 由golang自动计算长度\n// 切片\nsliceInt := []int{1, 2}                           // 不指定长度\nsliceByte := []byte(\"hello\")\n// 指针\na := 1\npoint := &a                                      // 将a的地址赋给point\n\n\n/*******************************************************************************\n * 流程控制\n ******************************************************************************/\n// for\ni := 10\nfor i > 0 {\n    println(i--)\n}\n// if else\nif i == 10 {\n    println(\"i == 10\")\n} else {\n    println(\"i != 10\")\n}\n// switch\nswitch i {\ncase 10:\n    println(\"i == 10\")\ndefault:\n    println(\"i != 10\")\n}\n\n\n/*******************************************************************************\n * 函数\n ******************************************************************************/\n// 以func关键字声明\nfunc test() {}\n\nf := func() {println(\"Lambdas function\")}     // 匿名函数\nf()\n\nfunc get() (a,b string) {                    // 函数多返回值\n    return \"a\", \"b\"\n}\na, b := get()\n\n\n\n\n/*******************************************************************************\n * 结构体\n ******************************************************************************/\n// golang中没有class只有struct\ntype People struct {\n  Age int                                  // 大写开头的变量在包外可以访问\n  name string                              // 小写开头的变量仅可在本包内访问\n}\np1 := People{25, \"Kaven\"}                 // 必须按照结构体内部定义的顺序\np2 := People{name: \"Kaven\", age: 25}      // 若不按顺序则需要指定字段\n\n// 也可以先不赋值\np3 := new(People)\np3.Age = 25\np3.name = \"Kaven\"\n\n\n/*******************************************************************************\n * 方法\n ******************************************************************************/\n// 方法通常是针对一个结构体来说的\ntype Foo struct {\n  a int\n}\n                                        // 值接收者\nfunc (f Foo) test() {\n  f.a = 1                              // 不会改变原来的值\n}\n                                      // 指针接收者\nfunc (f *Foo) test() {\n  f.a = 1                            // 会改变原值\n}\n\n\n\n/*******************************************************************************\n * go 协程\n ******************************************************************************/\ngo func() {\n    time.Sleep(10 * time.Second)\n    println(\"hello\")\n}()                                // 不会阻塞代码的运行 代码会直接向下运行\n// channel 通道\nc := make(chan int)\n// 两个协程间可以通过chan通信\ngo func() {c <- 1}()              // 此时c会被阻塞 直到值被取走前都不可在塞入新值\ngo func() {println(<-c)}()\n// 带缓存的channel\nbc := make(chan int, 2)\ngo func() {c <- 1; c <-2}()      // c中可以存储声明时所定义的缓存大小的数据，这里是2个\ngo func() {println(<-c)}()\n\n\n\n/*******************************************************************************\n * 接口\n ******************************************************************************/\n// go的接口为鸭子类型，即只要你实现了接口中的方法就实现了该接口\ntype Reader interface {\n    Reading()                  // 仅需实现Reading方法就实现了该接口\n}\n\ntype As struct {}\nfunc (a As) Reading() {}      // 实现了Reader接口\n\ntype Bs struct {}\nfunc (b Bs) Reading() {}      // 也实现了Reader接口\nfunc (b Bs) Closing() {}\n\n\n\n\n/*******************************************************************************\n * 一些推荐\n ******************************************************************************/\n// 入门书籍\n《Go学习笔记》                // 雨痕的\n《Go语言实战》                // 强烈推荐\n// 网上资料\nhttps://github.com/astaxie/build-web-application-with-golang    // 谢大的\nhttps://github.com/Unknwon/the-way-to-go_ZH_CN                  // 无闻\nhttps://github.com/Unknwon/go-fundamental-programming           // 无闻教学视频\n// 第三方类库\nhttps://golanglibs.com/\n// 大杂烩\nhttps://github.com/avelino/awesome-go\n\n\n\n/*******************************************************************************\n * References\n ******************************************************************************/\nhttps://github.com/a8m/go-lang-cheat-sheet\nhttps://github.com/LeCoupa/awesome-cheatsheets\n\n```\n\n",
    "body_html": "<p><br /></p><pre data-lang=\"go\"><code>/*******************************************************************************\n * Golang CHEATSHEET (中文速查表)\n ******************************************************************************/\n\n\n\n /******************************************************************************\n  * Go 编译器命令\n  *****************************************************************************/\ngo command [arguments]                              // go 命令 [参数]\ngo build                                            // 编译包和依赖包\ngo clean                                            // 移除对象和缓存文件\ngo doc                                              // 显示包的文档\ngo env                                              // 打印go的环境变量信息\ngo bug                                              // 报告bug\ngo fix                                              // 更新包使用新的api\ngo fmt                                              // 格式规范化代码\ngo generate                                         // 通过处理资源生成go文件\ngo get                                              // 下载并安装包及其依赖\ngo install                                          // 编译和安装包及其依赖\ngo list                                             // 列出所有包\ngo run                                              // 编译和运行go程序\ngo test                                             // 测试\ngo tool                                             // 运行给定的go工具\ngo version                                          // 显示go当前版本\ngo vet                                              // 发现代码中可能的错误\n\n\n\n/*******************************************************************************\n * Hello World\n ******************************************************************************/\n// main.go\npackage main                                        // 包名\n\nimport &quot;fmt&quot;                                        // 导入fmt包\n\nfunc main() {                                       // 主函数\n    fmt.Println(&quot;Hello World&quot;)                      // 打印输出\n}\n// go run main.go                                   // 直接运行\n// go build &amp;&amp; ./main                               // 先编译成二进制文件再运行\n\n\n\n/*******************************************************************************\n * 操作符\n ******************************************************************************/\n// 算数操作符\n+ - * / %                                           // 加 减 乘 除 取余\n&amp; | ^ &amp;^                                            // 位与 位或 位异或 位与非\n&lt;&lt; &gt;&gt;                                               // 左移 右移\n// 比较操作\n== !=                                               // 等于 不等于\n&lt; &lt;=                                                // 小于 小于等于\n&gt; &gt;=                                                // 大于 大于等于\n// 逻辑操作\n&amp;&amp; || !                                             // 逻辑与 逻辑或 逻辑非\n// 其他\n&amp; * &lt;-                                              // 地址 指针引用 通道操作\n\n\n\n/*******************************************************************************\n * 声明\n ******************************************************************************/\na := 1                                              // 直接给一个未声明的变量赋值\nvar b int                                           // var 变量名 数据类型 来声明\nvar c float64\n// 注意：使用var声明过的变量不可再使用 := 赋值\na = 2\nconst d = 1                                         // 常量\n\n\n\n\n/*******************************************************************************\n * 数据类型\n ******************************************************************************/\ns := &quot;hello&quot;                                       // 字符\na := 1                                             // int\nb := 1.2                                           // float64\nc := 1 + 5i                                        // complex128\n// 数组\narr1 := [3]int{4, 5, 6}                           // 手动指定长度\narr2 := [...]int{1, 2, 3}                         // 由golang自动计算长度\n// 切片\nsliceInt := []int{1, 2}                           // 不指定长度\nsliceByte := []byte(&quot;hello&quot;)\n// 指针\na := 1\npoint := &amp;a                                      // 将a的地址赋给point\n\n\n/*******************************************************************************\n * 流程控制\n ******************************************************************************/\n// for\ni := 10\nfor i &gt; 0 {\n    println(i--)\n}\n// if else\nif i == 10 {\n    println(&quot;i == 10&quot;)\n} else {\n    println(&quot;i != 10&quot;)\n}\n// switch\nswitch i {\ncase 10:\n    println(&quot;i == 10&quot;)\ndefault:\n    println(&quot;i != 10&quot;)\n}\n\n\n/*******************************************************************************\n * 函数\n ******************************************************************************/\n// 以func关键字声明\nfunc test() {}\n\nf := func() {println(&quot;Lambdas function&quot;)}     // 匿名函数\nf()\n\nfunc get() (a,b string) {                    // 函数多返回值\n    return &quot;a&quot;, &quot;b&quot;\n}\na, b := get()\n\n\n\n\n/*******************************************************************************\n * 结构体\n ******************************************************************************/\n// golang中没有class只有struct\ntype People struct {\n  Age int                                  // 大写开头的变量在包外可以访问\n  name string                              // 小写开头的变量仅可在本包内访问\n}\np1 := People{25, &quot;Kaven&quot;}                 // 必须按照结构体内部定义的顺序\np2 := People{name: &quot;Kaven&quot;, age: 25}      // 若不按顺序则需要指定字段\n\n// 也可以先不赋值\np3 := new(People)\np3.Age = 25\np3.name = &quot;Kaven&quot;\n\n\n/*******************************************************************************\n * 方法\n ******************************************************************************/\n// 方法通常是针对一个结构体来说的\ntype Foo struct {\n  a int\n}\n                                        // 值接收者\nfunc (f Foo) test() {\n  f.a = 1                              // 不会改变原来的值\n}\n                                      // 指针接收者\nfunc (f *Foo) test() {\n  f.a = 1                            // 会改变原值\n}\n\n\n\n/*******************************************************************************\n * go 协程\n ******************************************************************************/\ngo func() {\n    time.Sleep(10 * time.Second)\n    println(&quot;hello&quot;)\n}()                                // 不会阻塞代码的运行 代码会直接向下运行\n// channel 通道\nc := make(chan int)\n// 两个协程间可以通过chan通信\ngo func() {c &lt;- 1}()              // 此时c会被阻塞 直到值被取走前都不可在塞入新值\ngo func() {println(&lt;-c)}()\n// 带缓存的channel\nbc := make(chan int, 2)\ngo func() {c &lt;- 1; c &lt;-2}()      // c中可以存储声明时所定义的缓存大小的数据，这里是2个\ngo func() {println(&lt;-c)}()\n\n\n\n/*******************************************************************************\n * 接口\n ******************************************************************************/\n// go的接口为鸭子类型，即只要你实现了接口中的方法就实现了该接口\ntype Reader interface {\n    Reading()                  // 仅需实现Reading方法就实现了该接口\n}\n\ntype As struct {}\nfunc (a As) Reading() {}      // 实现了Reader接口\n\ntype Bs struct {}\nfunc (b Bs) Reading() {}      // 也实现了Reader接口\nfunc (b Bs) Closing() {}\n\n\n\n\n/*******************************************************************************\n * 一些推荐\n ******************************************************************************/\n// 入门书籍\n《Go学习笔记》                // 雨痕的\n《Go语言实战》                // 强烈推荐\n// 网上资料\nhttps://github.com/astaxie/build-web-application-with-golang    // 谢大的\nhttps://github.com/Unknwon/the-way-to-go_ZH_CN                  // 无闻\nhttps://github.com/Unknwon/go-fundamental-programming           // 无闻教学视频\n// 第三方类库\nhttps://golanglibs.com/\n// 大杂烩\nhttps://github.com/avelino/awesome-go\n\n\n\n/*******************************************************************************\n * References\n ******************************************************************************/\nhttps://github.com/a8m/go-lang-cheat-sheet\nhttps://github.com/LeCoupa/awesome-cheatsheets</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%227698d208%22%2C%22mode%22%3A%22go%22%2C%22code%22%3A%22%2F*******************************************************************************%5Cn%20*%20Golang%20CHEATSHEET%20(%E4%B8%AD%E6%96%87%E9%80%9F%E6%9F%A5%E8%A1%A8)%5Cn%20******************************************************************************%2F%5Cn%5Cn%5Cn%5Cn%20%2F******************************************************************************%5Cn%20%20*%20Go%20%E7%BC%96%E8%AF%91%E5%99%A8%E5%91%BD%E4%BB%A4%5Cn%20%20*****************************************************************************%2F%5Cngo%20command%20%5Barguments%5D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20go%20%E5%91%BD%E4%BB%A4%20%5B%E5%8F%82%E6%95%B0%5D%5Cngo%20build%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%BC%96%E8%AF%91%E5%8C%85%E5%92%8C%E4%BE%9D%E8%B5%96%E5%8C%85%5Cngo%20clean%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%A7%BB%E9%99%A4%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6%5Cngo%20doc%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%98%BE%E7%A4%BA%E5%8C%85%E7%9A%84%E6%96%87%E6%A1%A3%5Cngo%20env%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%89%93%E5%8D%B0go%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%BF%A1%E6%81%AF%5Cngo%20bug%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%8A%A5%E5%91%8Abug%5Cngo%20fix%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9B%B4%E6%96%B0%E5%8C%85%E4%BD%BF%E7%94%A8%E6%96%B0%E7%9A%84api%5Cngo%20fmt%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83%E5%8C%96%E4%BB%A3%E7%A0%81%5Cngo%20generate%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87%E5%A4%84%E7%90%86%E8%B5%84%E6%BA%90%E7%94%9F%E6%88%90go%E6%96%87%E4%BB%B6%5Cngo%20get%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%8B%E8%BD%BD%E5%B9%B6%E5%AE%89%E8%A3%85%E5%8C%85%E5%8F%8A%E5%85%B6%E4%BE%9D%E8%B5%96%5Cngo%20install%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%BC%96%E8%AF%91%E5%92%8C%E5%AE%89%E8%A3%85%E5%8C%85%E5%8F%8A%E5%85%B6%E4%BE%9D%E8%B5%96%5Cngo%20list%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E5%8C%85%5Cngo%20run%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%BC%96%E8%AF%91%E5%92%8C%E8%BF%90%E8%A1%8Cgo%E7%A8%8B%E5%BA%8F%5Cngo%20test%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%B5%8B%E8%AF%95%5Cngo%20tool%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%BF%90%E8%A1%8C%E7%BB%99%E5%AE%9A%E7%9A%84go%E5%B7%A5%E5%85%B7%5Cngo%20version%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%98%BE%E7%A4%BAgo%E5%BD%93%E5%89%8D%E7%89%88%E6%9C%AC%5Cngo%20vet%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E7%8E%B0%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%8F%AF%E8%83%BD%E7%9A%84%E9%94%99%E8%AF%AF%5Cn%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20Hello%20World%5Cn%20******************************************************************************%2F%5Cn%2F%2F%20main.go%5Cnpackage%20main%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8C%85%E5%90%8D%5Cn%5Cnimport%20%5C%22fmt%5C%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AF%BC%E5%85%A5fmt%E5%8C%85%5Cn%5Cnfunc%20main()%20%7B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%BB%E5%87%BD%E6%95%B0%5Cn%20%20%20%20fmt.Println(%5C%22Hello%20World%5C%22)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%89%93%E5%8D%B0%E8%BE%93%E5%87%BA%5Cn%7D%5Cn%2F%2F%20go%20run%20main.go%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8C%5Cn%2F%2F%20go%20build%20%26%26%20.%2Fmain%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%85%88%E7%BC%96%E8%AF%91%E6%88%90%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%86%8D%E8%BF%90%E8%A1%8C%5Cn%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20%E6%93%8D%E4%BD%9C%E7%AC%A6%5Cn%20******************************************************************************%2F%5Cn%2F%2F%20%E7%AE%97%E6%95%B0%E6%93%8D%E4%BD%9C%E7%AC%A6%5Cn%2B%20-%20*%20%2F%20%25%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%8A%A0%20%E5%87%8F%20%E4%B9%98%20%E9%99%A4%20%E5%8F%96%E4%BD%99%5Cn%26%20%7C%20%5E%20%26%5E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%8D%E4%B8%8E%20%E4%BD%8D%E6%88%96%20%E4%BD%8D%E5%BC%82%E6%88%96%20%E4%BD%8D%E4%B8%8E%E9%9D%9E%5Cn%3C%3C%20%3E%3E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B7%A6%E7%A7%BB%20%E5%8F%B3%E7%A7%BB%5Cn%2F%2F%20%E6%AF%94%E8%BE%83%E6%93%8D%E4%BD%9C%5Cn%3D%3D%20!%3D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%AD%89%E4%BA%8E%20%E4%B8%8D%E7%AD%89%E4%BA%8E%5Cn%3C%20%3C%3D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%8F%E4%BA%8E%20%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E%5Cn%3E%20%3E%3D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%A7%E4%BA%8E%20%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%5Cn%2F%2F%20%E9%80%BB%E8%BE%91%E6%93%8D%E4%BD%9C%5Cn%26%26%20%7C%7C%20!%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%80%BB%E8%BE%91%E4%B8%8E%20%E9%80%BB%E8%BE%91%E6%88%96%20%E9%80%BB%E8%BE%91%E9%9D%9E%5Cn%2F%2F%20%E5%85%B6%E4%BB%96%5Cn%26%20*%20%3C-%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%9C%B0%E5%9D%80%20%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%20%E9%80%9A%E9%81%93%E6%93%8D%E4%BD%9C%5Cn%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20%E5%A3%B0%E6%98%8E%5Cn%20******************************************************************************%2F%5Cna%20%3A%3D%201%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%9B%B4%E6%8E%A5%E7%BB%99%E4%B8%80%E4%B8%AA%E6%9C%AA%E5%A3%B0%E6%98%8E%E7%9A%84%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%5Cnvar%20b%20int%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20var%20%E5%8F%98%E9%87%8F%E5%90%8D%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E6%9D%A5%E5%A3%B0%E6%98%8E%5Cnvar%20c%20float64%5Cn%2F%2F%20%E6%B3%A8%E6%84%8F%EF%BC%9A%E4%BD%BF%E7%94%A8var%E5%A3%B0%E6%98%8E%E8%BF%87%E7%9A%84%E5%8F%98%E9%87%8F%E4%B8%8D%E5%8F%AF%E5%86%8D%E4%BD%BF%E7%94%A8%20%3A%3D%20%E8%B5%8B%E5%80%BC%5Cna%20%3D%202%5Cnconst%20d%20%3D%201%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B8%B8%E9%87%8F%5Cn%5Cn%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cn%20******************************************************************************%2F%5Cns%20%3A%3D%20%5C%22hello%5C%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AD%97%E7%AC%A6%5Cna%20%3A%3D%201%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20int%5Cnb%20%3A%3D%201.2%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20float64%5Cnc%20%3A%3D%201%20%2B%205i%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20complex128%5Cn%2F%2F%20%E6%95%B0%E7%BB%84%5Cnarr1%20%3A%3D%20%5B3%5Dint%7B4%2C%205%2C%206%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%5Cnarr2%20%3A%3D%20%5B...%5Dint%7B1%2C%202%2C%203%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%94%B1golang%E8%87%AA%E5%8A%A8%E8%AE%A1%E7%AE%97%E9%95%BF%E5%BA%A6%5Cn%2F%2F%20%E5%88%87%E7%89%87%5CnsliceInt%20%3A%3D%20%5B%5Dint%7B1%2C%202%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%8D%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%5CnsliceByte%20%3A%3D%20%5B%5Dbyte(%5C%22hello%5C%22)%5Cn%2F%2F%20%E6%8C%87%E9%92%88%5Cna%20%3A%3D%201%5Cnpoint%20%3A%3D%20%26a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86a%E7%9A%84%E5%9C%B0%E5%9D%80%E8%B5%8B%E7%BB%99point%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%5Cn%20******************************************************************************%2F%5Cn%2F%2F%20for%5Cni%20%3A%3D%2010%5Cnfor%20i%20%3E%200%20%7B%5Cn%20%20%20%20println(i--)%5Cn%7D%5Cn%2F%2F%20if%20else%5Cnif%20i%20%3D%3D%2010%20%7B%5Cn%20%20%20%20println(%5C%22i%20%3D%3D%2010%5C%22)%5Cn%7D%20else%20%7B%5Cn%20%20%20%20println(%5C%22i%20!%3D%2010%5C%22)%5Cn%7D%5Cn%2F%2F%20switch%5Cnswitch%20i%20%7B%5Cncase%2010%3A%5Cn%20%20%20%20println(%5C%22i%20%3D%3D%2010%5C%22)%5Cndefault%3A%5Cn%20%20%20%20println(%5C%22i%20!%3D%2010%5C%22)%5Cn%7D%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20%E5%87%BD%E6%95%B0%5Cn%20******************************************************************************%2F%5Cn%2F%2F%20%E4%BB%A5func%E5%85%B3%E9%94%AE%E5%AD%97%E5%A3%B0%E6%98%8E%5Cnfunc%20test()%20%7B%7D%5Cn%5Cnf%20%3A%3D%20func()%20%7Bprintln(%5C%22Lambdas%20function%5C%22)%7D%20%20%20%20%20%2F%2F%20%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%5Cnf()%5Cn%5Cnfunc%20get()%20(a%2Cb%20string)%20%7B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%87%BD%E6%95%B0%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%20%20%20%20return%20%5C%22a%5C%22%2C%20%5C%22b%5C%22%5Cn%7D%5Cna%2C%20b%20%3A%3D%20get()%5Cn%5Cn%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20%E7%BB%93%E6%9E%84%E4%BD%93%5Cn%20******************************************************************************%2F%5Cn%2F%2F%20golang%E4%B8%AD%E6%B2%A1%E6%9C%89class%E5%8F%AA%E6%9C%89struct%5Cntype%20People%20struct%20%7B%5Cn%20%20Age%20int%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%A7%E5%86%99%E5%BC%80%E5%A4%B4%E7%9A%84%E5%8F%98%E9%87%8F%E5%9C%A8%E5%8C%85%E5%A4%96%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%5Cn%20%20name%20string%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%8F%E5%86%99%E5%BC%80%E5%A4%B4%E7%9A%84%E5%8F%98%E9%87%8F%E4%BB%85%E5%8F%AF%E5%9C%A8%E6%9C%AC%E5%8C%85%E5%86%85%E8%AE%BF%E9%97%AE%5Cn%7D%5Cnp1%20%3A%3D%20People%7B25%2C%20%5C%22Kaven%5C%22%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%BF%85%E9%A1%BB%E6%8C%89%E7%85%A7%E7%BB%93%E6%9E%84%E4%BD%93%E5%86%85%E9%83%A8%E5%AE%9A%E4%B9%89%E7%9A%84%E9%A1%BA%E5%BA%8F%5Cnp2%20%3A%3D%20People%7Bname%3A%20%5C%22Kaven%5C%22%2C%20age%3A%2025%7D%20%20%20%20%20%20%2F%2F%20%E8%8B%A5%E4%B8%8D%E6%8C%89%E9%A1%BA%E5%BA%8F%E5%88%99%E9%9C%80%E8%A6%81%E6%8C%87%E5%AE%9A%E5%AD%97%E6%AE%B5%5Cn%5Cn%2F%2F%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%85%88%E4%B8%8D%E8%B5%8B%E5%80%BC%5Cnp3%20%3A%3D%20new(People)%5Cnp3.Age%20%3D%2025%5Cnp3.name%20%3D%20%5C%22Kaven%5C%22%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20%E6%96%B9%E6%B3%95%5Cn%20******************************************************************************%2F%5Cn%2F%2F%20%E6%96%B9%E6%B3%95%E9%80%9A%E5%B8%B8%E6%98%AF%E9%92%88%E5%AF%B9%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%84%E4%BD%93%E6%9D%A5%E8%AF%B4%E7%9A%84%5Cntype%20Foo%20struct%20%7B%5Cn%20%20a%20int%5Cn%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%80%BC%E6%8E%A5%E6%94%B6%E8%80%85%5Cnfunc%20(f%20Foo)%20test()%20%7B%5Cn%20%20f.a%20%3D%201%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%8D%E4%BC%9A%E6%94%B9%E5%8F%98%E5%8E%9F%E6%9D%A5%E7%9A%84%E5%80%BC%5Cn%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%8C%87%E9%92%88%E6%8E%A5%E6%94%B6%E8%80%85%5Cnfunc%20(f%20*Foo)%20test()%20%7B%5Cn%20%20f.a%20%3D%201%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BC%9A%E6%94%B9%E5%8F%98%E5%8E%9F%E5%80%BC%5Cn%7D%5Cn%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20go%20%E5%8D%8F%E7%A8%8B%5Cn%20******************************************************************************%2F%5Cngo%20func()%20%7B%5Cn%20%20%20%20time.Sleep(10%20*%20time.Second)%5Cn%20%20%20%20println(%5C%22hello%5C%22)%5Cn%7D()%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%8D%E4%BC%9A%E9%98%BB%E5%A1%9E%E4%BB%A3%E7%A0%81%E7%9A%84%E8%BF%90%E8%A1%8C%20%E4%BB%A3%E7%A0%81%E4%BC%9A%E7%9B%B4%E6%8E%A5%E5%90%91%E4%B8%8B%E8%BF%90%E8%A1%8C%5Cn%2F%2F%20channel%20%E9%80%9A%E9%81%93%5Cnc%20%3A%3D%20make(chan%20int)%5Cn%2F%2F%20%E4%B8%A4%E4%B8%AA%E5%8D%8F%E7%A8%8B%E9%97%B4%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87chan%E9%80%9A%E4%BF%A1%5Cngo%20func()%20%7Bc%20%3C-%201%7D()%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%AD%A4%E6%97%B6c%E4%BC%9A%E8%A2%AB%E9%98%BB%E5%A1%9E%20%E7%9B%B4%E5%88%B0%E5%80%BC%E8%A2%AB%E5%8F%96%E8%B5%B0%E5%89%8D%E9%83%BD%E4%B8%8D%E5%8F%AF%E5%9C%A8%E5%A1%9E%E5%85%A5%E6%96%B0%E5%80%BC%5Cngo%20func()%20%7Bprintln(%3C-c)%7D()%5Cn%2F%2F%20%E5%B8%A6%E7%BC%93%E5%AD%98%E7%9A%84channel%5Cnbc%20%3A%3D%20make(chan%20int%2C%202)%5Cngo%20func()%20%7Bc%20%3C-%201%3B%20c%20%3C-2%7D()%20%20%20%20%20%20%2F%2F%20c%E4%B8%AD%E5%8F%AF%E4%BB%A5%E5%AD%98%E5%82%A8%E5%A3%B0%E6%98%8E%E6%97%B6%E6%89%80%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BC%93%E5%AD%98%E5%A4%A7%E5%B0%8F%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%BF%99%E9%87%8C%E6%98%AF2%E4%B8%AA%5Cngo%20func()%20%7Bprintln(%3C-c)%7D()%5Cn%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20%E6%8E%A5%E5%8F%A3%5Cn%20******************************************************************************%2F%5Cn%2F%2F%20go%E7%9A%84%E6%8E%A5%E5%8F%A3%E4%B8%BA%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8D%B3%E5%8F%AA%E8%A6%81%E4%BD%A0%E5%AE%9E%E7%8E%B0%E4%BA%86%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95%E5%B0%B1%E5%AE%9E%E7%8E%B0%E4%BA%86%E8%AF%A5%E6%8E%A5%E5%8F%A3%5Cntype%20Reader%20interface%20%7B%5Cn%20%20%20%20Reading()%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%85%E9%9C%80%E5%AE%9E%E7%8E%B0Reading%E6%96%B9%E6%B3%95%E5%B0%B1%E5%AE%9E%E7%8E%B0%E4%BA%86%E8%AF%A5%E6%8E%A5%E5%8F%A3%5Cn%7D%5Cn%5Cntype%20As%20struct%20%7B%7D%5Cnfunc%20(a%20As)%20Reading()%20%7B%7D%20%20%20%20%20%20%2F%2F%20%E5%AE%9E%E7%8E%B0%E4%BA%86Reader%E6%8E%A5%E5%8F%A3%5Cn%5Cntype%20Bs%20struct%20%7B%7D%5Cnfunc%20(b%20Bs)%20Reading()%20%7B%7D%20%20%20%20%20%20%2F%2F%20%E4%B9%9F%E5%AE%9E%E7%8E%B0%E4%BA%86Reader%E6%8E%A5%E5%8F%A3%5Cnfunc%20(b%20Bs)%20Closing()%20%7B%7D%5Cn%5Cn%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20%E4%B8%80%E4%BA%9B%E6%8E%A8%E8%8D%90%5Cn%20******************************************************************************%2F%5Cn%2F%2F%20%E5%85%A5%E9%97%A8%E4%B9%A6%E7%B1%8D%5Cn%E3%80%8AGo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%8B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%9B%A8%E7%97%95%E7%9A%84%5Cn%E3%80%8AGo%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E3%80%8B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%BC%BA%E7%83%88%E6%8E%A8%E8%8D%90%5Cn%2F%2F%20%E7%BD%91%E4%B8%8A%E8%B5%84%E6%96%99%5Cnhttps%3A%2F%2Fgithub.com%2Fastaxie%2Fbuild-web-application-with-golang%20%20%20%20%2F%2F%20%E8%B0%A2%E5%A4%A7%E7%9A%84%5Cnhttps%3A%2F%2Fgithub.com%2FUnknwon%2Fthe-way-to-go_ZH_CN%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%97%A0%E9%97%BB%5Cnhttps%3A%2F%2Fgithub.com%2FUnknwon%2Fgo-fundamental-programming%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%97%A0%E9%97%BB%E6%95%99%E5%AD%A6%E8%A7%86%E9%A2%91%5Cn%2F%2F%20%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B1%BB%E5%BA%93%5Cnhttps%3A%2F%2Fgolanglibs.com%2F%5Cn%2F%2F%20%E5%A4%A7%E6%9D%82%E7%83%A9%5Cnhttps%3A%2F%2Fgithub.com%2Favelino%2Fawesome-go%5Cn%5Cn%5Cn%5Cn%2F*******************************************************************************%5Cn%20*%20References%5Cn%20******************************************************************************%2F%5Cnhttps%3A%2F%2Fgithub.com%2Fa8m%2Fgo-lang-cheat-sheet%5Cnhttps%3A%2F%2Fgithub.com%2FLeCoupa%2Fawesome-cheatsheets%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-19T15:05:57.000Z",
    "deleted_at": null,
    "created_at": "2018-11-19T15:04:30.000Z",
    "updated_at": "2018-11-19T15:05:57.000Z",
    "published_at": "2018-11-19T15:05:57.000Z",
    "first_published_at": null,
    "word_count": 1056,
    "cover": null,
    "description": "/*******************************************************************************  * Golang CHEATSHEET (中文速查表)  ************************************...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 981591,
    "slug": "fxx68f",
    "title": "Shell 中文速查表（Cheatsheet）",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "这两天写shell代码的时候，发现好多命令都不太会。后来在网上查，发现一个好东东，和大家分享（中文速查表）\n\n```\n##############################################################################\n# BASH CHEATSHEET (中文速查表) \n##############################################################################\n\n\n##############################################################################\n# 常用快捷键（默认使用 Emacs 键位）\n##############################################################################\n\nCTRL+A              # 移动到行首，同 <Home>\nCTRL+B              # 向后移动，同 <Left>\nCTRL+C              # 结束当前命令\nCTRL+D              # 删除光标前的字符，同 <Delete> ，或者没有内容时，退出会话\nCTRL+E              # 移动到行末，同 <End>\nCTRL+F              # 向前移动，同 <Right>\nCTRL+G              # 退出当前编辑（比如正在 CTRL+R 搜索历史时）\nCTRL+H              # 删除光标左边的字符，同 <Backspace>\nCTRL+K              # 删除光标位置到行末的内容\nCTRL+L              # 清屏并重新显示\nCTRL+N              # 移动到命令历史的下一行，同 <Down>\nCTRL+O              # 类似回车，但是会显示下一行历史\nCTRL+P              # 移动到命令历史的上一行，同 <Up>\nCTRL+R              # 历史命令反向搜索，使用 CTRL+G 退出搜索\nCTRL+S              # 历史命令正向搜索，使用 CTRL+G 退出搜索\nCTRL+T              # 交换前后两个字符\nCTRL+U              # 删除字符到行首\nCTRL+V              # 输入字符字面量，先按 CTRL+V 再按任意键\nCTRL+W              # 删除光标左边的一个单词\nCTRL+X              # 列出可能的补全\nCTRL+Y              # 粘贴前面 CTRL+u/k/w 删除过的内容\nCTRL+Z              # 暂停前台进程返回 bash，需要时可用 fg 将其切换回前台\nCTRL+_              # 撤销（undo），有的终端将 CTRL+_ 映射为 CTRL+/ 或 CTRL+7\n\nALT+b               # 向后（左边）移动一个单词\nALT+d               # 删除光标后（右边）一个单词\nALT+f               # 向前（右边）移动一个单词\nALT+t               # 交换字符\nALT+BACKSPACE       # 删除光标前面一个单词，类似 CTRL+W，但不影响剪贴板\n\nCTRL+X CTRL+X       # 连续按两次 CTRL+X，光标在当前位置和行首来回跳转 \nCTRL+X CTRL+E       # 用你指定的编辑器，编辑当前命令\n\n\n##############################################################################\n# BASH 基本操作\n##############################################################################\n\nexit                # 退出当前登陆\nenv                 # 显示环境变量\necho $SHELL         # 显示你在使用什么 SHELL\n\nbash                # 使用 bash，用 exit 返回\nwhich bash          # 搜索 $PATH，查找哪个程序对应命令 bash\nwhereis bash        # 搜索可执行，头文件和帮助信息的位置，使用系统内建数据库\nwhatis bash         # 查看某个命令的解释，一句话告诉你这是干什么的\n\nclear               # 清初屏幕内容\nreset               # 重置终端（当你不小心 cat 了一个二进制，终端状态乱掉时使用）\n\n\n##############################################################################\n# 目录操作\n##############################################################################\n\ncd                  # 返回自己 $HOME 目录\ncd {dirname}        # 进入目录\npwd                 # 显示当前所在目录\nmkdir {dirname}     # 创建目录\nmkdir -p {dirname}  # 递归创建目录\npushd {dirname}     # 目录压栈并进入新目录\npopd                # 弹出并进入栈顶的目录\ndirs -v             # 列出当前目录栈\ncd -                # 回到之前的目录\ncd -{N}             # 切换到目录栈中的第 N个目录，比如 cd -2 将切换到第二个\n\n\n##############################################################################\n# 文件操作\n##############################################################################\n\nls                  # 显示当前目录内容，后面可接目录名：ls {dir} 显示指定目录\nls -l               # 列表方式显示目录内容，包括文件日期，大小，权限等信息\nls -a               # 显示所有文件和目录，包括隐藏文件（.开头的文件/目录名）\nln -s {fn} {link}   # 给指定文件创建一个软链接\ncp {src} {dest}     # 拷贝文件，cp -r dir1 dir2 可以递归拷贝（目录）\nrm {fn}             # 删除文件，rm -r 递归删除目录，rm -f 强制删除\nmv {src} {dest}     # 移动文件，如果 dest 是目录，则移动，是文件名则覆盖\ntouch {fn}          # 创建或者更新一下制定文件\ncat {fn}            # 输出文件原始内容\nany_cmd > {fn}      # 执行任意命令并将标准输出重定向到指定文件\nmore {fn}           # 逐屏显示某文件内容，空格翻页，q 退出\nless {fn}           # 更高级点的 more，更多操作，q 退出\nhead {fn}           # 显示文件头部数行，可用 head -3 abc.txt 显示头三行\ntail {fn}           # 显示文件尾部数行，可用 tail -3 abc.txt 显示尾部三行\ntail -f {fn}        # 持续显示文件尾部数据，可用于监控日志\nnano {fn}           # 使用 nano 编辑器编辑文件\nvim {fn}            # 使用 vim 编辑文件\ndiff {f1} {f2}      # 比较两个文件的内容\nwc {fn}             # 统计文件有多少行，多少个单词\nchmod 644 {fn}      # 修改文件权限为 644，可以接 -R 对目录循环改权限\nchgrp group {fn}    # 修改文件所属的用户组\nchown user1 {fn}    # 修改文件所有人为 user1, chown user1:group1 fn 可以修改组\nfile {fn}           # 检测文件的类型和编码\nbasename {fn}       # 查看文件的名字（不包括路径）\ndirname {fn}        # 查看文件的路径（不包括名字）\ngrep {pat} {fn}     # 在文件中查找出现过 pat 的内容\ngrep -r {pat} .     # 在当前目录下递归查找所有出现过 pat 的文件内容\nstat {fn}           # 显示文件的详细信息\n\n\n##############################################################################\n# 用户管理\n##############################################################################\n\nwhoami              # 显示我的用户名\nwho                 # 显示已登陆用户信息，w / who / users 内容略有不同\nw                   # 显示已登陆用户信息，w / who / users 内容略有不同\nusers               # 显示已登陆用户信息，w / who / users 内容略有不同\npasswd              # 修改密码，passwd {user} 可以用于 root 修改别人密码\nfinger {user}       # 显示某用户信息，包括 id, 名字, 登陆状态等\nadduser {user}      # 添加用户\ndeluser {user}      # 删除用户\nw                   # 查看谁在线\nsu                  # 切换到 root 用户\nsu -                # 切换到 root 用户并登陆（执行登陆脚本）\nsu {user}           # 切换到某用户\nsu -{user}          # 切换到某用户并登陆（执行登陆脚本）\nid {user}           # 查看用户的 uid，gid 以及所属其他用户组\nid -u {user}        # 打印用户 uid\nid -g {user}        # 打印用户 gid\nwrite {user}        # 向某用户发送一句消息\nlast                # 显示最近用户登陆列表\nlast {user}         # 显示登陆记录\nlastb               # 显示失败登陆记录\nlastlog             # 显示所有用户的最近登陆记录\nsudo {command}      # 以 root 权限执行某命令\n\n\n##############################################################################\n# 进程管理\n##############################################################################\n\nps                        # 查看当前会话进程\nps ax                     # 查看所有进程，类似 ps -e\nps aux                    # 查看所有进程详细信息，类似 ps -ef\nps auxww                  # 查看所有进程，并且显示进程的完整启动命令\nps -u {user}              # 查看某用户进程\nps axjf                   # 列出进程树\nps xjf -u {user}          # 列出某用户的进程树\nps -eo pid,user,command   # 按用户指定的格式查看进程\nps aux | grep httpd       # 查看名为 httpd 的所有进程\nps --ppid {pid}           # 查看父进程为 pid 的所有进程\npstree                    # 树形列出所有进程，pstree 默认一般不带，需安装\npstree {user}             # 进程树列出某用户的进程\npstree -u                 # 树形列出所有进程以及所属用户\npgrep {procname}          # 搜索名字匹配的进程的 pid，比如 pgrep apache2\n\nkill {pid}                # 结束进程\nkill -9 {pid}             # 强制结束进程，9/SIGKILL 是强制不可捕获结束信号\nkill -KILL {pid}          # 强制执行进程，kill -9 的另外一种写法\nkill -l                   # 查看所有信号\nkill -l TERM              # 查看 TERM 信号的编号\nkillall {procname}        # 按名称结束所有进程\npkill {procname}          # 按名称结束进程，除名称外还可以有其他参数\n\ntop                       # 查看最活跃的进程\ntop -u {user}             # 查看某用户最活跃的进程\n\nany_command &             # 在后台运行某命令，也可用 CTRL+Z 将当前进程挂到后台\njobs                      # 查看所有后台进程（jobs）\nbg                        # 查看后台进程，并切换过去\nfg                        # 切换后台进程到前台\nfg {job}                  # 切换特定后台进程到前台\n\ntrap cmd sig1 sig2        # 在脚本中设置信号处理命令\ntrap \"\" sig1 sig2         # 在脚本中屏蔽某信号\ntrap - sig1 sig2          # 恢复默认信号处理行为\n\nnohup {command}           # 长期运行某程序，在你退出登陆都保持它运行\nnohup {command} &         # 在后台长期运行某程序\ndisown {PID|JID}          # 将进程从后台任务列表（jobs）移除\n\nwait                      # 等待所有后台进程任务结束\n\n\n##############################################################################\n# 常用命令：SSH / 系统信息 / 网络\n##############################################################################\n\nssh user@host             # 以用户 user 登陆到远程主机 host\nssh -p {port} user@host   # 指定端口登陆主机\nssh-copy-id user@host     # 拷贝你的 ssh key 到远程主机，避免重复输入密码\nscp {fn} user@host:path   # 拷贝文件到远程主机\nscp user@host:path dest   # 从远程主机拷贝文件回来\nscp -P {port} ...         # 指定端口远程拷贝文件\n\nuname -a                  # 查看内核版本等信息\nman {help}                # 查看帮助\nman -k {keyword}          # 查看哪些帮助文档里包含了该关键字\ninfo {help}               # 查看 info pages，比 man 更强的帮助系统\nuptime                    # 查看系统启动时间\ndate                      # 显示日期\ncal                       # 显示日历\nvmstat                    # 显示内存和 CPU 使用情况\nvmstat 10                 # 每 10 秒打印一行内存和 CPU情况，CTRL+C 退出\nfree                      # 显示内存和交换区使用情况\ndf                        # 显示磁盘使用情况\ndu                        # 显示当前目录占用，du . --max-depth=2 可以指定深度\nuname                     # 显示系统版本号\nhostname                  # 显示主机名称\nshowkey -a                # 查看终端发送的按键编码\n\nping {host}               # ping 远程主机并显示结果，CTRL+C 退出\nping -c N {host}          # ping 远程主机 N 次\ntraceroute {host}         # 侦测路由连通情况\nmtr {host}                # 高级版本 traceroute\nhost {domain}             # DNS 查询，{domain} 前面可加 -a 查看详细信息\nwhois {domain}            # 取得域名 whois 信息\ndig {domain}              # 取得域名 dns 信息\nroute -n                  # 查看路由表\nnetstat -a                # 列出所有端口\nnetstat -an               # 查看所有连接信息，不解析域名\nnetstat -anp              # 查看所有连接信息，包含进程信息（需要 sudo）\nnetstat -l                # 查看所有监听的端口\nnetstat -t                # 查看所有 TCP 链接\nnetstat -lntu             # 显示所有正在监听的 TCP 和 UDP 信息\nnetstat -lntup            # 显示所有正在监听的 socket 及进程信息\nnetstat -i                # 显示网卡信息\nnetstat -rn               # 显示当前系统路由表，同 route -n\nss -an                    # 比 netstat -an 更快速更详细\nss -s                     # 统计 TCP 的 established, wait 等\n\nwget {url}                # 下载文件，可加 --no-check-certificate 忽略 ssl 验证\nwget -qO- {url}           # 下载文件并输出到标准输出（不保存）\ncurl -sL {url}            # 同 wget -qO- {url} 没有 wget 的时候使用\n\nsz {file}                 # 发送文件到终端，zmodem 协议\nrz                        # 接收终端发送过来的文件\n\n\n##############################################################################\n# 变量操作\n##############################################################################\n\nvarname=value             # 定义变量\nvarname=value command     # 定义子进程变量并执行子进程\necho $varname             # 查看变量内容\necho $$                   # 查看当前 shell 的进程号\necho $!                   # 查看最近调用的后台任务进程号\necho $?                   # 查看最近一条命令的返回码\nexport VARNAME=value      # 设置环境变量（将会影响到子进程）\n\narray[0]=valA             # 定义数组\narray[1]=valB\narray[2]=valC\narray=([0]=valA [1]=valB [2]=valC)   # 另一种方式\narray=(valA valB valC)               # 另一种方式\n\n${array[i]}               # 取得数组中的元素\n${#array[@]}              # 取得数组的长度\n${#array[i]}              # 取得数组中某个变量的长度\n\ndeclare -a                # 查看所有数组\ndeclare -f                # 查看所有函数\ndeclare -F                # 查看所有函数，仅显示函数名\ndeclare -i                # 查看所有整数\ndeclare -r                # 查看所有只读变量\ndeclare -x                # 查看所有被导出成环境变量的东西\ndeclare -p varname        # 输出变量是怎么定义的（类型+值）\n\n${varname:-word}          # 如果变量不为空则返回变量，否则返回 word\n${varname:=word}          # 如果变量不为空则返回变量，否则赋值成 word 并返回\n${varname:?message}       # 如果变量不为空则返回变量，否则打印错误信息并退出\n${varname:+word}          # 如果变量不为空则返回 word，否则返回 null\n${varname:offset:len}     # 取得字符串的子字符串\n\n${variable#pattern}       # 如果变量头部匹配 pattern，则删除最小匹配部分返回剩下的\n${variable##pattern}      # 如果变量头部匹配 pattern，则删除最大匹配部分返回剩下的\n${variable%pattern}       # 如果变量尾部匹配 pattern，则删除最小匹配部分返回剩下的\n${variable%%pattern}      # 如果变量尾部匹配 pattern，则删除最大匹配部分返回剩下的\n${variable/pattern/str}   # 将变量中第一个匹配 pattern 的替换成 str，并返回\n${variable//pattern/str}  # 将变量中所有匹配 pattern 的地方替换成 str 并返回\n\n${#varname}               # 返回字符串长度\n\n*(patternlist)            # 零次或者多次匹配\n+(patternlist)            # 一次或者多次匹配\n?(patternlist)            # 零次或者一次匹配\n@(patternlist)            # 单词匹配\n!(patternlist)            # 不匹配\n\narray=($text)             # 按空格分隔 text 成数组，并赋值给变量\nIFS=\"/\" array=($text)     # 按斜杆分隔字符串 text 成数组，并赋值给变量\ntext=\"${array[*]}\"        # 用空格链接数组并赋值给变量\ntext=$(IFS=/; echo \"${array[*]}\")  # 用斜杠链接数组并赋值给变量\n\n$(UNIX command)           # 运行命令，并将标准输出内容捕获并返回\nvarname=$(id -u user)     # 将用户名为 user 的 uid 赋值给 varname 变量\n\nnum=$(expr 1 + 2)         # 兼容 posix sh 的计算，使用 expr 命令计算结果\nnum=$(expr $num + 1)      # 数字自增\nexpr 2 \\* \\( 2 + 3 \\)     # 兼容 posix sh 的复杂计算，输出 10\n\nnum=$((1 + 2))            # 计算 1+2 赋值给 num，使用 bash 独有的 $((..)) 计算\nnum=$(($num + 1))         # 变量递增\nnum=$((num + 1))          # 变量递增，双括号内的 $ 可以省略\nnum=$((1 + (2 + 3) * 2))  # 复杂计算\n\n\n##############################################################################\n# 事件指示符\n##############################################################################\n\n!!                  # 上一条命令\n!^                  # 上一条命令的第一个单词\n!$                  # 上一条命令的最后一个单词\n!string             # 最近一条包含string的命令\n!^string1^string2   # 最近一条包含string1的命令, 快速替换为string2, 相当于!!:s/string1/string2/\n!#                  # 本条命令之前所有的输入内容\n\n\n##############################################################################\n# 函数\n##############################################################################\n\n# 定义一个新函数\nfunction myfunc() {\n    # $1 代表第一个参数，$N 代表第 N 个参数\n    # $# 代表参数个数\n    # $0 代表被调用者自身的名字\n    # $@ 代表所有参数，类型是个数组，想传递所有参数给其他命令用 cmd \"$@\" \n    # $* 空格链接起来的所有参数，类型是字符串\n    {shell commands ...}\n}\n\nmyfunc                    # 调用函数 myfunc \nmyfunc arg1 arg2 arg3     # 带参数的函数调用\nmyfunc \"$@\"               # 将所有参数传递给函数\nshift                     # 参数左移\n\nunset -f myfunc           # 删除函数\ndeclare -f                # 列出函数定义\n\n\n##############################################################################\n# 条件判断（兼容 posix sh 的条件判断）：man test\n##############################################################################\n\nstatement1 && statement2  # and 操作符\nstatement1 || statement2  # or 操作符\n\nexp1 -a exp2              # exp1 和 exp2 同时为真时返回真（POSIX XSI扩展）\nexp1 -o exp2              # exp1 和 exp2 有一个为真就返回真（POSIX XSI扩展）\n( expression )            # 如果 expression 为真时返回真，输入注意括号前反斜杆\n! expression              # 如果 expression 为假那返回真\n\nstr1 = str2               # 判断字符串相等，如 [ \"$x\" = \"$y\" ] && echo yes\nstr1 != str2              # 判断字符串不等，如 [ \"$x\" != \"$y\" ] && echo yes\nstr1 < str2               # 字符串小于，如 [ \"$x\" \\< \"$y\" ] && echo yes\nstr2 > str2               # 字符串大于，注意 < 或 > 是字面量，输入时要加反斜杆\n-n str1                   # 判断字符串不为空（长度大于零）\n-z str1                   # 判断字符串为空（长度等于零）\n\n-a file                   # 判断文件存在，如 [ -a /tmp/abc ] && echo \"exists\"\n-d file                   # 判断文件存在，且该文件是一个目录\n-e file                   # 判断文件存在，和 -a 等价\n-f file                   # 判断文件存在，且该文件是一个普通文件（非目录等）\n-r file                   # 判断文件存在，且可读\n-s file                   # 判断文件存在，且尺寸大于0\n-w file                   # 判断文件存在，且可写\n-x file                   # 判断文件存在，且执行\n-N file                   # 文件上次修改过后还没有读取过\n-O file                   # 文件存在且属于当前用户\n-G file                   # 文件存在且匹配你的用户组\nfile1 -nt file2           # 文件1 比 文件2 新\nfile1 -ot file2           # 文件1 比 文件2 旧\n\nnum1 -eq num2             # 数字判断：num1 == num2\nnum1 -ne num2             # 数字判断：num1 != num2\nnum1 -lt num2             # 数字判断：num1 < num2\nnum1 -le num2             # 数字判断：num1 <= num2\nnum1 -gt num2             # 数字判断：num1 > num2\nnum1 -ge num2             # 数字判断：num1 >= num2\n\n\n##############################################################################\n# 分支控制：if 和经典 test，兼容 posix sh 的条件判断语句\n##############################################################################\n\ntest {expression}         # 判断条件为真的话 test 程序返回0 否则非零\n[ expression ]            # 判断条件为真的话返回0 否则非零\n\ntest \"abc\" = \"def\"        # 查看返回值 echo $? 显示 1，因为条件为假\ntest \"abc\" != \"def\"       # 查看返回值 echo $? 显示 0，因为条件为真\n\ntest -a /tmp; echo $?     # 调用 test 判断 /tmp 是否存在，并打印 test 的返回值\n[ -a /tmp ]; echo $?      # 和上面完全等价，/tmp 肯定是存在的，所以输出是 0\n\ntest cond && cmd1         # 判断条件为真时执行 cmd1\n[ cond ] && cmd1          # 和上面完全等价\n[ cond ] && cmd1 || cmd2  # 条件为真执行 cmd1 否则执行 cmd2\n\n# 判断 /etc/passwd 文件是否存在\n# 经典的 if 语句就是判断后面的命令返回值为0的话，认为条件为真，否则为假\nif test -e /etc/passwd; then\n    echo \"alright it exists ... \"\nelse\n    echo \"it doesn't exist ... \"\nfi\n\n# 和上面完全等价，[ 是个和 test 一样的可执行程序，但最后一个参数必须为 ]\n# 这个名字为 \"[\" 的可执行程序一般就在 /bin 或 /usr/bin 下面，比 test 优雅些\nif [ -e /etc/passwd ]; then   \n    echo \"alright it exists ... \"\nelse\n    echo \"it doesn't exist ... \"\nfi\n\n# 和上面两个完全等价，其实到 bash 时代 [ 已经是内部命令了，用 enable 可以看到\n[ -e /etc/passwd ] && echo \"alright it exists\" || echo \"it doesn't exist\"\n\n# 判断变量的值\nif [ \"$varname\" = \"foo\" ]; then\n    echo \"this is foo\"\nelif [ \"$varname\" = \"bar\" ]; then\n    echo \"this is bar\"\nelse\n    echo \"neither\"\nfi\n\n# 复杂条件判断，注意 || 和 && 是完全兼容 POSIX 的推荐写法\nif [ $x -gt 10 ] && [ $x -lt 20 ]; then\n    echo \"yes, between 10 and 20\"\nfi\n\n# 可以用 && 命令连接符来做和上面完全等价的事情\n[ $x -gt 10 ] && [ $x -lt 20 ] && echo \"yes, between 10 and 20\"\n\n# 小括号和 -a -o 是 POSIX XSI 扩展写法，小括号是字面量，输入时前面要加反斜杆\nif [ \\( $x -gt 10 \\) -a \\( $x -lt 20 \\) ]; then\n    echo \"yes, between 10 and 20\"\nfi\n\n# 同样可以用 && 命令连接符来做和上面完全等价的事情\n[ \\( $x -gt 10 \\) -a \\( $x -lt 20 \\) ] && echo \"yes, between 10 and 20\"\n\n\n# 判断程序存在的话就执行\n[ -x /bin/ls ] && /bin/ls -l\n\n# 如果不考虑兼容 posix sh 和 dash 这些的话，可用 bash 独有的 ((..)) 和 [[..]]:\nhttps://www.ibm.com/developerworks/library/l-bash-test/index.html\n\n\n##############################################################################\n# 流程控制：while / for / case / until \n##############################################################################\n\n# while 循环\nwhile condition; do\n    statements\ndone\n\ni=1\nwhile [ $i -le 10 ]; do\n    echo $i; \n    i=$(expr $i + 1)\ndone\n\n# for 循环：上面的 while 语句等价\nfor i in {1..10}; do\n    echo $i\ndone\n\nfor name [in list]; do\n    statements\ndone\n\n# for 列举某目录下面的所有文件\nfor f in /home/*; do \n    echo $f\ndone\n\n# bash 独有的 (( .. )) 语句，更接近 C 语言，但是不兼容 posix sh\nfor (( initialisation ; ending condition ; update )); do\n    statements\ndone\n\n# 和上面的写法等价\nfor ((i = 0; i < 10; i++)); do echo $i; done\n\n# case 判断\ncase expression in \n    pattern1 )\n        statements ;;\n    pattern2 )\n        statements ;;\n    * )\n        otherwise ;;\nesac\n\n# until 语句\nuntil condition; do\n    statements\ndone\n\n# select 语句\nselect name [in list]; do\n  statements that can use $name\ndone\n\n\n##############################################################################\n# 命令处理\n##############################################################################\n\ncommand ls                         # 忽略 alias 直接执行程序或者内建命令 ls\nbuiltin cd                         # 忽略 alias 直接运行内建的 cd 命令\nenable                             # 列出所有 bash 内置命令，或禁止某命令\nhelp {builtin_command}             # 查看内置命令的帮助（仅限 bash 内置命令）\n\neval $script                       # 对 script 变量中的字符串求值（执行）\n\n\n##############################################################################\n# 输出/输入 重定向\n##############################################################################\n\ncmd1 | cmd2                        # 管道，cmd1 的标准输出接到 cmd2 的标准输入\n< file                             # 将文件内容重定向为命令的标准输入\n> file                             # 将命令的标准输出重定向到文件，会覆盖文件\n>> file                            # 将命令的标准输出重定向到文件，追加不覆盖\n>| file                            # 强制输出到文件，即便设置过：set -o noclobber\nn>| file                           # 强制将文件描述符 n的输出重定向到文件\n<> file                            # 同时使用该文件作为标准输入和标准输出\nn<> file                           # 同时使用文件作为文件描述符 n 的输出和输入\nn> file                            # 重定向文件描述符 n 的输出到文件\nn< file                            # 重定向文件描述符 n 的输入为文件内容\nn>&                                # 将标准输出 dup/合并 到文件描述符 n\nn<&                                # 将标准输入 dump/合并 定向为描述符 n\nn>&m                               # 文件描述符 n 被作为描述符 m 的副本，输出用\nn<&m                               # 文件描述符 n 被作为描述符 m 的副本，输入用\n&>file                             # 将标准输出和标准错误重定向到文件\n<&-                                # 关闭标准输入\n>&-                                # 关闭标准输出\nn>&-                               # 关闭作为输出的文件描述符 n\nn<&-                               # 关闭作为输入的文件描述符 n\ndiff <(cmd1) <(cmd2)               # 比较两个命令的输出\n\n\n##############################################################################\n# 文本处理 - cut\n##############################################################################\n\ncut -c 1-16                        # 截取每行头16个字符\ncut -c 1-16 file                   # 截取指定文件中每行头 16个字符\ncut -c3-                           # 截取每行从第三个字符开始到行末的内容\ncut -d':' -f5                      # 截取用冒号分隔的第五列内容\ncut -d';' -f2,10                   # 截取用分号分隔的第二和第十列内容\ncut -d' ' -f3-7                    # 截取空格分隔的三到七列\necho \"hello\" | cut -c1-3           # 显示 hel\necho \"hello sir\" | cut -d' ' -f2   # 显示 sir\nps | tr -s \" \" | cut -d \" \" -f 2,3,4  # cut 搭配 tr 压缩字符\n\n\n##############################################################################\n# 文本处理 - awk / sed \n##############################################################################\n\nawk '{print $5}' file              # 打印文件中以空格分隔的第五列\nawk -F ',' '{print $5}' file       # 打印文件中以逗号分隔的第五列\nawk '/str/ {print $2}' file        # 打印文件中包含 str 的所有行的第二列\nawk -F ',' '{print $NF}' file      # 打印逗号分隔的文件中的每行最后一列 \nawk '{s+=$1} END {print s}' file   # 计算所有第一列的合\nawk 'NR%3==1' file                 # 从第一行开始，每隔三行打印一行\n\nsed 's/find/replace/' file         # 替换文件中首次出现的字符串并输出结果 \nsed '10s/find/replace/' file       # 替换文件第 10 行内容\nsed '10,20s/find/replace/' file    # 替换文件中 10-20 行内容\nsed -r 's/regex/replace/g' file    # 替换文件中所有出现的字符串\nsed -i 's/find/replace/g' file     # 替换文件中所有出现的字符并且覆盖文件\nsed -i '/find/i\\newline' file      # 在文件的匹配文本前插入行\nsed -i '/find/a\\newline' file      # 在文件的匹配文本后插入行\nsed '/line/s/find/replace/' file   # 先搜索行特征再执行替换\nsed -e 's/f/r/' -e 's/f/r' file    # 执行多次替换\nsed 's#find#replace#' file         # 使用 # 替换 / 来避免 pattern 中有斜杆\nsed -i -r 's/^\\s+//g' file         # 删除文件每行头部空格\nsed '/^$/d' file                   # 删除文件空行并打印\nsed -i 's/\\s\\+$//' file            # 删除文件每行末尾多余空格\nsed -n '2p' file                   # 打印文件第二行\nsed -n '2,5p' file                 # 打印文件第二到第五行\n\n\n##############################################################################\n# 排序 - sort\n##############################################################################\n\nsort file                          # 排序文件\nsort -r file                       # 反向排序（降序）\nsort -n file                       # 使用数字而不是字符串进行比较\nsort -t: -k 3n /etc/passwd         # 按 passwd 文件的第三列进行排序\nsort -u file                       # 去重排序\n\n\n##############################################################################\n# 快速跳转 - https://github.com/rupa/z\n##############################################################################\n\nsource /path/to/z.sh               # .bashrc 中初始化 z.sh\nz                                  # 列出所有历史路径以及他们的权重\nz foo                              # 跳到历史路径中匹配 foo 的权重最大的目录\nz foo bar                          # 跳到历史路径中匹配 foo 和 bar 权重最大的目录\nz -l foo                           # 列出所有历史路径中匹配 foo 的目录及权重\nz -r foo                           # 按照最高访问次数优先进行匹配跳转\nz -t foo                           # 按照最近访问优先进行匹配跳转\n\n\n##############################################################################\n# 键盘绑定\n##############################################################################\n\nbind '\"\\eh\":\"\\C-b\"'                # 绑定 ALT+h 为光标左移，同 CTRL+b / <Left>\nbind '\"\\el\":\"\\C-f\"'                # 绑定 ALT+l 为光标右移，同 CTRL+f / <Right>\nbind '\"\\ej\":\"\\C-n\"'                # 绑定 ALT+j 为下条历史，同 CTRL+n / <Down>\nbind '\"\\ek\":\"\\C-p\"'                # 绑定 ALT+k 为上条历史，同 CTRL+p / <Up>\nbind '\"\\eH\":\"\\eb\"'                 # 绑定 ALT+H 为光标左移一个单词，同 ALT-b \nbind '\"\\eL\":\"\\ef\"'                 # 绑定 ALT+L 为光标右移一个单词，同 ALT-f \nbind '\"\\eJ\":\"\\C-a\"'                # 绑定 ALT+J 为移动到行首，同 CTRL+a / <Home>\nbind '\"\\eK\":\"\\C-e\"'                # 绑定 ALT+K 为移动到行末，同 CTRL+e / <End>\nbind '\"\\e;\":\"ls -l\\n\"'             # 绑定 ALT+; 为执行 ls -l 命令\n\n\n##############################################################################\n# 网络管理：ip / ifconfig / nmap ...\n##############################################################################\n\nip a                               # 显示所有网络地址，同 ip address\nip a show eth1                     # 显示网卡 IP 地址\nip a add 172.16.1.23/24 dev eth1   # 添加网卡 IP 地址\nip a del 172.16.1.23/24 dev eth1   # 删除网卡 IP 地址\nip link show dev eth0              # 显示网卡设备属性\nip link set eth1 up                # 激活网卡\nip link set eth1 down              # 关闭网卡\nip link set eth1 address {mac}     # 修改 MAC 地址\nip neighbour                       # 查看 ARP 缓存\nip route                           # 查看路由表\nip route add 10.1.0.0/24 via 10.0.0.253 dev eth0    # 添加静态路由\nip route del 10.1.0.0/24           # 删除静态路由\n\nifconfig                           # 显示所有网卡和接口信息\nifconfig -a                        # 显示所有网卡（包括开机没启动的）信息\nifconfig eth0                      # 指定设备显示信息\nifconfig eth0 up                   # 激活网卡\nifconfig eth0 down                 # 关闭网卡\nifconfig eth0 192.168.120.56       # 给网卡配置 IP 地址\nifconfig eth0 10.0.0.8 netmask 255.255.255.0 up     # 配置 IP 并启动\nifconfig eth0 hw ether 00:aa:bb:cc:dd:ee            # 修改 MAC 地址\n\nnmap 10.0.0.12                     # 扫描主机 1-1000 端口\nnmap -p 1024-65535 10.0.0.12       # 扫描给定端口\nnmap 10.0.0.0/24                   # 给定网段扫描局域网内所有主机\nnmap -O -sV 10.0.0.12              # 探测主机服务和操作系统版本\n\n\n##############################################################################\n# 有趣的命令\n##############################################################################\n\nman hier                           # 查看文件系统的结构和含义\nman test                           # 查看 posix sh 的条件判断帮助\nman ascii                          # 显示 ascii 表\ngetconf LONG_BIT                   # 查看系统是 32 位还是 64 位\nbind -P                            # 列出所有 bash 的快捷键\nmount | column -t                  # 漂亮的列出当前加载的文件系统\ncurl ip.cn                         # 取得外网 ip 地址和服务商信息\ndisown -a && exit                  # 关闭所有后台任务并退出\ncat /etc/issue                     # 查看 Linux 发行版信息\nlsof -i port:80                    # 哪个程序在使用 80 端口？\nshowkey -a                         # 取得按键的 ASCII 码\nsvn diff | view -                  # 使用 Vim 来显示带色彩的 diff 输出\nmv filename.{old,new}              # 快速文件改名\ntime read                          # 使用 CTRL-D 停止，最简单的计时功能\ncp file.txt{,.bak}                 # 快速备份文件\nsudo touch /forcefsck              # 强制在下次重启时扫描磁盘\nfind ~ -mmin 60 -type f            # 查找 $HOME 目录中，60 分钟内修改过的文件\ncurl wttr.in/~beijing              # 查看北京的天气预报\necho ${SSH_CLIENT%% *}             # 取得你是从什么 IP 链接到当前主机上的\necho $[RANDOM%X+1]                 # 取得 1 到 X 之间的随机数\nbind -x '\"\\C-l\":ls -l'             # 设置 CTRL+l 为执行 ls -l 命令\nfind / -type f -size +5M           # 查找大于 5M 的文件\nchmod --reference f1 f2            # 将 f2 的权限设置成 f1 一模一样的\ncurl -L cheat.sh                   # 速查表大全\n\n\n##############################################################################\n# 常用技巧\n##############################################################################\n\n# 列出最常使用的命令\nhistory | awk '{a[$2]++}END{for(i in a){print a[i] \" \" i}}' | sort -rn | head\n\n# 列出所有网络状态：ESTABLISHED / TIME_WAIT / FIN_WAIT1 / FIN_WAIT2 \nnetstat -n | awk '/^tcp/ {++tt[$NF]} END {for (a in tt) print a, tt[a]}'\n\n# 通过 SSH 来 mount 文件系统\nsshfs name@server:/path/to/folder /path/to/mount/point\n\n# 显示前十个运行的进程并按内存使用量排序\nps aux | sort -nk +4 | tail\n\n# 在右上角显示时钟\nwhile sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done&\n\n# 从网络上的压缩文件中解出一个文件来，并避免保存中间文件\nwget -qO - \"http://www.tarball.com/tarball.gz\" | tar zxvf -\n\n# 性能测试：测试处理器性能\npython -c \"import test.pystone;print(test.pystone.pystones())\"\n\n# 性能测试：测试内存带宽\ndd if=/dev/zero of=/dev/null bs=1M count=32768\n\n# Linux 下挂载一个 iso 文件\nmount /path/to/file.iso /mnt/cdrom -oloop\n\n# 通过主机 A 直接 ssh 到主机 B\nssh -t hostA ssh hostB\n\n# 下载一个网站的所有图片\nwget -r -l1 --no-parent -nH -nd -P/tmp -A\".gif,.jpg\" http://example.com/images\n\n# 快速创建项目目录\nmkdir -p work/{project1,project2}/{src,bin,bak}\n\n# 按日期范围查找文件\nfind . -type f -newermt \"2010-01-01\" ! -newermt \"2010-06-01\"\n\n# 显示当前正在使用网络的进程\nlsof -P -i -n | cut -f 1 -d \" \"| uniq | tail -n +2\n\n# Vim 中保存一个没有权限的文件\n:w !sudo tee > /dev/null %\n\n# 在 .bashrc / .bash_profile 中加载另外一个文件（比如你保存在 github 上的配置）\nsource ~/github/profiles/my_bash_init.sh\n\n# 终端下正确设置 ALT 键和 BackSpace 键\nhttp://www.skywind.me/blog/archives/2021\n\n\n##############################################################################\n# 有用的函数\n##############################################################################\n\n# 自动解压：判断文件后缀名并调用相应解压命令\nfunction q-extract() {\n    if [ -f $1 ] ; then\n        case $1 in\n        *.tar.bz2)   tar -xvjf $1    ;;\n        *.tar.gz)    tar -xvzf $1    ;;\n        *.tar.xz)    tar -xvJf $1    ;;\n        *.bz2)       bunzip2 $1     ;;\n        *.rar)       rar x $1       ;;\n        *.gz)        gunzip $1      ;;\n        *.tar)       tar -xvf $1     ;;\n        *.tbz2)      tar -xvjf $1    ;;\n        *.tgz)       tar -xvzf $1    ;;\n        *.zip)       unzip $1       ;;\n        *.Z)         uncompress $1  ;;\n        *.7z)        7z x $1        ;;\n        *)           echo \"don't know how to extract '$1'...\" ;;\n        esac\n    else\n        echo \"'$1' is not a valid file!\"\n    fi\n}\n\n# 自动压缩：判断后缀名并调用相应压缩程序\nfunction q-compress() {\n    if [ -n \"$1\" ] ; then\n        FILE=$1\n        case $FILE in\n        *.tar) shift && tar -cf $FILE $* ;;\n        *.tar.bz2) shift && tar -cjf $FILE $* ;;\n        *.tar.xz) shift && tar -cJf $FILE $* ;;\n        *.tar.gz) shift && tar -czf $FILE $* ;;\n        *.tgz) shift && tar -czf $FILE $* ;;\n        *.zip) shift && zip $FILE $* ;;\n        *.rar) shift && rar $FILE $* ;;\n        esac\n    else\n        echo \"usage: q-compress <foo.tar.gz> ./foo ./bar\"\n    fi\n}\n\n# 漂亮的带语法高亮的 color cat ，需要先 pip install pygments\nfunction ccat() {\n    local style=\"monokai\"\n    if [ $# -eq 0 ]; then\n        pygmentize -P style=$style -P tabsize=4 -f terminal256 -g\n    else\n        for NAME in $@; do\n            pygmentize -P style=$style -P tabsize=4 -f terminal256 -g \"$NAME\"\n        done\n    fi\n}\n\n\n##############################################################################\n# 好玩的配置\n##############################################################################\n\n# 放到你的 ~/.bashrc 配置文件中，给 man 增加漂亮的色彩高亮\nexport LESS_TERMCAP_mb=$'\\E[1m\\E[32m'\nexport LESS_TERMCAP_mh=$'\\E[2m'\nexport LESS_TERMCAP_mr=$'\\E[7m'\nexport LESS_TERMCAP_md=$'\\E[1m\\E[36m'\nexport LESS_TERMCAP_ZW=\"\"\nexport LESS_TERMCAP_us=$'\\E[4m\\E[1m\\E[37m'\nexport LESS_TERMCAP_me=$'\\E(B\\E[m'\nexport LESS_TERMCAP_ue=$'\\E[24m\\E(B\\E[m'\nexport LESS_TERMCAP_ZO=\"\"\nexport LESS_TERMCAP_ZN=\"\"\nexport LESS_TERMCAP_se=$'\\E[27m\\E(B\\E[m'\nexport LESS_TERMCAP_ZV=\"\"\nexport LESS_TERMCAP_so=$'\\E[1m\\E[33m\\E[44m'\n\n# ALT+hjkl/HJKL 快速移动光标，将下面内容添加到 ~/.inputrc 中可作用所有工具，\n# 包括 bash/zsh/python/lua 等使用 readline 的工具，帮助见：info rluserman\n\"\\eh\": backward-char\n\"\\el\": forward-char\n\"\\ej\": next-history\n\"\\ek\": previous-history\n\"\\eH\": backward-word\n\"\\eL\": forward-word\n\"\\eJ\": beginning-of-line\n\"\\eK\": end-of-line\n```\n参考：<br />https://github.com/Idnan/bash-guide<br />http://www.linuxstall.com/linux-command-line-tips-that-every-linux-user-should-know/<br />https://ss64.com/bash/syntax-keyboard.html<br />http://wiki.bash-hackers.org/commands/classictest<br />https://www.ibm.com/developerworks/library/l-bash-test/index.html<br />https://www.cyberciti.biz/faq/bash-loop-over-file/<br />https://linuxconfig.org/bash-scripting-tutorial<br />https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh<br />https://devhints.io/bash<br />https://github.com/jlevy/the-art-of-command-line<br />https://yq.aliyun.com/articles/68541\n\n",
    "body_draft": "这两天写shell代码的时候，发现好多命令都不太会。后来在网上查，发现一个好东东，和大家分享（中文速查表）\n\n```plain\n##############################################################################\n# BASH CHEATSHEET (中文速查表) \n##############################################################################\n\n\n##############################################################################\n# 常用快捷键（默认使用 Emacs 键位）\n##############################################################################\n\nCTRL+A              # 移动到行首，同 <Home>\nCTRL+B              # 向后移动，同 <Left>\nCTRL+C              # 结束当前命令\nCTRL+D              # 删除光标前的字符，同 <Delete> ，或者没有内容时，退出会话\nCTRL+E              # 移动到行末，同 <End>\nCTRL+F              # 向前移动，同 <Right>\nCTRL+G              # 退出当前编辑（比如正在 CTRL+R 搜索历史时）\nCTRL+H              # 删除光标左边的字符，同 <Backspace>\nCTRL+K              # 删除光标位置到行末的内容\nCTRL+L              # 清屏并重新显示\nCTRL+N              # 移动到命令历史的下一行，同 <Down>\nCTRL+O              # 类似回车，但是会显示下一行历史\nCTRL+P              # 移动到命令历史的上一行，同 <Up>\nCTRL+R              # 历史命令反向搜索，使用 CTRL+G 退出搜索\nCTRL+S              # 历史命令正向搜索，使用 CTRL+G 退出搜索\nCTRL+T              # 交换前后两个字符\nCTRL+U              # 删除字符到行首\nCTRL+V              # 输入字符字面量，先按 CTRL+V 再按任意键\nCTRL+W              # 删除光标左边的一个单词\nCTRL+X              # 列出可能的补全\nCTRL+Y              # 粘贴前面 CTRL+u/k/w 删除过的内容\nCTRL+Z              # 暂停前台进程返回 bash，需要时可用 fg 将其切换回前台\nCTRL+_              # 撤销（undo），有的终端将 CTRL+_ 映射为 CTRL+/ 或 CTRL+7\n\nALT+b               # 向后（左边）移动一个单词\nALT+d               # 删除光标后（右边）一个单词\nALT+f               # 向前（右边）移动一个单词\nALT+t               # 交换字符\nALT+BACKSPACE       # 删除光标前面一个单词，类似 CTRL+W，但不影响剪贴板\n\nCTRL+X CTRL+X       # 连续按两次 CTRL+X，光标在当前位置和行首来回跳转 \nCTRL+X CTRL+E       # 用你指定的编辑器，编辑当前命令\n\n\n##############################################################################\n# BASH 基本操作\n##############################################################################\n\nexit                # 退出当前登陆\nenv                 # 显示环境变量\necho $SHELL         # 显示你在使用什么 SHELL\n\nbash                # 使用 bash，用 exit 返回\nwhich bash          # 搜索 $PATH，查找哪个程序对应命令 bash\nwhereis bash        # 搜索可执行，头文件和帮助信息的位置，使用系统内建数据库\nwhatis bash         # 查看某个命令的解释，一句话告诉你这是干什么的\n\nclear               # 清初屏幕内容\nreset               # 重置终端（当你不小心 cat 了一个二进制，终端状态乱掉时使用）\n\n\n##############################################################################\n# 目录操作\n##############################################################################\n\ncd                  # 返回自己 $HOME 目录\ncd {dirname}        # 进入目录\npwd                 # 显示当前所在目录\nmkdir {dirname}     # 创建目录\nmkdir -p {dirname}  # 递归创建目录\npushd {dirname}     # 目录压栈并进入新目录\npopd                # 弹出并进入栈顶的目录\ndirs -v             # 列出当前目录栈\ncd -                # 回到之前的目录\ncd -{N}             # 切换到目录栈中的第 N个目录，比如 cd -2 将切换到第二个\n\n\n##############################################################################\n# 文件操作\n##############################################################################\n\nls                  # 显示当前目录内容，后面可接目录名：ls {dir} 显示指定目录\nls -l               # 列表方式显示目录内容，包括文件日期，大小，权限等信息\nls -a               # 显示所有文件和目录，包括隐藏文件（.开头的文件/目录名）\nln -s {fn} {link}   # 给指定文件创建一个软链接\ncp {src} {dest}     # 拷贝文件，cp -r dir1 dir2 可以递归拷贝（目录）\nrm {fn}             # 删除文件，rm -r 递归删除目录，rm -f 强制删除\nmv {src} {dest}     # 移动文件，如果 dest 是目录，则移动，是文件名则覆盖\ntouch {fn}          # 创建或者更新一下制定文件\ncat {fn}            # 输出文件原始内容\nany_cmd > {fn}      # 执行任意命令并将标准输出重定向到指定文件\nmore {fn}           # 逐屏显示某文件内容，空格翻页，q 退出\nless {fn}           # 更高级点的 more，更多操作，q 退出\nhead {fn}           # 显示文件头部数行，可用 head -3 abc.txt 显示头三行\ntail {fn}           # 显示文件尾部数行，可用 tail -3 abc.txt 显示尾部三行\ntail -f {fn}        # 持续显示文件尾部数据，可用于监控日志\nnano {fn}           # 使用 nano 编辑器编辑文件\nvim {fn}            # 使用 vim 编辑文件\ndiff {f1} {f2}      # 比较两个文件的内容\nwc {fn}             # 统计文件有多少行，多少个单词\nchmod 644 {fn}      # 修改文件权限为 644，可以接 -R 对目录循环改权限\nchgrp group {fn}    # 修改文件所属的用户组\nchown user1 {fn}    # 修改文件所有人为 user1, chown user1:group1 fn 可以修改组\nfile {fn}           # 检测文件的类型和编码\nbasename {fn}       # 查看文件的名字（不包括路径）\ndirname {fn}        # 查看文件的路径（不包括名字）\ngrep {pat} {fn}     # 在文件中查找出现过 pat 的内容\ngrep -r {pat} .     # 在当前目录下递归查找所有出现过 pat 的文件内容\nstat {fn}           # 显示文件的详细信息\n\n\n##############################################################################\n# 用户管理\n##############################################################################\n\nwhoami              # 显示我的用户名\nwho                 # 显示已登陆用户信息，w / who / users 内容略有不同\nw                   # 显示已登陆用户信息，w / who / users 内容略有不同\nusers               # 显示已登陆用户信息，w / who / users 内容略有不同\npasswd              # 修改密码，passwd {user} 可以用于 root 修改别人密码\nfinger {user}       # 显示某用户信息，包括 id, 名字, 登陆状态等\nadduser {user}      # 添加用户\ndeluser {user}      # 删除用户\nw                   # 查看谁在线\nsu                  # 切换到 root 用户\nsu -                # 切换到 root 用户并登陆（执行登陆脚本）\nsu {user}           # 切换到某用户\nsu -{user}          # 切换到某用户并登陆（执行登陆脚本）\nid {user}           # 查看用户的 uid，gid 以及所属其他用户组\nid -u {user}        # 打印用户 uid\nid -g {user}        # 打印用户 gid\nwrite {user}        # 向某用户发送一句消息\nlast                # 显示最近用户登陆列表\nlast {user}         # 显示登陆记录\nlastb               # 显示失败登陆记录\nlastlog             # 显示所有用户的最近登陆记录\nsudo {command}      # 以 root 权限执行某命令\n\n\n##############################################################################\n# 进程管理\n##############################################################################\n\nps                        # 查看当前会话进程\nps ax                     # 查看所有进程，类似 ps -e\nps aux                    # 查看所有进程详细信息，类似 ps -ef\nps auxww                  # 查看所有进程，并且显示进程的完整启动命令\nps -u {user}              # 查看某用户进程\nps axjf                   # 列出进程树\nps xjf -u {user}          # 列出某用户的进程树\nps -eo pid,user,command   # 按用户指定的格式查看进程\nps aux | grep httpd       # 查看名为 httpd 的所有进程\nps --ppid {pid}           # 查看父进程为 pid 的所有进程\npstree                    # 树形列出所有进程，pstree 默认一般不带，需安装\npstree {user}             # 进程树列出某用户的进程\npstree -u                 # 树形列出所有进程以及所属用户\npgrep {procname}          # 搜索名字匹配的进程的 pid，比如 pgrep apache2\n\nkill {pid}                # 结束进程\nkill -9 {pid}             # 强制结束进程，9/SIGKILL 是强制不可捕获结束信号\nkill -KILL {pid}          # 强制执行进程，kill -9 的另外一种写法\nkill -l                   # 查看所有信号\nkill -l TERM              # 查看 TERM 信号的编号\nkillall {procname}        # 按名称结束所有进程\npkill {procname}          # 按名称结束进程，除名称外还可以有其他参数\n\ntop                       # 查看最活跃的进程\ntop -u {user}             # 查看某用户最活跃的进程\n\nany_command &             # 在后台运行某命令，也可用 CTRL+Z 将当前进程挂到后台\njobs                      # 查看所有后台进程（jobs）\nbg                        # 查看后台进程，并切换过去\nfg                        # 切换后台进程到前台\nfg {job}                  # 切换特定后台进程到前台\n\ntrap cmd sig1 sig2        # 在脚本中设置信号处理命令\ntrap \"\" sig1 sig2         # 在脚本中屏蔽某信号\ntrap - sig1 sig2          # 恢复默认信号处理行为\n\nnohup {command}           # 长期运行某程序，在你退出登陆都保持它运行\nnohup {command} &         # 在后台长期运行某程序\ndisown {PID|JID}          # 将进程从后台任务列表（jobs）移除\n\nwait                      # 等待所有后台进程任务结束\n\n\n##############################################################################\n# 常用命令：SSH / 系统信息 / 网络\n##############################################################################\n\nssh user@host             # 以用户 user 登陆到远程主机 host\nssh -p {port} user@host   # 指定端口登陆主机\nssh-copy-id user@host     # 拷贝你的 ssh key 到远程主机，避免重复输入密码\nscp {fn} user@host:path   # 拷贝文件到远程主机\nscp user@host:path dest   # 从远程主机拷贝文件回来\nscp -P {port} ...         # 指定端口远程拷贝文件\n\nuname -a                  # 查看内核版本等信息\nman {help}                # 查看帮助\nman -k {keyword}          # 查看哪些帮助文档里包含了该关键字\ninfo {help}               # 查看 info pages，比 man 更强的帮助系统\nuptime                    # 查看系统启动时间\ndate                      # 显示日期\ncal                       # 显示日历\nvmstat                    # 显示内存和 CPU 使用情况\nvmstat 10                 # 每 10 秒打印一行内存和 CPU情况，CTRL+C 退出\nfree                      # 显示内存和交换区使用情况\ndf                        # 显示磁盘使用情况\ndu                        # 显示当前目录占用，du . --max-depth=2 可以指定深度\nuname                     # 显示系统版本号\nhostname                  # 显示主机名称\nshowkey -a                # 查看终端发送的按键编码\n\nping {host}               # ping 远程主机并显示结果，CTRL+C 退出\nping -c N {host}          # ping 远程主机 N 次\ntraceroute {host}         # 侦测路由连通情况\nmtr {host}                # 高级版本 traceroute\nhost {domain}             # DNS 查询，{domain} 前面可加 -a 查看详细信息\nwhois {domain}            # 取得域名 whois 信息\ndig {domain}              # 取得域名 dns 信息\nroute -n                  # 查看路由表\nnetstat -a                # 列出所有端口\nnetstat -an               # 查看所有连接信息，不解析域名\nnetstat -anp              # 查看所有连接信息，包含进程信息（需要 sudo）\nnetstat -l                # 查看所有监听的端口\nnetstat -t                # 查看所有 TCP 链接\nnetstat -lntu             # 显示所有正在监听的 TCP 和 UDP 信息\nnetstat -lntup            # 显示所有正在监听的 socket 及进程信息\nnetstat -i                # 显示网卡信息\nnetstat -rn               # 显示当前系统路由表，同 route -n\nss -an                    # 比 netstat -an 更快速更详细\nss -s                     # 统计 TCP 的 established, wait 等\n\nwget {url}                # 下载文件，可加 --no-check-certificate 忽略 ssl 验证\nwget -qO- {url}           # 下载文件并输出到标准输出（不保存）\ncurl -sL {url}            # 同 wget -qO- {url} 没有 wget 的时候使用\n\nsz {file}                 # 发送文件到终端，zmodem 协议\nrz                        # 接收终端发送过来的文件\n\n\n##############################################################################\n# 变量操作\n##############################################################################\n\nvarname=value             # 定义变量\nvarname=value command     # 定义子进程变量并执行子进程\necho $varname             # 查看变量内容\necho $$                   # 查看当前 shell 的进程号\necho $!                   # 查看最近调用的后台任务进程号\necho $?                   # 查看最近一条命令的返回码\nexport VARNAME=value      # 设置环境变量（将会影响到子进程）\n\narray[0]=valA             # 定义数组\narray[1]=valB\narray[2]=valC\narray=([0]=valA [1]=valB [2]=valC)   # 另一种方式\narray=(valA valB valC)               # 另一种方式\n\n${array[i]}               # 取得数组中的元素\n${#array[@]}              # 取得数组的长度\n${#array[i]}              # 取得数组中某个变量的长度\n\ndeclare -a                # 查看所有数组\ndeclare -f                # 查看所有函数\ndeclare -F                # 查看所有函数，仅显示函数名\ndeclare -i                # 查看所有整数\ndeclare -r                # 查看所有只读变量\ndeclare -x                # 查看所有被导出成环境变量的东西\ndeclare -p varname        # 输出变量是怎么定义的（类型+值）\n\n${varname:-word}          # 如果变量不为空则返回变量，否则返回 word\n${varname:=word}          # 如果变量不为空则返回变量，否则赋值成 word 并返回\n${varname:?message}       # 如果变量不为空则返回变量，否则打印错误信息并退出\n${varname:+word}          # 如果变量不为空则返回 word，否则返回 null\n${varname:offset:len}     # 取得字符串的子字符串\n\n${variable#pattern}       # 如果变量头部匹配 pattern，则删除最小匹配部分返回剩下的\n${variable##pattern}      # 如果变量头部匹配 pattern，则删除最大匹配部分返回剩下的\n${variable%pattern}       # 如果变量尾部匹配 pattern，则删除最小匹配部分返回剩下的\n${variable%%pattern}      # 如果变量尾部匹配 pattern，则删除最大匹配部分返回剩下的\n${variable/pattern/str}   # 将变量中第一个匹配 pattern 的替换成 str，并返回\n${variable//pattern/str}  # 将变量中所有匹配 pattern 的地方替换成 str 并返回\n\n${#varname}               # 返回字符串长度\n\n*(patternlist)            # 零次或者多次匹配\n+(patternlist)            # 一次或者多次匹配\n?(patternlist)            # 零次或者一次匹配\n@(patternlist)            # 单词匹配\n!(patternlist)            # 不匹配\n\narray=($text)             # 按空格分隔 text 成数组，并赋值给变量\nIFS=\"/\" array=($text)     # 按斜杆分隔字符串 text 成数组，并赋值给变量\ntext=\"${array[*]}\"        # 用空格链接数组并赋值给变量\ntext=$(IFS=/; echo \"${array[*]}\")  # 用斜杠链接数组并赋值给变量\n\n$(UNIX command)           # 运行命令，并将标准输出内容捕获并返回\nvarname=$(id -u user)     # 将用户名为 user 的 uid 赋值给 varname 变量\n\nnum=$(expr 1 + 2)         # 兼容 posix sh 的计算，使用 expr 命令计算结果\nnum=$(expr $num + 1)      # 数字自增\nexpr 2 \\* \\( 2 + 3 \\)     # 兼容 posix sh 的复杂计算，输出 10\n\nnum=$((1 + 2))            # 计算 1+2 赋值给 num，使用 bash 独有的 $((..)) 计算\nnum=$(($num + 1))         # 变量递增\nnum=$((num + 1))          # 变量递增，双括号内的 $ 可以省略\nnum=$((1 + (2 + 3) * 2))  # 复杂计算\n\n\n##############################################################################\n# 事件指示符\n##############################################################################\n\n!!                  # 上一条命令\n!^                  # 上一条命令的第一个单词\n!$                  # 上一条命令的最后一个单词\n!string             # 最近一条包含string的命令\n!^string1^string2   # 最近一条包含string1的命令, 快速替换为string2, 相当于!!:s/string1/string2/\n!#                  # 本条命令之前所有的输入内容\n\n\n##############################################################################\n# 函数\n##############################################################################\n\n# 定义一个新函数\nfunction myfunc() {\n    # $1 代表第一个参数，$N 代表第 N 个参数\n    # $# 代表参数个数\n    # $0 代表被调用者自身的名字\n    # $@ 代表所有参数，类型是个数组，想传递所有参数给其他命令用 cmd \"$@\" \n    # $* 空格链接起来的所有参数，类型是字符串\n    {shell commands ...}\n}\n\nmyfunc                    # 调用函数 myfunc \nmyfunc arg1 arg2 arg3     # 带参数的函数调用\nmyfunc \"$@\"               # 将所有参数传递给函数\nshift                     # 参数左移\n\nunset -f myfunc           # 删除函数\ndeclare -f                # 列出函数定义\n\n\n##############################################################################\n# 条件判断（兼容 posix sh 的条件判断）：man test\n##############################################################################\n\nstatement1 && statement2  # and 操作符\nstatement1 || statement2  # or 操作符\n\nexp1 -a exp2              # exp1 和 exp2 同时为真时返回真（POSIX XSI扩展）\nexp1 -o exp2              # exp1 和 exp2 有一个为真就返回真（POSIX XSI扩展）\n( expression )            # 如果 expression 为真时返回真，输入注意括号前反斜杆\n! expression              # 如果 expression 为假那返回真\n\nstr1 = str2               # 判断字符串相等，如 [ \"$x\" = \"$y\" ] && echo yes\nstr1 != str2              # 判断字符串不等，如 [ \"$x\" != \"$y\" ] && echo yes\nstr1 < str2               # 字符串小于，如 [ \"$x\" \\< \"$y\" ] && echo yes\nstr2 > str2               # 字符串大于，注意 < 或 > 是字面量，输入时要加反斜杆\n-n str1                   # 判断字符串不为空（长度大于零）\n-z str1                   # 判断字符串为空（长度等于零）\n\n-a file                   # 判断文件存在，如 [ -a /tmp/abc ] && echo \"exists\"\n-d file                   # 判断文件存在，且该文件是一个目录\n-e file                   # 判断文件存在，和 -a 等价\n-f file                   # 判断文件存在，且该文件是一个普通文件（非目录等）\n-r file                   # 判断文件存在，且可读\n-s file                   # 判断文件存在，且尺寸大于0\n-w file                   # 判断文件存在，且可写\n-x file                   # 判断文件存在，且执行\n-N file                   # 文件上次修改过后还没有读取过\n-O file                   # 文件存在且属于当前用户\n-G file                   # 文件存在且匹配你的用户组\nfile1 -nt file2           # 文件1 比 文件2 新\nfile1 -ot file2           # 文件1 比 文件2 旧\n\nnum1 -eq num2             # 数字判断：num1 == num2\nnum1 -ne num2             # 数字判断：num1 != num2\nnum1 -lt num2             # 数字判断：num1 < num2\nnum1 -le num2             # 数字判断：num1 <= num2\nnum1 -gt num2             # 数字判断：num1 > num2\nnum1 -ge num2             # 数字判断：num1 >= num2\n\n\n##############################################################################\n# 分支控制：if 和经典 test，兼容 posix sh 的条件判断语句\n##############################################################################\n\ntest {expression}         # 判断条件为真的话 test 程序返回0 否则非零\n[ expression ]            # 判断条件为真的话返回0 否则非零\n\ntest \"abc\" = \"def\"        # 查看返回值 echo $? 显示 1，因为条件为假\ntest \"abc\" != \"def\"       # 查看返回值 echo $? 显示 0，因为条件为真\n\ntest -a /tmp; echo $?     # 调用 test 判断 /tmp 是否存在，并打印 test 的返回值\n[ -a /tmp ]; echo $?      # 和上面完全等价，/tmp 肯定是存在的，所以输出是 0\n\ntest cond && cmd1         # 判断条件为真时执行 cmd1\n[ cond ] && cmd1          # 和上面完全等价\n[ cond ] && cmd1 || cmd2  # 条件为真执行 cmd1 否则执行 cmd2\n\n# 判断 /etc/passwd 文件是否存在\n# 经典的 if 语句就是判断后面的命令返回值为0的话，认为条件为真，否则为假\nif test -e /etc/passwd; then\n    echo \"alright it exists ... \"\nelse\n    echo \"it doesn't exist ... \"\nfi\n\n# 和上面完全等价，[ 是个和 test 一样的可执行程序，但最后一个参数必须为 ]\n# 这个名字为 \"[\" 的可执行程序一般就在 /bin 或 /usr/bin 下面，比 test 优雅些\nif [ -e /etc/passwd ]; then   \n    echo \"alright it exists ... \"\nelse\n    echo \"it doesn't exist ... \"\nfi\n\n# 和上面两个完全等价，其实到 bash 时代 [ 已经是内部命令了，用 enable 可以看到\n[ -e /etc/passwd ] && echo \"alright it exists\" || echo \"it doesn't exist\"\n\n# 判断变量的值\nif [ \"$varname\" = \"foo\" ]; then\n    echo \"this is foo\"\nelif [ \"$varname\" = \"bar\" ]; then\n    echo \"this is bar\"\nelse\n    echo \"neither\"\nfi\n\n# 复杂条件判断，注意 || 和 && 是完全兼容 POSIX 的推荐写法\nif [ $x -gt 10 ] && [ $x -lt 20 ]; then\n    echo \"yes, between 10 and 20\"\nfi\n\n# 可以用 && 命令连接符来做和上面完全等价的事情\n[ $x -gt 10 ] && [ $x -lt 20 ] && echo \"yes, between 10 and 20\"\n\n# 小括号和 -a -o 是 POSIX XSI 扩展写法，小括号是字面量，输入时前面要加反斜杆\nif [ \\( $x -gt 10 \\) -a \\( $x -lt 20 \\) ]; then\n    echo \"yes, between 10 and 20\"\nfi\n\n# 同样可以用 && 命令连接符来做和上面完全等价的事情\n[ \\( $x -gt 10 \\) -a \\( $x -lt 20 \\) ] && echo \"yes, between 10 and 20\"\n\n\n# 判断程序存在的话就执行\n[ -x /bin/ls ] && /bin/ls -l\n\n# 如果不考虑兼容 posix sh 和 dash 这些的话，可用 bash 独有的 ((..)) 和 [[..]]:\nhttps://www.ibm.com/developerworks/library/l-bash-test/index.html\n\n\n##############################################################################\n# 流程控制：while / for / case / until \n##############################################################################\n\n# while 循环\nwhile condition; do\n    statements\ndone\n\ni=1\nwhile [ $i -le 10 ]; do\n    echo $i; \n    i=$(expr $i + 1)\ndone\n\n# for 循环：上面的 while 语句等价\nfor i in {1..10}; do\n    echo $i\ndone\n\nfor name [in list]; do\n    statements\ndone\n\n# for 列举某目录下面的所有文件\nfor f in /home/*; do \n    echo $f\ndone\n\n# bash 独有的 (( .. )) 语句，更接近 C 语言，但是不兼容 posix sh\nfor (( initialisation ; ending condition ; update )); do\n    statements\ndone\n\n# 和上面的写法等价\nfor ((i = 0; i < 10; i++)); do echo $i; done\n\n# case 判断\ncase expression in \n    pattern1 )\n        statements ;;\n    pattern2 )\n        statements ;;\n    * )\n        otherwise ;;\nesac\n\n# until 语句\nuntil condition; do\n    statements\ndone\n\n# select 语句\nselect name [in list]; do\n  statements that can use $name\ndone\n\n\n##############################################################################\n# 命令处理\n##############################################################################\n\ncommand ls                         # 忽略 alias 直接执行程序或者内建命令 ls\nbuiltin cd                         # 忽略 alias 直接运行内建的 cd 命令\nenable                             # 列出所有 bash 内置命令，或禁止某命令\nhelp {builtin_command}             # 查看内置命令的帮助（仅限 bash 内置命令）\n\neval $script                       # 对 script 变量中的字符串求值（执行）\n\n\n##############################################################################\n# 输出/输入 重定向\n##############################################################################\n\ncmd1 | cmd2                        # 管道，cmd1 的标准输出接到 cmd2 的标准输入\n< file                             # 将文件内容重定向为命令的标准输入\n> file                             # 将命令的标准输出重定向到文件，会覆盖文件\n>> file                            # 将命令的标准输出重定向到文件，追加不覆盖\n>| file                            # 强制输出到文件，即便设置过：set -o noclobber\nn>| file                           # 强制将文件描述符 n的输出重定向到文件\n<> file                            # 同时使用该文件作为标准输入和标准输出\nn<> file                           # 同时使用文件作为文件描述符 n 的输出和输入\nn> file                            # 重定向文件描述符 n 的输出到文件\nn< file                            # 重定向文件描述符 n 的输入为文件内容\nn>&                                # 将标准输出 dup/合并 到文件描述符 n\nn<&                                # 将标准输入 dump/合并 定向为描述符 n\nn>&m                               # 文件描述符 n 被作为描述符 m 的副本，输出用\nn<&m                               # 文件描述符 n 被作为描述符 m 的副本，输入用\n&>file                             # 将标准输出和标准错误重定向到文件\n<&-                                # 关闭标准输入\n>&-                                # 关闭标准输出\nn>&-                               # 关闭作为输出的文件描述符 n\nn<&-                               # 关闭作为输入的文件描述符 n\ndiff <(cmd1) <(cmd2)               # 比较两个命令的输出\n\n\n##############################################################################\n# 文本处理 - cut\n##############################################################################\n\ncut -c 1-16                        # 截取每行头16个字符\ncut -c 1-16 file                   # 截取指定文件中每行头 16个字符\ncut -c3-                           # 截取每行从第三个字符开始到行末的内容\ncut -d':' -f5                      # 截取用冒号分隔的第五列内容\ncut -d';' -f2,10                   # 截取用分号分隔的第二和第十列内容\ncut -d' ' -f3-7                    # 截取空格分隔的三到七列\necho \"hello\" | cut -c1-3           # 显示 hel\necho \"hello sir\" | cut -d' ' -f2   # 显示 sir\nps | tr -s \" \" | cut -d \" \" -f 2,3,4  # cut 搭配 tr 压缩字符\n\n\n##############################################################################\n# 文本处理 - awk / sed \n##############################################################################\n\nawk '{print $5}' file              # 打印文件中以空格分隔的第五列\nawk -F ',' '{print $5}' file       # 打印文件中以逗号分隔的第五列\nawk '/str/ {print $2}' file        # 打印文件中包含 str 的所有行的第二列\nawk -F ',' '{print $NF}' file      # 打印逗号分隔的文件中的每行最后一列 \nawk '{s+=$1} END {print s}' file   # 计算所有第一列的合\nawk 'NR%3==1' file                 # 从第一行开始，每隔三行打印一行\n\nsed 's/find/replace/' file         # 替换文件中首次出现的字符串并输出结果 \nsed '10s/find/replace/' file       # 替换文件第 10 行内容\nsed '10,20s/find/replace/' file    # 替换文件中 10-20 行内容\nsed -r 's/regex/replace/g' file    # 替换文件中所有出现的字符串\nsed -i 's/find/replace/g' file     # 替换文件中所有出现的字符并且覆盖文件\nsed -i '/find/i\\newline' file      # 在文件的匹配文本前插入行\nsed -i '/find/a\\newline' file      # 在文件的匹配文本后插入行\nsed '/line/s/find/replace/' file   # 先搜索行特征再执行替换\nsed -e 's/f/r/' -e 's/f/r' file    # 执行多次替换\nsed 's#find#replace#' file         # 使用 # 替换 / 来避免 pattern 中有斜杆\nsed -i -r 's/^\\s+//g' file         # 删除文件每行头部空格\nsed '/^$/d' file                   # 删除文件空行并打印\nsed -i 's/\\s\\+$//' file            # 删除文件每行末尾多余空格\nsed -n '2p' file                   # 打印文件第二行\nsed -n '2,5p' file                 # 打印文件第二到第五行\n\n\n##############################################################################\n# 排序 - sort\n##############################################################################\n\nsort file                          # 排序文件\nsort -r file                       # 反向排序（降序）\nsort -n file                       # 使用数字而不是字符串进行比较\nsort -t: -k 3n /etc/passwd         # 按 passwd 文件的第三列进行排序\nsort -u file                       # 去重排序\n\n\n##############################################################################\n# 快速跳转 - https://github.com/rupa/z\n##############################################################################\n\nsource /path/to/z.sh               # .bashrc 中初始化 z.sh\nz                                  # 列出所有历史路径以及他们的权重\nz foo                              # 跳到历史路径中匹配 foo 的权重最大的目录\nz foo bar                          # 跳到历史路径中匹配 foo 和 bar 权重最大的目录\nz -l foo                           # 列出所有历史路径中匹配 foo 的目录及权重\nz -r foo                           # 按照最高访问次数优先进行匹配跳转\nz -t foo                           # 按照最近访问优先进行匹配跳转\n\n\n##############################################################################\n# 键盘绑定\n##############################################################################\n\nbind '\"\\eh\":\"\\C-b\"'                # 绑定 ALT+h 为光标左移，同 CTRL+b / <Left>\nbind '\"\\el\":\"\\C-f\"'                # 绑定 ALT+l 为光标右移，同 CTRL+f / <Right>\nbind '\"\\ej\":\"\\C-n\"'                # 绑定 ALT+j 为下条历史，同 CTRL+n / <Down>\nbind '\"\\ek\":\"\\C-p\"'                # 绑定 ALT+k 为上条历史，同 CTRL+p / <Up>\nbind '\"\\eH\":\"\\eb\"'                 # 绑定 ALT+H 为光标左移一个单词，同 ALT-b \nbind '\"\\eL\":\"\\ef\"'                 # 绑定 ALT+L 为光标右移一个单词，同 ALT-f \nbind '\"\\eJ\":\"\\C-a\"'                # 绑定 ALT+J 为移动到行首，同 CTRL+a / <Home>\nbind '\"\\eK\":\"\\C-e\"'                # 绑定 ALT+K 为移动到行末，同 CTRL+e / <End>\nbind '\"\\e;\":\"ls -l\\n\"'             # 绑定 ALT+; 为执行 ls -l 命令\n\n\n##############################################################################\n# 网络管理：ip / ifconfig / nmap ...\n##############################################################################\n\nip a                               # 显示所有网络地址，同 ip address\nip a show eth1                     # 显示网卡 IP 地址\nip a add 172.16.1.23/24 dev eth1   # 添加网卡 IP 地址\nip a del 172.16.1.23/24 dev eth1   # 删除网卡 IP 地址\nip link show dev eth0              # 显示网卡设备属性\nip link set eth1 up                # 激活网卡\nip link set eth1 down              # 关闭网卡\nip link set eth1 address {mac}     # 修改 MAC 地址\nip neighbour                       # 查看 ARP 缓存\nip route                           # 查看路由表\nip route add 10.1.0.0/24 via 10.0.0.253 dev eth0    # 添加静态路由\nip route del 10.1.0.0/24           # 删除静态路由\n\nifconfig                           # 显示所有网卡和接口信息\nifconfig -a                        # 显示所有网卡（包括开机没启动的）信息\nifconfig eth0                      # 指定设备显示信息\nifconfig eth0 up                   # 激活网卡\nifconfig eth0 down                 # 关闭网卡\nifconfig eth0 192.168.120.56       # 给网卡配置 IP 地址\nifconfig eth0 10.0.0.8 netmask 255.255.255.0 up     # 配置 IP 并启动\nifconfig eth0 hw ether 00:aa:bb:cc:dd:ee            # 修改 MAC 地址\n\nnmap 10.0.0.12                     # 扫描主机 1-1000 端口\nnmap -p 1024-65535 10.0.0.12       # 扫描给定端口\nnmap 10.0.0.0/24                   # 给定网段扫描局域网内所有主机\nnmap -O -sV 10.0.0.12              # 探测主机服务和操作系统版本\n\n\n##############################################################################\n# 有趣的命令\n##############################################################################\n\nman hier                           # 查看文件系统的结构和含义\nman test                           # 查看 posix sh 的条件判断帮助\nman ascii                          # 显示 ascii 表\ngetconf LONG_BIT                   # 查看系统是 32 位还是 64 位\nbind -P                            # 列出所有 bash 的快捷键\nmount | column -t                  # 漂亮的列出当前加载的文件系统\ncurl ip.cn                         # 取得外网 ip 地址和服务商信息\ndisown -a && exit                  # 关闭所有后台任务并退出\ncat /etc/issue                     # 查看 Linux 发行版信息\nlsof -i port:80                    # 哪个程序在使用 80 端口？\nshowkey -a                         # 取得按键的 ASCII 码\nsvn diff | view -                  # 使用 Vim 来显示带色彩的 diff 输出\nmv filename.{old,new}              # 快速文件改名\ntime read                          # 使用 CTRL-D 停止，最简单的计时功能\ncp file.txt{,.bak}                 # 快速备份文件\nsudo touch /forcefsck              # 强制在下次重启时扫描磁盘\nfind ~ -mmin 60 -type f            # 查找 $HOME 目录中，60 分钟内修改过的文件\ncurl wttr.in/~beijing              # 查看北京的天气预报\necho ${SSH_CLIENT%% *}             # 取得你是从什么 IP 链接到当前主机上的\necho $[RANDOM%X+1]                 # 取得 1 到 X 之间的随机数\nbind -x '\"\\C-l\":ls -l'             # 设置 CTRL+l 为执行 ls -l 命令\nfind / -type f -size +5M           # 查找大于 5M 的文件\nchmod --reference f1 f2            # 将 f2 的权限设置成 f1 一模一样的\ncurl -L cheat.sh                   # 速查表大全\n\n\n##############################################################################\n# 常用技巧\n##############################################################################\n\n# 列出最常使用的命令\nhistory | awk '{a[$2]++}END{for(i in a){print a[i] \" \" i}}' | sort -rn | head\n\n# 列出所有网络状态：ESTABLISHED / TIME_WAIT / FIN_WAIT1 / FIN_WAIT2 \nnetstat -n | awk '/^tcp/ {++tt[$NF]} END {for (a in tt) print a, tt[a]}'\n\n# 通过 SSH 来 mount 文件系统\nsshfs name@server:/path/to/folder /path/to/mount/point\n\n# 显示前十个运行的进程并按内存使用量排序\nps aux | sort -nk +4 | tail\n\n# 在右上角显示时钟\nwhile sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done&\n\n# 从网络上的压缩文件中解出一个文件来，并避免保存中间文件\nwget -qO - \"http://www.tarball.com/tarball.gz\" | tar zxvf -\n\n# 性能测试：测试处理器性能\npython -c \"import test.pystone;print(test.pystone.pystones())\"\n\n# 性能测试：测试内存带宽\ndd if=/dev/zero of=/dev/null bs=1M count=32768\n\n# Linux 下挂载一个 iso 文件\nmount /path/to/file.iso /mnt/cdrom -oloop\n\n# 通过主机 A 直接 ssh 到主机 B\nssh -t hostA ssh hostB\n\n# 下载一个网站的所有图片\nwget -r -l1 --no-parent -nH -nd -P/tmp -A\".gif,.jpg\" http://example.com/images\n\n# 快速创建项目目录\nmkdir -p work/{project1,project2}/{src,bin,bak}\n\n# 按日期范围查找文件\nfind . -type f -newermt \"2010-01-01\" ! -newermt \"2010-06-01\"\n\n# 显示当前正在使用网络的进程\nlsof -P -i -n | cut -f 1 -d \" \"| uniq | tail -n +2\n\n# Vim 中保存一个没有权限的文件\n:w !sudo tee > /dev/null %\n\n# 在 .bashrc / .bash_profile 中加载另外一个文件（比如你保存在 github 上的配置）\nsource ~/github/profiles/my_bash_init.sh\n\n# 终端下正确设置 ALT 键和 BackSpace 键\nhttp://www.skywind.me/blog/archives/2021\n\n\n##############################################################################\n# 有用的函数\n##############################################################################\n\n# 自动解压：判断文件后缀名并调用相应解压命令\nfunction q-extract() {\n    if [ -f $1 ] ; then\n        case $1 in\n        *.tar.bz2)   tar -xvjf $1    ;;\n        *.tar.gz)    tar -xvzf $1    ;;\n        *.tar.xz)    tar -xvJf $1    ;;\n        *.bz2)       bunzip2 $1     ;;\n        *.rar)       rar x $1       ;;\n        *.gz)        gunzip $1      ;;\n        *.tar)       tar -xvf $1     ;;\n        *.tbz2)      tar -xvjf $1    ;;\n        *.tgz)       tar -xvzf $1    ;;\n        *.zip)       unzip $1       ;;\n        *.Z)         uncompress $1  ;;\n        *.7z)        7z x $1        ;;\n        *)           echo \"don't know how to extract '$1'...\" ;;\n        esac\n    else\n        echo \"'$1' is not a valid file!\"\n    fi\n}\n\n# 自动压缩：判断后缀名并调用相应压缩程序\nfunction q-compress() {\n    if [ -n \"$1\" ] ; then\n        FILE=$1\n        case $FILE in\n        *.tar) shift && tar -cf $FILE $* ;;\n        *.tar.bz2) shift && tar -cjf $FILE $* ;;\n        *.tar.xz) shift && tar -cJf $FILE $* ;;\n        *.tar.gz) shift && tar -czf $FILE $* ;;\n        *.tgz) shift && tar -czf $FILE $* ;;\n        *.zip) shift && zip $FILE $* ;;\n        *.rar) shift && rar $FILE $* ;;\n        esac\n    else\n        echo \"usage: q-compress <foo.tar.gz> ./foo ./bar\"\n    fi\n}\n\n# 漂亮的带语法高亮的 color cat ，需要先 pip install pygments\nfunction ccat() {\n    local style=\"monokai\"\n    if [ $# -eq 0 ]; then\n        pygmentize -P style=$style -P tabsize=4 -f terminal256 -g\n    else\n        for NAME in $@; do\n            pygmentize -P style=$style -P tabsize=4 -f terminal256 -g \"$NAME\"\n        done\n    fi\n}\n\n\n##############################################################################\n# 好玩的配置\n##############################################################################\n\n# 放到你的 ~/.bashrc 配置文件中，给 man 增加漂亮的色彩高亮\nexport LESS_TERMCAP_mb=$'\\E[1m\\E[32m'\nexport LESS_TERMCAP_mh=$'\\E[2m'\nexport LESS_TERMCAP_mr=$'\\E[7m'\nexport LESS_TERMCAP_md=$'\\E[1m\\E[36m'\nexport LESS_TERMCAP_ZW=\"\"\nexport LESS_TERMCAP_us=$'\\E[4m\\E[1m\\E[37m'\nexport LESS_TERMCAP_me=$'\\E(B\\E[m'\nexport LESS_TERMCAP_ue=$'\\E[24m\\E(B\\E[m'\nexport LESS_TERMCAP_ZO=\"\"\nexport LESS_TERMCAP_ZN=\"\"\nexport LESS_TERMCAP_se=$'\\E[27m\\E(B\\E[m'\nexport LESS_TERMCAP_ZV=\"\"\nexport LESS_TERMCAP_so=$'\\E[1m\\E[33m\\E[44m'\n\n# ALT+hjkl/HJKL 快速移动光标，将下面内容添加到 ~/.inputrc 中可作用所有工具，\n# 包括 bash/zsh/python/lua 等使用 readline 的工具，帮助见：info rluserman\n\"\\eh\": backward-char\n\"\\el\": forward-char\n\"\\ej\": next-history\n\"\\ek\": previous-history\n\"\\eH\": backward-word\n\"\\eL\": forward-word\n\"\\eJ\": beginning-of-line\n\"\\eK\": end-of-line\n\n```\n参考：\n<span data-type=\"color\" style=\"color:#d4d4d4\">https://github.com/Idnan/bash-guide</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">http://www.linuxstall.com/linux-command-line-tips-that-every-linux-user-should-know/</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">https://ss64.com/bash/syntax-keyboard.html</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">http://wiki.bash-hackers.org/commands/classictest</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">https://www.ibm.com/developerworks/library/l-bash-test/index.html</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">https://www.cyberciti.biz/faq/bash-loop-over-file/</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">https://linuxconfig.org/bash-scripting-tutorial</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">https://devhints.io/bash</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">https://github.com/jlevy/the-art-of-command-line</span>\n<span data-type=\"color\" style=\"color:#d4d4d4\">https://yq.aliyun.com/articles/68541</span>\n\n",
    "body_html": "<p>这两天写shell代码的时候，发现好多命令都不太会。后来在网上查，发现一个好东东，和大家分享（中文速查表）</p><p><br /></p><pre><code>##############################################################################\n# BASH CHEATSHEET (中文速查表) \n##############################################################################\n\n\n##############################################################################\n# 常用快捷键（默认使用 Emacs 键位）\n##############################################################################\n\nCTRL+A              # 移动到行首，同 &lt;Home&gt;\nCTRL+B              # 向后移动，同 &lt;Left&gt;\nCTRL+C              # 结束当前命令\nCTRL+D              # 删除光标前的字符，同 &lt;Delete&gt; ，或者没有内容时，退出会话\nCTRL+E              # 移动到行末，同 &lt;End&gt;\nCTRL+F              # 向前移动，同 &lt;Right&gt;\nCTRL+G              # 退出当前编辑（比如正在 CTRL+R 搜索历史时）\nCTRL+H              # 删除光标左边的字符，同 &lt;Backspace&gt;\nCTRL+K              # 删除光标位置到行末的内容\nCTRL+L              # 清屏并重新显示\nCTRL+N              # 移动到命令历史的下一行，同 &lt;Down&gt;\nCTRL+O              # 类似回车，但是会显示下一行历史\nCTRL+P              # 移动到命令历史的上一行，同 &lt;Up&gt;\nCTRL+R              # 历史命令反向搜索，使用 CTRL+G 退出搜索\nCTRL+S              # 历史命令正向搜索，使用 CTRL+G 退出搜索\nCTRL+T              # 交换前后两个字符\nCTRL+U              # 删除字符到行首\nCTRL+V              # 输入字符字面量，先按 CTRL+V 再按任意键\nCTRL+W              # 删除光标左边的一个单词\nCTRL+X              # 列出可能的补全\nCTRL+Y              # 粘贴前面 CTRL+u/k/w 删除过的内容\nCTRL+Z              # 暂停前台进程返回 bash，需要时可用 fg 将其切换回前台\nCTRL+_              # 撤销（undo），有的终端将 CTRL+_ 映射为 CTRL+/ 或 CTRL+7\n\nALT+b               # 向后（左边）移动一个单词\nALT+d               # 删除光标后（右边）一个单词\nALT+f               # 向前（右边）移动一个单词\nALT+t               # 交换字符\nALT+BACKSPACE       # 删除光标前面一个单词，类似 CTRL+W，但不影响剪贴板\n\nCTRL+X CTRL+X       # 连续按两次 CTRL+X，光标在当前位置和行首来回跳转 \nCTRL+X CTRL+E       # 用你指定的编辑器，编辑当前命令\n\n\n##############################################################################\n# BASH 基本操作\n##############################################################################\n\nexit                # 退出当前登陆\nenv                 # 显示环境变量\necho $SHELL         # 显示你在使用什么 SHELL\n\nbash                # 使用 bash，用 exit 返回\nwhich bash          # 搜索 $PATH，查找哪个程序对应命令 bash\nwhereis bash        # 搜索可执行，头文件和帮助信息的位置，使用系统内建数据库\nwhatis bash         # 查看某个命令的解释，一句话告诉你这是干什么的\n\nclear               # 清初屏幕内容\nreset               # 重置终端（当你不小心 cat 了一个二进制，终端状态乱掉时使用）\n\n\n##############################################################################\n# 目录操作\n##############################################################################\n\ncd                  # 返回自己 $HOME 目录\ncd {dirname}        # 进入目录\npwd                 # 显示当前所在目录\nmkdir {dirname}     # 创建目录\nmkdir -p {dirname}  # 递归创建目录\npushd {dirname}     # 目录压栈并进入新目录\npopd                # 弹出并进入栈顶的目录\ndirs -v             # 列出当前目录栈\ncd -                # 回到之前的目录\ncd -{N}             # 切换到目录栈中的第 N个目录，比如 cd -2 将切换到第二个\n\n\n##############################################################################\n# 文件操作\n##############################################################################\n\nls                  # 显示当前目录内容，后面可接目录名：ls {dir} 显示指定目录\nls -l               # 列表方式显示目录内容，包括文件日期，大小，权限等信息\nls -a               # 显示所有文件和目录，包括隐藏文件（.开头的文件/目录名）\nln -s {fn} {link}   # 给指定文件创建一个软链接\ncp {src} {dest}     # 拷贝文件，cp -r dir1 dir2 可以递归拷贝（目录）\nrm {fn}             # 删除文件，rm -r 递归删除目录，rm -f 强制删除\nmv {src} {dest}     # 移动文件，如果 dest 是目录，则移动，是文件名则覆盖\ntouch {fn}          # 创建或者更新一下制定文件\ncat {fn}            # 输出文件原始内容\nany_cmd &gt; {fn}      # 执行任意命令并将标准输出重定向到指定文件\nmore {fn}           # 逐屏显示某文件内容，空格翻页，q 退出\nless {fn}           # 更高级点的 more，更多操作，q 退出\nhead {fn}           # 显示文件头部数行，可用 head -3 abc.txt 显示头三行\ntail {fn}           # 显示文件尾部数行，可用 tail -3 abc.txt 显示尾部三行\ntail -f {fn}        # 持续显示文件尾部数据，可用于监控日志\nnano {fn}           # 使用 nano 编辑器编辑文件\nvim {fn}            # 使用 vim 编辑文件\ndiff {f1} {f2}      # 比较两个文件的内容\nwc {fn}             # 统计文件有多少行，多少个单词\nchmod 644 {fn}      # 修改文件权限为 644，可以接 -R 对目录循环改权限\nchgrp group {fn}    # 修改文件所属的用户组\nchown user1 {fn}    # 修改文件所有人为 user1, chown user1:group1 fn 可以修改组\nfile {fn}           # 检测文件的类型和编码\nbasename {fn}       # 查看文件的名字（不包括路径）\ndirname {fn}        # 查看文件的路径（不包括名字）\ngrep {pat} {fn}     # 在文件中查找出现过 pat 的内容\ngrep -r {pat} .     # 在当前目录下递归查找所有出现过 pat 的文件内容\nstat {fn}           # 显示文件的详细信息\n\n\n##############################################################################\n# 用户管理\n##############################################################################\n\nwhoami              # 显示我的用户名\nwho                 # 显示已登陆用户信息，w / who / users 内容略有不同\nw                   # 显示已登陆用户信息，w / who / users 内容略有不同\nusers               # 显示已登陆用户信息，w / who / users 内容略有不同\npasswd              # 修改密码，passwd {user} 可以用于 root 修改别人密码\nfinger {user}       # 显示某用户信息，包括 id, 名字, 登陆状态等\nadduser {user}      # 添加用户\ndeluser {user}      # 删除用户\nw                   # 查看谁在线\nsu                  # 切换到 root 用户\nsu -                # 切换到 root 用户并登陆（执行登陆脚本）\nsu {user}           # 切换到某用户\nsu -{user}          # 切换到某用户并登陆（执行登陆脚本）\nid {user}           # 查看用户的 uid，gid 以及所属其他用户组\nid -u {user}        # 打印用户 uid\nid -g {user}        # 打印用户 gid\nwrite {user}        # 向某用户发送一句消息\nlast                # 显示最近用户登陆列表\nlast {user}         # 显示登陆记录\nlastb               # 显示失败登陆记录\nlastlog             # 显示所有用户的最近登陆记录\nsudo {command}      # 以 root 权限执行某命令\n\n\n##############################################################################\n# 进程管理\n##############################################################################\n\nps                        # 查看当前会话进程\nps ax                     # 查看所有进程，类似 ps -e\nps aux                    # 查看所有进程详细信息，类似 ps -ef\nps auxww                  # 查看所有进程，并且显示进程的完整启动命令\nps -u {user}              # 查看某用户进程\nps axjf                   # 列出进程树\nps xjf -u {user}          # 列出某用户的进程树\nps -eo pid,user,command   # 按用户指定的格式查看进程\nps aux | grep httpd       # 查看名为 httpd 的所有进程\nps --ppid {pid}           # 查看父进程为 pid 的所有进程\npstree                    # 树形列出所有进程，pstree 默认一般不带，需安装\npstree {user}             # 进程树列出某用户的进程\npstree -u                 # 树形列出所有进程以及所属用户\npgrep {procname}          # 搜索名字匹配的进程的 pid，比如 pgrep apache2\n\nkill {pid}                # 结束进程\nkill -9 {pid}             # 强制结束进程，9/SIGKILL 是强制不可捕获结束信号\nkill -KILL {pid}          # 强制执行进程，kill -9 的另外一种写法\nkill -l                   # 查看所有信号\nkill -l TERM              # 查看 TERM 信号的编号\nkillall {procname}        # 按名称结束所有进程\npkill {procname}          # 按名称结束进程，除名称外还可以有其他参数\n\ntop                       # 查看最活跃的进程\ntop -u {user}             # 查看某用户最活跃的进程\n\nany_command &amp;             # 在后台运行某命令，也可用 CTRL+Z 将当前进程挂到后台\njobs                      # 查看所有后台进程（jobs）\nbg                        # 查看后台进程，并切换过去\nfg                        # 切换后台进程到前台\nfg {job}                  # 切换特定后台进程到前台\n\ntrap cmd sig1 sig2        # 在脚本中设置信号处理命令\ntrap &quot;&quot; sig1 sig2         # 在脚本中屏蔽某信号\ntrap - sig1 sig2          # 恢复默认信号处理行为\n\nnohup {command}           # 长期运行某程序，在你退出登陆都保持它运行\nnohup {command} &amp;         # 在后台长期运行某程序\ndisown {PID|JID}          # 将进程从后台任务列表（jobs）移除\n\nwait                      # 等待所有后台进程任务结束\n\n\n##############################################################################\n# 常用命令：SSH / 系统信息 / 网络\n##############################################################################\n\nssh user@host             # 以用户 user 登陆到远程主机 host\nssh -p {port} user@host   # 指定端口登陆主机\nssh-copy-id user@host     # 拷贝你的 ssh key 到远程主机，避免重复输入密码\nscp {fn} user@host:path   # 拷贝文件到远程主机\nscp user@host:path dest   # 从远程主机拷贝文件回来\nscp -P {port} ...         # 指定端口远程拷贝文件\n\nuname -a                  # 查看内核版本等信息\nman {help}                # 查看帮助\nman -k {keyword}          # 查看哪些帮助文档里包含了该关键字\ninfo {help}               # 查看 info pages，比 man 更强的帮助系统\nuptime                    # 查看系统启动时间\ndate                      # 显示日期\ncal                       # 显示日历\nvmstat                    # 显示内存和 CPU 使用情况\nvmstat 10                 # 每 10 秒打印一行内存和 CPU情况，CTRL+C 退出\nfree                      # 显示内存和交换区使用情况\ndf                        # 显示磁盘使用情况\ndu                        # 显示当前目录占用，du . --max-depth=2 可以指定深度\nuname                     # 显示系统版本号\nhostname                  # 显示主机名称\nshowkey -a                # 查看终端发送的按键编码\n\nping {host}               # ping 远程主机并显示结果，CTRL+C 退出\nping -c N {host}          # ping 远程主机 N 次\ntraceroute {host}         # 侦测路由连通情况\nmtr {host}                # 高级版本 traceroute\nhost {domain}             # DNS 查询，{domain} 前面可加 -a 查看详细信息\nwhois {domain}            # 取得域名 whois 信息\ndig {domain}              # 取得域名 dns 信息\nroute -n                  # 查看路由表\nnetstat -a                # 列出所有端口\nnetstat -an               # 查看所有连接信息，不解析域名\nnetstat -anp              # 查看所有连接信息，包含进程信息（需要 sudo）\nnetstat -l                # 查看所有监听的端口\nnetstat -t                # 查看所有 TCP 链接\nnetstat -lntu             # 显示所有正在监听的 TCP 和 UDP 信息\nnetstat -lntup            # 显示所有正在监听的 socket 及进程信息\nnetstat -i                # 显示网卡信息\nnetstat -rn               # 显示当前系统路由表，同 route -n\nss -an                    # 比 netstat -an 更快速更详细\nss -s                     # 统计 TCP 的 established, wait 等\n\nwget {url}                # 下载文件，可加 --no-check-certificate 忽略 ssl 验证\nwget -qO- {url}           # 下载文件并输出到标准输出（不保存）\ncurl -sL {url}            # 同 wget -qO- {url} 没有 wget 的时候使用\n\nsz {file}                 # 发送文件到终端，zmodem 协议\nrz                        # 接收终端发送过来的文件\n\n\n##############################################################################\n# 变量操作\n##############################################################################\n\nvarname=value             # 定义变量\nvarname=value command     # 定义子进程变量并执行子进程\necho $varname             # 查看变量内容\necho $$                   # 查看当前 shell 的进程号\necho $!                   # 查看最近调用的后台任务进程号\necho $?                   # 查看最近一条命令的返回码\nexport VARNAME=value      # 设置环境变量（将会影响到子进程）\n\narray[0]=valA             # 定义数组\narray[1]=valB\narray[2]=valC\narray=([0]=valA [1]=valB [2]=valC)   # 另一种方式\narray=(valA valB valC)               # 另一种方式\n\n${array[i]}               # 取得数组中的元素\n${#array[@]}              # 取得数组的长度\n${#array[i]}              # 取得数组中某个变量的长度\n\ndeclare -a                # 查看所有数组\ndeclare -f                # 查看所有函数\ndeclare -F                # 查看所有函数，仅显示函数名\ndeclare -i                # 查看所有整数\ndeclare -r                # 查看所有只读变量\ndeclare -x                # 查看所有被导出成环境变量的东西\ndeclare -p varname        # 输出变量是怎么定义的（类型+值）\n\n${varname:-word}          # 如果变量不为空则返回变量，否则返回 word\n${varname:=word}          # 如果变量不为空则返回变量，否则赋值成 word 并返回\n${varname:?message}       # 如果变量不为空则返回变量，否则打印错误信息并退出\n${varname:+word}          # 如果变量不为空则返回 word，否则返回 null\n${varname:offset:len}     # 取得字符串的子字符串\n\n${variable#pattern}       # 如果变量头部匹配 pattern，则删除最小匹配部分返回剩下的\n${variable##pattern}      # 如果变量头部匹配 pattern，则删除最大匹配部分返回剩下的\n${variable%pattern}       # 如果变量尾部匹配 pattern，则删除最小匹配部分返回剩下的\n${variable%%pattern}      # 如果变量尾部匹配 pattern，则删除最大匹配部分返回剩下的\n${variable/pattern/str}   # 将变量中第一个匹配 pattern 的替换成 str，并返回\n${variable//pattern/str}  # 将变量中所有匹配 pattern 的地方替换成 str 并返回\n\n${#varname}               # 返回字符串长度\n\n*(patternlist)            # 零次或者多次匹配\n+(patternlist)            # 一次或者多次匹配\n?(patternlist)            # 零次或者一次匹配\n@(patternlist)            # 单词匹配\n!(patternlist)            # 不匹配\n\narray=($text)             # 按空格分隔 text 成数组，并赋值给变量\nIFS=&quot;/&quot; array=($text)     # 按斜杆分隔字符串 text 成数组，并赋值给变量\ntext=&quot;${array[*]}&quot;        # 用空格链接数组并赋值给变量\ntext=$(IFS=/; echo &quot;${array[*]}&quot;)  # 用斜杠链接数组并赋值给变量\n\n$(UNIX command)           # 运行命令，并将标准输出内容捕获并返回\nvarname=$(id -u user)     # 将用户名为 user 的 uid 赋值给 varname 变量\n\nnum=$(expr 1 + 2)         # 兼容 posix sh 的计算，使用 expr 命令计算结果\nnum=$(expr $num + 1)      # 数字自增\nexpr 2 \\* \\( 2 + 3 \\)     # 兼容 posix sh 的复杂计算，输出 10\n\nnum=$((1 + 2))            # 计算 1+2 赋值给 num，使用 bash 独有的 $((..)) 计算\nnum=$(($num + 1))         # 变量递增\nnum=$((num + 1))          # 变量递增，双括号内的 $ 可以省略\nnum=$((1 + (2 + 3) * 2))  # 复杂计算\n\n\n##############################################################################\n# 事件指示符\n##############################################################################\n\n!!                  # 上一条命令\n!^                  # 上一条命令的第一个单词\n!$                  # 上一条命令的最后一个单词\n!string             # 最近一条包含string的命令\n!^string1^string2   # 最近一条包含string1的命令, 快速替换为string2, 相当于!!:s/string1/string2/\n!#                  # 本条命令之前所有的输入内容\n\n\n##############################################################################\n# 函数\n##############################################################################\n\n# 定义一个新函数\nfunction myfunc() {\n    # $1 代表第一个参数，$N 代表第 N 个参数\n    # $# 代表参数个数\n    # $0 代表被调用者自身的名字\n    # $@ 代表所有参数，类型是个数组，想传递所有参数给其他命令用 cmd &quot;$@&quot; \n    # $* 空格链接起来的所有参数，类型是字符串\n    {shell commands ...}\n}\n\nmyfunc                    # 调用函数 myfunc \nmyfunc arg1 arg2 arg3     # 带参数的函数调用\nmyfunc &quot;$@&quot;               # 将所有参数传递给函数\nshift                     # 参数左移\n\nunset -f myfunc           # 删除函数\ndeclare -f                # 列出函数定义\n\n\n##############################################################################\n# 条件判断（兼容 posix sh 的条件判断）：man test\n##############################################################################\n\nstatement1 &amp;&amp; statement2  # and 操作符\nstatement1 || statement2  # or 操作符\n\nexp1 -a exp2              # exp1 和 exp2 同时为真时返回真（POSIX XSI扩展）\nexp1 -o exp2              # exp1 和 exp2 有一个为真就返回真（POSIX XSI扩展）\n( expression )            # 如果 expression 为真时返回真，输入注意括号前反斜杆\n! expression              # 如果 expression 为假那返回真\n\nstr1 = str2               # 判断字符串相等，如 [ &quot;$x&quot; = &quot;$y&quot; ] &amp;&amp; echo yes\nstr1 != str2              # 判断字符串不等，如 [ &quot;$x&quot; != &quot;$y&quot; ] &amp;&amp; echo yes\nstr1 &lt; str2               # 字符串小于，如 [ &quot;$x&quot; \\&lt; &quot;$y&quot; ] &amp;&amp; echo yes\nstr2 &gt; str2               # 字符串大于，注意 &lt; 或 &gt; 是字面量，输入时要加反斜杆\n-n str1                   # 判断字符串不为空（长度大于零）\n-z str1                   # 判断字符串为空（长度等于零）\n\n-a file                   # 判断文件存在，如 [ -a /tmp/abc ] &amp;&amp; echo &quot;exists&quot;\n-d file                   # 判断文件存在，且该文件是一个目录\n-e file                   # 判断文件存在，和 -a 等价\n-f file                   # 判断文件存在，且该文件是一个普通文件（非目录等）\n-r file                   # 判断文件存在，且可读\n-s file                   # 判断文件存在，且尺寸大于0\n-w file                   # 判断文件存在，且可写\n-x file                   # 判断文件存在，且执行\n-N file                   # 文件上次修改过后还没有读取过\n-O file                   # 文件存在且属于当前用户\n-G file                   # 文件存在且匹配你的用户组\nfile1 -nt file2           # 文件1 比 文件2 新\nfile1 -ot file2           # 文件1 比 文件2 旧\n\nnum1 -eq num2             # 数字判断：num1 == num2\nnum1 -ne num2             # 数字判断：num1 != num2\nnum1 -lt num2             # 数字判断：num1 &lt; num2\nnum1 -le num2             # 数字判断：num1 &lt;= num2\nnum1 -gt num2             # 数字判断：num1 &gt; num2\nnum1 -ge num2             # 数字判断：num1 &gt;= num2\n\n\n##############################################################################\n# 分支控制：if 和经典 test，兼容 posix sh 的条件判断语句\n##############################################################################\n\ntest {expression}         # 判断条件为真的话 test 程序返回0 否则非零\n[ expression ]            # 判断条件为真的话返回0 否则非零\n\ntest &quot;abc&quot; = &quot;def&quot;        # 查看返回值 echo $? 显示 1，因为条件为假\ntest &quot;abc&quot; != &quot;def&quot;       # 查看返回值 echo $? 显示 0，因为条件为真\n\ntest -a /tmp; echo $?     # 调用 test 判断 /tmp 是否存在，并打印 test 的返回值\n[ -a /tmp ]; echo $?      # 和上面完全等价，/tmp 肯定是存在的，所以输出是 0\n\ntest cond &amp;&amp; cmd1         # 判断条件为真时执行 cmd1\n[ cond ] &amp;&amp; cmd1          # 和上面完全等价\n[ cond ] &amp;&amp; cmd1 || cmd2  # 条件为真执行 cmd1 否则执行 cmd2\n\n# 判断 /etc/passwd 文件是否存在\n# 经典的 if 语句就是判断后面的命令返回值为0的话，认为条件为真，否则为假\nif test -e /etc/passwd; then\n    echo &quot;alright it exists ... &quot;\nelse\n    echo &quot;it doesn't exist ... &quot;\nfi\n\n# 和上面完全等价，[ 是个和 test 一样的可执行程序，但最后一个参数必须为 ]\n# 这个名字为 &quot;[&quot; 的可执行程序一般就在 /bin 或 /usr/bin 下面，比 test 优雅些\nif [ -e /etc/passwd ]; then   \n    echo &quot;alright it exists ... &quot;\nelse\n    echo &quot;it doesn't exist ... &quot;\nfi\n\n# 和上面两个完全等价，其实到 bash 时代 [ 已经是内部命令了，用 enable 可以看到\n[ -e /etc/passwd ] &amp;&amp; echo &quot;alright it exists&quot; || echo &quot;it doesn't exist&quot;\n\n# 判断变量的值\nif [ &quot;$varname&quot; = &quot;foo&quot; ]; then\n    echo &quot;this is foo&quot;\nelif [ &quot;$varname&quot; = &quot;bar&quot; ]; then\n    echo &quot;this is bar&quot;\nelse\n    echo &quot;neither&quot;\nfi\n\n# 复杂条件判断，注意 || 和 &amp;&amp; 是完全兼容 POSIX 的推荐写法\nif [ $x -gt 10 ] &amp;&amp; [ $x -lt 20 ]; then\n    echo &quot;yes, between 10 and 20&quot;\nfi\n\n# 可以用 &amp;&amp; 命令连接符来做和上面完全等价的事情\n[ $x -gt 10 ] &amp;&amp; [ $x -lt 20 ] &amp;&amp; echo &quot;yes, between 10 and 20&quot;\n\n# 小括号和 -a -o 是 POSIX XSI 扩展写法，小括号是字面量，输入时前面要加反斜杆\nif [ \\( $x -gt 10 \\) -a \\( $x -lt 20 \\) ]; then\n    echo &quot;yes, between 10 and 20&quot;\nfi\n\n# 同样可以用 &amp;&amp; 命令连接符来做和上面完全等价的事情\n[ \\( $x -gt 10 \\) -a \\( $x -lt 20 \\) ] &amp;&amp; echo &quot;yes, between 10 and 20&quot;\n\n\n# 判断程序存在的话就执行\n[ -x /bin/ls ] &amp;&amp; /bin/ls -l\n\n# 如果不考虑兼容 posix sh 和 dash 这些的话，可用 bash 独有的 ((..)) 和 [[..]]:\nhttps://www.ibm.com/developerworks/library/l-bash-test/index.html\n\n\n##############################################################################\n# 流程控制：while / for / case / until \n##############################################################################\n\n# while 循环\nwhile condition; do\n    statements\ndone\n\ni=1\nwhile [ $i -le 10 ]; do\n    echo $i; \n    i=$(expr $i + 1)\ndone\n\n# for 循环：上面的 while 语句等价\nfor i in {1..10}; do\n    echo $i\ndone\n\nfor name [in list]; do\n    statements\ndone\n\n# for 列举某目录下面的所有文件\nfor f in /home/*; do \n    echo $f\ndone\n\n# bash 独有的 (( .. )) 语句，更接近 C 语言，但是不兼容 posix sh\nfor (( initialisation ; ending condition ; update )); do\n    statements\ndone\n\n# 和上面的写法等价\nfor ((i = 0; i &lt; 10; i++)); do echo $i; done\n\n# case 判断\ncase expression in \n    pattern1 )\n        statements ;;\n    pattern2 )\n        statements ;;\n    * )\n        otherwise ;;\nesac\n\n# until 语句\nuntil condition; do\n    statements\ndone\n\n# select 语句\nselect name [in list]; do\n  statements that can use $name\ndone\n\n\n##############################################################################\n# 命令处理\n##############################################################################\n\ncommand ls                         # 忽略 alias 直接执行程序或者内建命令 ls\nbuiltin cd                         # 忽略 alias 直接运行内建的 cd 命令\nenable                             # 列出所有 bash 内置命令，或禁止某命令\nhelp {builtin_command}             # 查看内置命令的帮助（仅限 bash 内置命令）\n\neval $script                       # 对 script 变量中的字符串求值（执行）\n\n\n##############################################################################\n# 输出/输入 重定向\n##############################################################################\n\ncmd1 | cmd2                        # 管道，cmd1 的标准输出接到 cmd2 的标准输入\n&lt; file                             # 将文件内容重定向为命令的标准输入\n&gt; file                             # 将命令的标准输出重定向到文件，会覆盖文件\n&gt;&gt; file                            # 将命令的标准输出重定向到文件，追加不覆盖\n&gt;| file                            # 强制输出到文件，即便设置过：set -o noclobber\nn&gt;| file                           # 强制将文件描述符 n的输出重定向到文件\n&lt;&gt; file                            # 同时使用该文件作为标准输入和标准输出\nn&lt;&gt; file                           # 同时使用文件作为文件描述符 n 的输出和输入\nn&gt; file                            # 重定向文件描述符 n 的输出到文件\nn&lt; file                            # 重定向文件描述符 n 的输入为文件内容\nn&gt;&amp;                                # 将标准输出 dup/合并 到文件描述符 n\nn&lt;&amp;                                # 将标准输入 dump/合并 定向为描述符 n\nn&gt;&amp;m                               # 文件描述符 n 被作为描述符 m 的副本，输出用\nn&lt;&amp;m                               # 文件描述符 n 被作为描述符 m 的副本，输入用\n&amp;&gt;file                             # 将标准输出和标准错误重定向到文件\n&lt;&amp;-                                # 关闭标准输入\n&gt;&amp;-                                # 关闭标准输出\nn&gt;&amp;-                               # 关闭作为输出的文件描述符 n\nn&lt;&amp;-                               # 关闭作为输入的文件描述符 n\ndiff &lt;(cmd1) &lt;(cmd2)               # 比较两个命令的输出\n\n\n##############################################################################\n# 文本处理 - cut\n##############################################################################\n\ncut -c 1-16                        # 截取每行头16个字符\ncut -c 1-16 file                   # 截取指定文件中每行头 16个字符\ncut -c3-                           # 截取每行从第三个字符开始到行末的内容\ncut -d':' -f5                      # 截取用冒号分隔的第五列内容\ncut -d';' -f2,10                   # 截取用分号分隔的第二和第十列内容\ncut -d' ' -f3-7                    # 截取空格分隔的三到七列\necho &quot;hello&quot; | cut -c1-3           # 显示 hel\necho &quot;hello sir&quot; | cut -d' ' -f2   # 显示 sir\nps | tr -s &quot; &quot; | cut -d &quot; &quot; -f 2,3,4  # cut 搭配 tr 压缩字符\n\n\n##############################################################################\n# 文本处理 - awk / sed \n##############################################################################\n\nawk '{print $5}' file              # 打印文件中以空格分隔的第五列\nawk -F ',' '{print $5}' file       # 打印文件中以逗号分隔的第五列\nawk '/str/ {print $2}' file        # 打印文件中包含 str 的所有行的第二列\nawk -F ',' '{print $NF}' file      # 打印逗号分隔的文件中的每行最后一列 \nawk '{s+=$1} END {print s}' file   # 计算所有第一列的合\nawk 'NR%3==1' file                 # 从第一行开始，每隔三行打印一行\n\nsed 's/find/replace/' file         # 替换文件中首次出现的字符串并输出结果 \nsed '10s/find/replace/' file       # 替换文件第 10 行内容\nsed '10,20s/find/replace/' file    # 替换文件中 10-20 行内容\nsed -r 's/regex/replace/g' file    # 替换文件中所有出现的字符串\nsed -i 's/find/replace/g' file     # 替换文件中所有出现的字符并且覆盖文件\nsed -i '/find/i\\newline' file      # 在文件的匹配文本前插入行\nsed -i '/find/a\\newline' file      # 在文件的匹配文本后插入行\nsed '/line/s/find/replace/' file   # 先搜索行特征再执行替换\nsed -e 's/f/r/' -e 's/f/r' file    # 执行多次替换\nsed 's#find#replace#' file         # 使用 # 替换 / 来避免 pattern 中有斜杆\nsed -i -r 's/^\\s+//g' file         # 删除文件每行头部空格\nsed '/^$/d' file                   # 删除文件空行并打印\nsed -i 's/\\s\\+$//' file            # 删除文件每行末尾多余空格\nsed -n '2p' file                   # 打印文件第二行\nsed -n '2,5p' file                 # 打印文件第二到第五行\n\n\n##############################################################################\n# 排序 - sort\n##############################################################################\n\nsort file                          # 排序文件\nsort -r file                       # 反向排序（降序）\nsort -n file                       # 使用数字而不是字符串进行比较\nsort -t: -k 3n /etc/passwd         # 按 passwd 文件的第三列进行排序\nsort -u file                       # 去重排序\n\n\n##############################################################################\n# 快速跳转 - https://github.com/rupa/z\n##############################################################################\n\nsource /path/to/z.sh               # .bashrc 中初始化 z.sh\nz                                  # 列出所有历史路径以及他们的权重\nz foo                              # 跳到历史路径中匹配 foo 的权重最大的目录\nz foo bar                          # 跳到历史路径中匹配 foo 和 bar 权重最大的目录\nz -l foo                           # 列出所有历史路径中匹配 foo 的目录及权重\nz -r foo                           # 按照最高访问次数优先进行匹配跳转\nz -t foo                           # 按照最近访问优先进行匹配跳转\n\n\n##############################################################################\n# 键盘绑定\n##############################################################################\n\nbind '&quot;\\eh&quot;:&quot;\\C-b&quot;'                # 绑定 ALT+h 为光标左移，同 CTRL+b / &lt;Left&gt;\nbind '&quot;\\el&quot;:&quot;\\C-f&quot;'                # 绑定 ALT+l 为光标右移，同 CTRL+f / &lt;Right&gt;\nbind '&quot;\\ej&quot;:&quot;\\C-n&quot;'                # 绑定 ALT+j 为下条历史，同 CTRL+n / &lt;Down&gt;\nbind '&quot;\\ek&quot;:&quot;\\C-p&quot;'                # 绑定 ALT+k 为上条历史，同 CTRL+p / &lt;Up&gt;\nbind '&quot;\\eH&quot;:&quot;\\eb&quot;'                 # 绑定 ALT+H 为光标左移一个单词，同 ALT-b \nbind '&quot;\\eL&quot;:&quot;\\ef&quot;'                 # 绑定 ALT+L 为光标右移一个单词，同 ALT-f \nbind '&quot;\\eJ&quot;:&quot;\\C-a&quot;'                # 绑定 ALT+J 为移动到行首，同 CTRL+a / &lt;Home&gt;\nbind '&quot;\\eK&quot;:&quot;\\C-e&quot;'                # 绑定 ALT+K 为移动到行末，同 CTRL+e / &lt;End&gt;\nbind '&quot;\\e;&quot;:&quot;ls -l\\n&quot;'             # 绑定 ALT+; 为执行 ls -l 命令\n\n\n##############################################################################\n# 网络管理：ip / ifconfig / nmap ...\n##############################################################################\n\nip a                               # 显示所有网络地址，同 ip address\nip a show eth1                     # 显示网卡 IP 地址\nip a add 172.16.1.23/24 dev eth1   # 添加网卡 IP 地址\nip a del 172.16.1.23/24 dev eth1   # 删除网卡 IP 地址\nip link show dev eth0              # 显示网卡设备属性\nip link set eth1 up                # 激活网卡\nip link set eth1 down              # 关闭网卡\nip link set eth1 address {mac}     # 修改 MAC 地址\nip neighbour                       # 查看 ARP 缓存\nip route                           # 查看路由表\nip route add 10.1.0.0/24 via 10.0.0.253 dev eth0    # 添加静态路由\nip route del 10.1.0.0/24           # 删除静态路由\n\nifconfig                           # 显示所有网卡和接口信息\nifconfig -a                        # 显示所有网卡（包括开机没启动的）信息\nifconfig eth0                      # 指定设备显示信息\nifconfig eth0 up                   # 激活网卡\nifconfig eth0 down                 # 关闭网卡\nifconfig eth0 192.168.120.56       # 给网卡配置 IP 地址\nifconfig eth0 10.0.0.8 netmask 255.255.255.0 up     # 配置 IP 并启动\nifconfig eth0 hw ether 00:aa:bb:cc:dd:ee            # 修改 MAC 地址\n\nnmap 10.0.0.12                     # 扫描主机 1-1000 端口\nnmap -p 1024-65535 10.0.0.12       # 扫描给定端口\nnmap 10.0.0.0/24                   # 给定网段扫描局域网内所有主机\nnmap -O -sV 10.0.0.12              # 探测主机服务和操作系统版本\n\n\n##############################################################################\n# 有趣的命令\n##############################################################################\n\nman hier                           # 查看文件系统的结构和含义\nman test                           # 查看 posix sh 的条件判断帮助\nman ascii                          # 显示 ascii 表\ngetconf LONG_BIT                   # 查看系统是 32 位还是 64 位\nbind -P                            # 列出所有 bash 的快捷键\nmount | column -t                  # 漂亮的列出当前加载的文件系统\ncurl ip.cn                         # 取得外网 ip 地址和服务商信息\ndisown -a &amp;&amp; exit                  # 关闭所有后台任务并退出\ncat /etc/issue                     # 查看 Linux 发行版信息\nlsof -i port:80                    # 哪个程序在使用 80 端口？\nshowkey -a                         # 取得按键的 ASCII 码\nsvn diff | view -                  # 使用 Vim 来显示带色彩的 diff 输出\nmv filename.{old,new}              # 快速文件改名\ntime read                          # 使用 CTRL-D 停止，最简单的计时功能\ncp file.txt{,.bak}                 # 快速备份文件\nsudo touch /forcefsck              # 强制在下次重启时扫描磁盘\nfind ~ -mmin 60 -type f            # 查找 $HOME 目录中，60 分钟内修改过的文件\ncurl wttr.in/~beijing              # 查看北京的天气预报\necho ${SSH_CLIENT%% *}             # 取得你是从什么 IP 链接到当前主机上的\necho $[RANDOM%X+1]                 # 取得 1 到 X 之间的随机数\nbind -x '&quot;\\C-l&quot;:ls -l'             # 设置 CTRL+l 为执行 ls -l 命令\nfind / -type f -size +5M           # 查找大于 5M 的文件\nchmod --reference f1 f2            # 将 f2 的权限设置成 f1 一模一样的\ncurl -L cheat.sh                   # 速查表大全\n\n\n##############################################################################\n# 常用技巧\n##############################################################################\n\n# 列出最常使用的命令\nhistory | awk '{a[$2]++}END{for(i in a){print a[i] &quot; &quot; i}}' | sort -rn | head\n\n# 列出所有网络状态：ESTABLISHED / TIME_WAIT / FIN_WAIT1 / FIN_WAIT2 \nnetstat -n | awk '/^tcp/ {++tt[$NF]} END {for (a in tt) print a, tt[a]}'\n\n# 通过 SSH 来 mount 文件系统\nsshfs name@server:/path/to/folder /path/to/mount/point\n\n# 显示前十个运行的进程并按内存使用量排序\nps aux | sort -nk +4 | tail\n\n# 在右上角显示时钟\nwhile sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done&amp;\n\n# 从网络上的压缩文件中解出一个文件来，并避免保存中间文件\nwget -qO - &quot;http://www.tarball.com/tarball.gz&quot; | tar zxvf -\n\n# 性能测试：测试处理器性能\npython -c &quot;import test.pystone;print(test.pystone.pystones())&quot;\n\n# 性能测试：测试内存带宽\ndd if=/dev/zero of=/dev/null bs=1M count=32768\n\n# Linux 下挂载一个 iso 文件\nmount /path/to/file.iso /mnt/cdrom -oloop\n\n# 通过主机 A 直接 ssh 到主机 B\nssh -t hostA ssh hostB\n\n# 下载一个网站的所有图片\nwget -r -l1 --no-parent -nH -nd -P/tmp -A&quot;.gif,.jpg&quot; http://example.com/images\n\n# 快速创建项目目录\nmkdir -p work/{project1,project2}/{src,bin,bak}\n\n# 按日期范围查找文件\nfind . -type f -newermt &quot;2010-01-01&quot; ! -newermt &quot;2010-06-01&quot;\n\n# 显示当前正在使用网络的进程\nlsof -P -i -n | cut -f 1 -d &quot; &quot;| uniq | tail -n +2\n\n# Vim 中保存一个没有权限的文件\n:w !sudo tee &gt; /dev/null %\n\n# 在 .bashrc / .bash_profile 中加载另外一个文件（比如你保存在 github 上的配置）\nsource ~/github/profiles/my_bash_init.sh\n\n# 终端下正确设置 ALT 键和 BackSpace 键\nhttp://www.skywind.me/blog/archives/2021\n\n\n##############################################################################\n# 有用的函数\n##############################################################################\n\n# 自动解压：判断文件后缀名并调用相应解压命令\nfunction q-extract() {\n    if [ -f $1 ] ; then\n        case $1 in\n        *.tar.bz2)   tar -xvjf $1    ;;\n        *.tar.gz)    tar -xvzf $1    ;;\n        *.tar.xz)    tar -xvJf $1    ;;\n        *.bz2)       bunzip2 $1     ;;\n        *.rar)       rar x $1       ;;\n        *.gz)        gunzip $1      ;;\n        *.tar)       tar -xvf $1     ;;\n        *.tbz2)      tar -xvjf $1    ;;\n        *.tgz)       tar -xvzf $1    ;;\n        *.zip)       unzip $1       ;;\n        *.Z)         uncompress $1  ;;\n        *.7z)        7z x $1        ;;\n        *)           echo &quot;don't know how to extract '$1'...&quot; ;;\n        esac\n    else\n        echo &quot;'$1' is not a valid file!&quot;\n    fi\n}\n\n# 自动压缩：判断后缀名并调用相应压缩程序\nfunction q-compress() {\n    if [ -n &quot;$1&quot; ] ; then\n        FILE=$1\n        case $FILE in\n        *.tar) shift &amp;&amp; tar -cf $FILE $* ;;\n        *.tar.bz2) shift &amp;&amp; tar -cjf $FILE $* ;;\n        *.tar.xz) shift &amp;&amp; tar -cJf $FILE $* ;;\n        *.tar.gz) shift &amp;&amp; tar -czf $FILE $* ;;\n        *.tgz) shift &amp;&amp; tar -czf $FILE $* ;;\n        *.zip) shift &amp;&amp; zip $FILE $* ;;\n        *.rar) shift &amp;&amp; rar $FILE $* ;;\n        esac\n    else\n        echo &quot;usage: q-compress &lt;foo.tar.gz&gt; ./foo ./bar&quot;\n    fi\n}\n\n# 漂亮的带语法高亮的 color cat ，需要先 pip install pygments\nfunction ccat() {\n    local style=&quot;monokai&quot;\n    if [ $# -eq 0 ]; then\n        pygmentize -P style=$style -P tabsize=4 -f terminal256 -g\n    else\n        for NAME in $@; do\n            pygmentize -P style=$style -P tabsize=4 -f terminal256 -g &quot;$NAME&quot;\n        done\n    fi\n}\n\n\n##############################################################################\n# 好玩的配置\n##############################################################################\n\n# 放到你的 ~/.bashrc 配置文件中，给 man 增加漂亮的色彩高亮\nexport LESS_TERMCAP_mb=$'\\E[1m\\E[32m'\nexport LESS_TERMCAP_mh=$'\\E[2m'\nexport LESS_TERMCAP_mr=$'\\E[7m'\nexport LESS_TERMCAP_md=$'\\E[1m\\E[36m'\nexport LESS_TERMCAP_ZW=&quot;&quot;\nexport LESS_TERMCAP_us=$'\\E[4m\\E[1m\\E[37m'\nexport LESS_TERMCAP_me=$'\\E(B\\E[m'\nexport LESS_TERMCAP_ue=$'\\E[24m\\E(B\\E[m'\nexport LESS_TERMCAP_ZO=&quot;&quot;\nexport LESS_TERMCAP_ZN=&quot;&quot;\nexport LESS_TERMCAP_se=$'\\E[27m\\E(B\\E[m'\nexport LESS_TERMCAP_ZV=&quot;&quot;\nexport LESS_TERMCAP_so=$'\\E[1m\\E[33m\\E[44m'\n\n# ALT+hjkl/HJKL 快速移动光标，将下面内容添加到 ~/.inputrc 中可作用所有工具，\n# 包括 bash/zsh/python/lua 等使用 readline 的工具，帮助见：info rluserman\n&quot;\\eh&quot;: backward-char\n&quot;\\el&quot;: forward-char\n&quot;\\ej&quot;: next-history\n&quot;\\ek&quot;: previous-history\n&quot;\\eH&quot;: backward-word\n&quot;\\eL&quot;: forward-word\n&quot;\\eJ&quot;: beginning-of-line\n&quot;\\eK&quot;: end-of-line</code></pre><p>参考：</p><p><span style=\"color: #d4d4d4;\">https://github.com/Idnan/bash-guide</span></p><p><span style=\"color: #d4d4d4;\">http://www.linuxstall.com/linux-command-line-tips-that-every-linux-user-should-know/</span></p><p><span style=\"color: #d4d4d4;\">https://ss64.com/bash/syntax-keyboard.html</span></p><p><span style=\"color: #d4d4d4;\">http://wiki.bash-hackers.org/commands/classictest</span></p><p><span style=\"color: #d4d4d4;\">https://www.ibm.com/developerworks/library/l-bash-test/index.html</span></p><p><span style=\"color: #d4d4d4;\">https://www.cyberciti.biz/faq/bash-loop-over-file/</span></p><p><span style=\"color: #d4d4d4;\">https://linuxconfig.org/bash-scripting-tutorial</span></p><p><span style=\"color: #d4d4d4;\">https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh</span></p><p><span style=\"color: #d4d4d4;\">https://devhints.io/bash</span></p><p><span style=\"color: #d4d4d4;\">https://github.com/jlevy/the-art-of-command-line</span></p><p><span style=\"color: #d4d4d4;\">https://yq.aliyun.com/articles/68541</span></p><p><br /></p>",
    "body_lake": "<!doctype lake><p>这两天写shell代码的时候，发现好多命令都不太会。后来在网上查，发现一个好东东，和大家分享（中文速查表）</p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%2204c9fce9%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%22%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20BASH%20CHEATSHEET%20(%E4%B8%AD%E6%96%87%E9%80%9F%E6%9F%A5%E8%A1%A8)%20%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%EF%BC%88%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8%20Emacs%20%E9%94%AE%E4%BD%8D%EF%BC%89%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5CnCTRL%2BA%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A7%BB%E5%8A%A8%E5%88%B0%E8%A1%8C%E9%A6%96%EF%BC%8C%E5%90%8C%20%3CHome%3E%5CnCTRL%2BB%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%90%91%E5%90%8E%E7%A7%BB%E5%8A%A8%EF%BC%8C%E5%90%8C%20%3CLeft%3E%5CnCTRL%2BC%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%93%E6%9D%9F%E5%BD%93%E5%89%8D%E5%91%BD%E4%BB%A4%5CnCTRL%2BD%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E5%85%89%E6%A0%87%E5%89%8D%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%90%8C%20%3CDelete%3E%20%EF%BC%8C%E6%88%96%E8%80%85%E6%B2%A1%E6%9C%89%E5%86%85%E5%AE%B9%E6%97%B6%EF%BC%8C%E9%80%80%E5%87%BA%E4%BC%9A%E8%AF%9D%5CnCTRL%2BE%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A7%BB%E5%8A%A8%E5%88%B0%E8%A1%8C%E6%9C%AB%EF%BC%8C%E5%90%8C%20%3CEnd%3E%5CnCTRL%2BF%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%90%91%E5%89%8D%E7%A7%BB%E5%8A%A8%EF%BC%8C%E5%90%8C%20%3CRight%3E%5CnCTRL%2BG%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%80%80%E5%87%BA%E5%BD%93%E5%89%8D%E7%BC%96%E8%BE%91%EF%BC%88%E6%AF%94%E5%A6%82%E6%AD%A3%E5%9C%A8%20CTRL%2BR%20%E6%90%9C%E7%B4%A2%E5%8E%86%E5%8F%B2%E6%97%B6%EF%BC%89%5CnCTRL%2BH%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E5%85%89%E6%A0%87%E5%B7%A6%E8%BE%B9%E7%9A%84%E5%AD%97%E7%AC%A6%EF%BC%8C%E5%90%8C%20%3CBackspace%3E%5CnCTRL%2BK%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE%E5%88%B0%E8%A1%8C%E6%9C%AB%E7%9A%84%E5%86%85%E5%AE%B9%5CnCTRL%2BL%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%B8%85%E5%B1%8F%E5%B9%B6%E9%87%8D%E6%96%B0%E6%98%BE%E7%A4%BA%5CnCTRL%2BN%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A7%BB%E5%8A%A8%E5%88%B0%E5%91%BD%E4%BB%A4%E5%8E%86%E5%8F%B2%E7%9A%84%E4%B8%8B%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%90%8C%20%3CDown%3E%5CnCTRL%2BO%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%B1%BB%E4%BC%BC%E5%9B%9E%E8%BD%A6%EF%BC%8C%E4%BD%86%E6%98%AF%E4%BC%9A%E6%98%BE%E7%A4%BA%E4%B8%8B%E4%B8%80%E8%A1%8C%E5%8E%86%E5%8F%B2%5CnCTRL%2BP%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%A7%BB%E5%8A%A8%E5%88%B0%E5%91%BD%E4%BB%A4%E5%8E%86%E5%8F%B2%E7%9A%84%E4%B8%8A%E4%B8%80%E8%A1%8C%EF%BC%8C%E5%90%8C%20%3CUp%3E%5CnCTRL%2BR%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E5%8F%8D%E5%90%91%E6%90%9C%E7%B4%A2%EF%BC%8C%E4%BD%BF%E7%94%A8%20CTRL%2BG%20%E9%80%80%E5%87%BA%E6%90%9C%E7%B4%A2%5CnCTRL%2BS%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8E%86%E5%8F%B2%E5%91%BD%E4%BB%A4%E6%AD%A3%E5%90%91%E6%90%9C%E7%B4%A2%EF%BC%8C%E4%BD%BF%E7%94%A8%20CTRL%2BG%20%E9%80%80%E5%87%BA%E6%90%9C%E7%B4%A2%5CnCTRL%2BT%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BA%A4%E6%8D%A2%E5%89%8D%E5%90%8E%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%5CnCTRL%2BU%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E5%88%B0%E8%A1%8C%E9%A6%96%5CnCTRL%2BV%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%8C%E5%85%88%E6%8C%89%20CTRL%2BV%20%E5%86%8D%E6%8C%89%E4%BB%BB%E6%84%8F%E9%94%AE%5CnCTRL%2BW%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E5%85%89%E6%A0%87%E5%B7%A6%E8%BE%B9%E7%9A%84%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%5CnCTRL%2BX%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E5%8F%AF%E8%83%BD%E7%9A%84%E8%A1%A5%E5%85%A8%5CnCTRL%2BY%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%B2%98%E8%B4%B4%E5%89%8D%E9%9D%A2%20CTRL%2Bu%2Fk%2Fw%20%E5%88%A0%E9%99%A4%E8%BF%87%E7%9A%84%E5%86%85%E5%AE%B9%5CnCTRL%2BZ%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9A%82%E5%81%9C%E5%89%8D%E5%8F%B0%E8%BF%9B%E7%A8%8B%E8%BF%94%E5%9B%9E%20bash%EF%BC%8C%E9%9C%80%E8%A6%81%E6%97%B6%E5%8F%AF%E7%94%A8%20fg%20%E5%B0%86%E5%85%B6%E5%88%87%E6%8D%A2%E5%9B%9E%E5%89%8D%E5%8F%B0%5CnCTRL%2B_%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%92%A4%E9%94%80%EF%BC%88undo%EF%BC%89%EF%BC%8C%E6%9C%89%E7%9A%84%E7%BB%88%E7%AB%AF%E5%B0%86%20CTRL%2B_%20%E6%98%A0%E5%B0%84%E4%B8%BA%20CTRL%2B%2F%20%E6%88%96%20CTRL%2B7%5Cn%5CnALT%2Bb%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%90%91%E5%90%8E%EF%BC%88%E5%B7%A6%E8%BE%B9%EF%BC%89%E7%A7%BB%E5%8A%A8%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%5CnALT%2Bd%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E5%85%89%E6%A0%87%E5%90%8E%EF%BC%88%E5%8F%B3%E8%BE%B9%EF%BC%89%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%5CnALT%2Bf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%90%91%E5%89%8D%EF%BC%88%E5%8F%B3%E8%BE%B9%EF%BC%89%E7%A7%BB%E5%8A%A8%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%5CnALT%2Bt%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BA%A4%E6%8D%A2%E5%AD%97%E7%AC%A6%5CnALT%2BBACKSPACE%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E5%85%89%E6%A0%87%E5%89%8D%E9%9D%A2%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%EF%BC%8C%E7%B1%BB%E4%BC%BC%20CTRL%2BW%EF%BC%8C%E4%BD%86%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%89%AA%E8%B4%B4%E6%9D%BF%5Cn%5CnCTRL%2BX%20CTRL%2BX%20%20%20%20%20%20%20%23%20%E8%BF%9E%E7%BB%AD%E6%8C%89%E4%B8%A4%E6%AC%A1%20CTRL%2BX%EF%BC%8C%E5%85%89%E6%A0%87%E5%9C%A8%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE%E5%92%8C%E8%A1%8C%E9%A6%96%E6%9D%A5%E5%9B%9E%E8%B7%B3%E8%BD%AC%20%5CnCTRL%2BX%20CTRL%2BE%20%20%20%20%20%20%20%23%20%E7%94%A8%E4%BD%A0%E6%8C%87%E5%AE%9A%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%8C%E7%BC%96%E8%BE%91%E5%BD%93%E5%89%8D%E5%91%BD%E4%BB%A4%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20BASH%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnexit%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%80%80%E5%87%BA%E5%BD%93%E5%89%8D%E7%99%BB%E9%99%86%5Cnenv%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%5Cnecho%20%24SHELL%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E4%BD%A0%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%BB%80%E4%B9%88%20SHELL%5Cn%5Cnbash%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BD%BF%E7%94%A8%20bash%EF%BC%8C%E7%94%A8%20exit%20%E8%BF%94%E5%9B%9E%5Cnwhich%20bash%20%20%20%20%20%20%20%20%20%20%23%20%E6%90%9C%E7%B4%A2%20%24PATH%EF%BC%8C%E6%9F%A5%E6%89%BE%E5%93%AA%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%AF%B9%E5%BA%94%E5%91%BD%E4%BB%A4%20bash%5Cnwhereis%20bash%20%20%20%20%20%20%20%20%23%20%E6%90%9C%E7%B4%A2%E5%8F%AF%E6%89%A7%E8%A1%8C%EF%BC%8C%E5%A4%B4%E6%96%87%E4%BB%B6%E5%92%8C%E5%B8%AE%E5%8A%A9%E4%BF%A1%E6%81%AF%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%86%85%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%5Cnwhatis%20bash%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%9F%90%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9A%84%E8%A7%A3%E9%87%8A%EF%BC%8C%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%91%8A%E8%AF%89%E4%BD%A0%E8%BF%99%E6%98%AF%E5%B9%B2%E4%BB%80%E4%B9%88%E7%9A%84%5Cn%5Cnclear%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%B8%85%E5%88%9D%E5%B1%8F%E5%B9%95%E5%86%85%E5%AE%B9%5Cnreset%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%87%8D%E7%BD%AE%E7%BB%88%E7%AB%AF%EF%BC%88%E5%BD%93%E4%BD%A0%E4%B8%8D%E5%B0%8F%E5%BF%83%20cat%20%E4%BA%86%E4%B8%80%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%8C%E7%BB%88%E7%AB%AF%E7%8A%B6%E6%80%81%E4%B9%B1%E6%8E%89%E6%97%B6%E4%BD%BF%E7%94%A8%EF%BC%89%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E7%9B%AE%E5%BD%95%E6%93%8D%E4%BD%9C%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cncd%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%BF%94%E5%9B%9E%E8%87%AA%E5%B7%B1%20%24HOME%20%E7%9B%AE%E5%BD%95%5Cncd%20%7Bdirname%7D%20%20%20%20%20%20%20%20%23%20%E8%BF%9B%E5%85%A5%E7%9B%AE%E5%BD%95%5Cnpwd%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%89%80%E5%9C%A8%E7%9B%AE%E5%BD%95%5Cnmkdir%20%7Bdirname%7D%20%20%20%20%20%23%20%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95%5Cnmkdir%20-p%20%7Bdirname%7D%20%20%23%20%E9%80%92%E5%BD%92%E5%88%9B%E5%BB%BA%E7%9B%AE%E5%BD%95%5Cnpushd%20%7Bdirname%7D%20%20%20%20%20%23%20%E7%9B%AE%E5%BD%95%E5%8E%8B%E6%A0%88%E5%B9%B6%E8%BF%9B%E5%85%A5%E6%96%B0%E7%9B%AE%E5%BD%95%5Cnpopd%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%BC%B9%E5%87%BA%E5%B9%B6%E8%BF%9B%E5%85%A5%E6%A0%88%E9%A1%B6%E7%9A%84%E7%9B%AE%E5%BD%95%5Cndirs%20-v%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E6%A0%88%5Cncd%20-%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%9B%9E%E5%88%B0%E4%B9%8B%E5%89%8D%E7%9A%84%E7%9B%AE%E5%BD%95%5Cncd%20-%7BN%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%87%E6%8D%A2%E5%88%B0%E7%9B%AE%E5%BD%95%E6%A0%88%E4%B8%AD%E7%9A%84%E7%AC%AC%20N%E4%B8%AA%E7%9B%AE%E5%BD%95%EF%BC%8C%E6%AF%94%E5%A6%82%20cd%20-2%20%E5%B0%86%E5%88%87%E6%8D%A2%E5%88%B0%E7%AC%AC%E4%BA%8C%E4%B8%AA%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnls%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%86%85%E5%AE%B9%EF%BC%8C%E5%90%8E%E9%9D%A2%E5%8F%AF%E6%8E%A5%E7%9B%AE%E5%BD%95%E5%90%8D%EF%BC%9Als%20%7Bdir%7D%20%E6%98%BE%E7%A4%BA%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%5Cnls%20-l%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E8%A1%A8%E6%96%B9%E5%BC%8F%E6%98%BE%E7%A4%BA%E7%9B%AE%E5%BD%95%E5%86%85%E5%AE%B9%EF%BC%8C%E5%8C%85%E6%8B%AC%E6%96%87%E4%BB%B6%E6%97%A5%E6%9C%9F%EF%BC%8C%E5%A4%A7%E5%B0%8F%EF%BC%8C%E6%9D%83%E9%99%90%E7%AD%89%E4%BF%A1%E6%81%AF%5Cnls%20-a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%EF%BC%8C%E5%8C%85%E6%8B%AC%E9%9A%90%E8%97%8F%E6%96%87%E4%BB%B6%EF%BC%88.%E5%BC%80%E5%A4%B4%E7%9A%84%E6%96%87%E4%BB%B6%2F%E7%9B%AE%E5%BD%95%E5%90%8D%EF%BC%89%5Cnln%20-s%20%7Bfn%7D%20%7Blink%7D%20%20%20%23%20%E7%BB%99%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%BD%AF%E9%93%BE%E6%8E%A5%5Cncp%20%7Bsrc%7D%20%7Bdest%7D%20%20%20%20%20%23%20%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%EF%BC%8Ccp%20-r%20dir1%20dir2%20%E5%8F%AF%E4%BB%A5%E9%80%92%E5%BD%92%E6%8B%B7%E8%B4%9D%EF%BC%88%E7%9B%AE%E5%BD%95%EF%BC%89%5Cnrm%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%EF%BC%8Crm%20-r%20%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4%E7%9B%AE%E5%BD%95%EF%BC%8Crm%20-f%20%E5%BC%BA%E5%88%B6%E5%88%A0%E9%99%A4%5Cnmv%20%7Bsrc%7D%20%7Bdest%7D%20%20%20%20%20%23%20%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6%EF%BC%8C%E5%A6%82%E6%9E%9C%20dest%20%E6%98%AF%E7%9B%AE%E5%BD%95%EF%BC%8C%E5%88%99%E7%A7%BB%E5%8A%A8%EF%BC%8C%E6%98%AF%E6%96%87%E4%BB%B6%E5%90%8D%E5%88%99%E8%A6%86%E7%9B%96%5Cntouch%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%9B%E5%BB%BA%E6%88%96%E8%80%85%E6%9B%B4%E6%96%B0%E4%B8%80%E4%B8%8B%E5%88%B6%E5%AE%9A%E6%96%87%E4%BB%B6%5Cncat%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%8E%9F%E5%A7%8B%E5%86%85%E5%AE%B9%5Cnany_cmd%20%3E%20%7Bfn%7D%20%20%20%20%20%20%23%20%E6%89%A7%E8%A1%8C%E4%BB%BB%E6%84%8F%E5%91%BD%E4%BB%A4%E5%B9%B6%E5%B0%86%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%5Cnmore%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%80%90%E5%B1%8F%E6%98%BE%E7%A4%BA%E6%9F%90%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%EF%BC%8C%E7%A9%BA%E6%A0%BC%E7%BF%BB%E9%A1%B5%EF%BC%8Cq%20%E9%80%80%E5%87%BA%5Cnless%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9B%B4%E9%AB%98%E7%BA%A7%E7%82%B9%E7%9A%84%20more%EF%BC%8C%E6%9B%B4%E5%A4%9A%E6%93%8D%E4%BD%9C%EF%BC%8Cq%20%E9%80%80%E5%87%BA%5Cnhead%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%E6%95%B0%E8%A1%8C%EF%BC%8C%E5%8F%AF%E7%94%A8%20head%20-3%20abc.txt%20%E6%98%BE%E7%A4%BA%E5%A4%B4%E4%B8%89%E8%A1%8C%5Cntail%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%B0%BE%E9%83%A8%E6%95%B0%E8%A1%8C%EF%BC%8C%E5%8F%AF%E7%94%A8%20tail%20-3%20abc.txt%20%E6%98%BE%E7%A4%BA%E5%B0%BE%E9%83%A8%E4%B8%89%E8%A1%8C%5Cntail%20-f%20%7Bfn%7D%20%20%20%20%20%20%20%20%23%20%E6%8C%81%E7%BB%AD%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%B0%BE%E9%83%A8%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%8F%AF%E7%94%A8%E4%BA%8E%E7%9B%91%E6%8E%A7%E6%97%A5%E5%BF%97%5Cnnano%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BD%BF%E7%94%A8%20nano%20%E7%BC%96%E8%BE%91%E5%99%A8%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6%5Cnvim%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BD%BF%E7%94%A8%20vim%20%E7%BC%96%E8%BE%91%E6%96%87%E4%BB%B6%5Cndiff%20%7Bf1%7D%20%7Bf2%7D%20%20%20%20%20%20%23%20%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E5%86%85%E5%AE%B9%5Cnwc%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E6%9C%89%E5%A4%9A%E5%B0%91%E8%A1%8C%EF%BC%8C%E5%A4%9A%E5%B0%91%E4%B8%AA%E5%8D%95%E8%AF%8D%5Cnchmod%20644%20%7Bfn%7D%20%20%20%20%20%20%23%20%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E4%B8%BA%20644%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%8E%A5%20-R%20%E5%AF%B9%E7%9B%AE%E5%BD%95%E5%BE%AA%E7%8E%AF%E6%94%B9%E6%9D%83%E9%99%90%5Cnchgrp%20group%20%7Bfn%7D%20%20%20%20%23%20%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%89%80%E5%B1%9E%E7%9A%84%E7%94%A8%E6%88%B7%E7%BB%84%5Cnchown%20user1%20%7Bfn%7D%20%20%20%20%23%20%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%89%80%E6%9C%89%E4%BA%BA%E4%B8%BA%20user1%2C%20chown%20user1%3Agroup1%20fn%20%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E7%BB%84%5Cnfile%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%A3%80%E6%B5%8B%E6%96%87%E4%BB%B6%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%92%8C%E7%BC%96%E7%A0%81%5Cnbasename%20%7Bfn%7D%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%90%8D%E5%AD%97%EF%BC%88%E4%B8%8D%E5%8C%85%E6%8B%AC%E8%B7%AF%E5%BE%84%EF%BC%89%5Cndirname%20%7Bfn%7D%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%88%E4%B8%8D%E5%8C%85%E6%8B%AC%E5%90%8D%E5%AD%97%EF%BC%89%5Cngrep%20%7Bpat%7D%20%7Bfn%7D%20%20%20%20%20%23%20%E5%9C%A8%E6%96%87%E4%BB%B6%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%87%BA%E7%8E%B0%E8%BF%87%20pat%20%E7%9A%84%E5%86%85%E5%AE%B9%5Cngrep%20-r%20%7Bpat%7D%20.%20%20%20%20%20%23%20%E5%9C%A8%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%E9%80%92%E5%BD%92%E6%9F%A5%E6%89%BE%E6%89%80%E6%9C%89%E5%87%BA%E7%8E%B0%E8%BF%87%20pat%20%E7%9A%84%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%5Cnstat%20%7Bfn%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E7%9A%84%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnwhoami%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%88%91%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%5Cnwho%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%B7%B2%E7%99%BB%E9%99%86%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%8Cw%20%2F%20who%20%2F%20users%20%E5%86%85%E5%AE%B9%E7%95%A5%E6%9C%89%E4%B8%8D%E5%90%8C%5Cnw%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%B7%B2%E7%99%BB%E9%99%86%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%8Cw%20%2F%20who%20%2F%20users%20%E5%86%85%E5%AE%B9%E7%95%A5%E6%9C%89%E4%B8%8D%E5%90%8C%5Cnusers%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%B7%B2%E7%99%BB%E9%99%86%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%8Cw%20%2F%20who%20%2F%20users%20%E5%86%85%E5%AE%B9%E7%95%A5%E6%9C%89%E4%B8%8D%E5%90%8C%5Cnpasswd%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BF%AE%E6%94%B9%E5%AF%86%E7%A0%81%EF%BC%8Cpasswd%20%7Buser%7D%20%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%BA%8E%20root%20%E4%BF%AE%E6%94%B9%E5%88%AB%E4%BA%BA%E5%AF%86%E7%A0%81%5Cnfinger%20%7Buser%7D%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%9F%90%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8C%85%E6%8B%AC%20id%2C%20%E5%90%8D%E5%AD%97%2C%20%E7%99%BB%E9%99%86%E7%8A%B6%E6%80%81%E7%AD%89%5Cnadduser%20%7Buser%7D%20%20%20%20%20%20%23%20%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%5Cndeluser%20%7Buser%7D%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E7%94%A8%E6%88%B7%5Cnw%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E8%B0%81%E5%9C%A8%E7%BA%BF%5Cnsu%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%87%E6%8D%A2%E5%88%B0%20root%20%E7%94%A8%E6%88%B7%5Cnsu%20-%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%87%E6%8D%A2%E5%88%B0%20root%20%E7%94%A8%E6%88%B7%E5%B9%B6%E7%99%BB%E9%99%86%EF%BC%88%E6%89%A7%E8%A1%8C%E7%99%BB%E9%99%86%E8%84%9A%E6%9C%AC%EF%BC%89%5Cnsu%20%7Buser%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%87%E6%8D%A2%E5%88%B0%E6%9F%90%E7%94%A8%E6%88%B7%5Cnsu%20-%7Buser%7D%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%87%E6%8D%A2%E5%88%B0%E6%9F%90%E7%94%A8%E6%88%B7%E5%B9%B6%E7%99%BB%E9%99%86%EF%BC%88%E6%89%A7%E8%A1%8C%E7%99%BB%E9%99%86%E8%84%9A%E6%9C%AC%EF%BC%89%5Cnid%20%7Buser%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E7%9A%84%20uid%EF%BC%8Cgid%20%E4%BB%A5%E5%8F%8A%E6%89%80%E5%B1%9E%E5%85%B6%E4%BB%96%E7%94%A8%E6%88%B7%E7%BB%84%5Cnid%20-u%20%7Buser%7D%20%20%20%20%20%20%20%20%23%20%E6%89%93%E5%8D%B0%E7%94%A8%E6%88%B7%20uid%5Cnid%20-g%20%7Buser%7D%20%20%20%20%20%20%20%20%23%20%E6%89%93%E5%8D%B0%E7%94%A8%E6%88%B7%20gid%5Cnwrite%20%7Buser%7D%20%20%20%20%20%20%20%20%23%20%E5%90%91%E6%9F%90%E7%94%A8%E6%88%B7%E5%8F%91%E9%80%81%E4%B8%80%E5%8F%A5%E6%B6%88%E6%81%AF%5Cnlast%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%9C%80%E8%BF%91%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86%E5%88%97%E8%A1%A8%5Cnlast%20%7Buser%7D%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E7%99%BB%E9%99%86%E8%AE%B0%E5%BD%95%5Cnlastb%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%A4%B1%E8%B4%A5%E7%99%BB%E9%99%86%E8%AE%B0%E5%BD%95%5Cnlastlog%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E7%94%A8%E6%88%B7%E7%9A%84%E6%9C%80%E8%BF%91%E7%99%BB%E9%99%86%E8%AE%B0%E5%BD%95%5Cnsudo%20%7Bcommand%7D%20%20%20%20%20%20%23%20%E4%BB%A5%20root%20%E6%9D%83%E9%99%90%E6%89%A7%E8%A1%8C%E6%9F%90%E5%91%BD%E4%BB%A4%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnps%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%E4%BC%9A%E8%AF%9D%E8%BF%9B%E7%A8%8B%5Cnps%20ax%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%EF%BC%8C%E7%B1%BB%E4%BC%BC%20ps%20-e%5Cnps%20aux%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%EF%BC%8C%E7%B1%BB%E4%BC%BC%20ps%20-ef%5Cnps%20auxww%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%B9%B6%E4%B8%94%E6%98%BE%E7%A4%BA%E8%BF%9B%E7%A8%8B%E7%9A%84%E5%AE%8C%E6%95%B4%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%5Cnps%20-u%20%7Buser%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%9F%90%E7%94%A8%E6%88%B7%E8%BF%9B%E7%A8%8B%5Cnps%20axjf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E8%BF%9B%E7%A8%8B%E6%A0%91%5Cnps%20xjf%20-u%20%7Buser%7D%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E6%9F%90%E7%94%A8%E6%88%B7%E7%9A%84%E8%BF%9B%E7%A8%8B%E6%A0%91%5Cnps%20-eo%20pid%2Cuser%2Ccommand%20%20%20%23%20%E6%8C%89%E7%94%A8%E6%88%B7%E6%8C%87%E5%AE%9A%E7%9A%84%E6%A0%BC%E5%BC%8F%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%5Cnps%20aux%20%7C%20grep%20httpd%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%90%8D%E4%B8%BA%20httpd%20%E7%9A%84%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%5Cnps%20--ppid%20%7Bpid%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E7%88%B6%E8%BF%9B%E7%A8%8B%E4%B8%BA%20pid%20%E7%9A%84%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%5Cnpstree%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%A0%91%E5%BD%A2%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%EF%BC%8Cpstree%20%E9%BB%98%E8%AE%A4%E4%B8%80%E8%88%AC%E4%B8%8D%E5%B8%A6%EF%BC%8C%E9%9C%80%E5%AE%89%E8%A3%85%5Cnpstree%20%7Buser%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%BF%9B%E7%A8%8B%E6%A0%91%E5%88%97%E5%87%BA%E6%9F%90%E7%94%A8%E6%88%B7%E7%9A%84%E8%BF%9B%E7%A8%8B%5Cnpstree%20-u%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%A0%91%E5%BD%A2%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%E4%BB%A5%E5%8F%8A%E6%89%80%E5%B1%9E%E7%94%A8%E6%88%B7%5Cnpgrep%20%7Bprocname%7D%20%20%20%20%20%20%20%20%20%20%23%20%E6%90%9C%E7%B4%A2%E5%90%8D%E5%AD%97%E5%8C%B9%E9%85%8D%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%9A%84%20pid%EF%BC%8C%E6%AF%94%E5%A6%82%20pgrep%20apache2%5Cn%5Cnkill%20%7Bpid%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B%5Cnkill%20-9%20%7Bpid%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%BC%BA%E5%88%B6%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B%EF%BC%8C9%2FSIGKILL%20%E6%98%AF%E5%BC%BA%E5%88%B6%E4%B8%8D%E5%8F%AF%E6%8D%95%E8%8E%B7%E7%BB%93%E6%9D%9F%E4%BF%A1%E5%8F%B7%5Cnkill%20-KILL%20%7Bpid%7D%20%20%20%20%20%20%20%20%20%20%23%20%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C%E8%BF%9B%E7%A8%8B%EF%BC%8Ckill%20-9%20%E7%9A%84%E5%8F%A6%E5%A4%96%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95%5Cnkill%20-l%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E4%BF%A1%E5%8F%B7%5Cnkill%20-l%20TERM%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%20TERM%20%E4%BF%A1%E5%8F%B7%E7%9A%84%E7%BC%96%E5%8F%B7%5Cnkillall%20%7Bprocname%7D%20%20%20%20%20%20%20%20%23%20%E6%8C%89%E5%90%8D%E7%A7%B0%E7%BB%93%E6%9D%9F%E6%89%80%E6%9C%89%E8%BF%9B%E7%A8%8B%5Cnpkill%20%7Bprocname%7D%20%20%20%20%20%20%20%20%20%20%23%20%E6%8C%89%E5%90%8D%E7%A7%B0%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B%EF%BC%8C%E9%99%A4%E5%90%8D%E7%A7%B0%E5%A4%96%E8%BF%98%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%5Cn%5Cntop%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%9C%80%E6%B4%BB%E8%B7%83%E7%9A%84%E8%BF%9B%E7%A8%8B%5Cntop%20-u%20%7Buser%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%9F%90%E7%94%A8%E6%88%B7%E6%9C%80%E6%B4%BB%E8%B7%83%E7%9A%84%E8%BF%9B%E7%A8%8B%5Cn%5Cnany_command%20%26%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%9C%A8%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E6%9F%90%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%94%A8%20CTRL%2BZ%20%E5%B0%86%E5%BD%93%E5%89%8D%E8%BF%9B%E7%A8%8B%E6%8C%82%E5%88%B0%E5%90%8E%E5%8F%B0%5Cnjobs%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%EF%BC%88jobs%EF%BC%89%5Cnbg%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%EF%BC%8C%E5%B9%B6%E5%88%87%E6%8D%A2%E8%BF%87%E5%8E%BB%5Cnfg%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%87%E6%8D%A2%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%E5%88%B0%E5%89%8D%E5%8F%B0%5Cnfg%20%7Bjob%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%87%E6%8D%A2%E7%89%B9%E5%AE%9A%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%E5%88%B0%E5%89%8D%E5%8F%B0%5Cn%5Cntrap%20cmd%20sig1%20sig2%20%20%20%20%20%20%20%20%23%20%E5%9C%A8%E8%84%9A%E6%9C%AC%E4%B8%AD%E8%AE%BE%E7%BD%AE%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E5%91%BD%E4%BB%A4%5Cntrap%20%5C%22%5C%22%20sig1%20sig2%20%20%20%20%20%20%20%20%20%23%20%E5%9C%A8%E8%84%9A%E6%9C%AC%E4%B8%AD%E5%B1%8F%E8%94%BD%E6%9F%90%E4%BF%A1%E5%8F%B7%5Cntrap%20-%20sig1%20sig2%20%20%20%20%20%20%20%20%20%20%23%20%E6%81%A2%E5%A4%8D%E9%BB%98%E8%AE%A4%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%E8%A1%8C%E4%B8%BA%5Cn%5Cnnohup%20%7Bcommand%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%95%BF%E6%9C%9F%E8%BF%90%E8%A1%8C%E6%9F%90%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%9C%A8%E4%BD%A0%E9%80%80%E5%87%BA%E7%99%BB%E9%99%86%E9%83%BD%E4%BF%9D%E6%8C%81%E5%AE%83%E8%BF%90%E8%A1%8C%5Cnnohup%20%7Bcommand%7D%20%26%20%20%20%20%20%20%20%20%20%23%20%E5%9C%A8%E5%90%8E%E5%8F%B0%E9%95%BF%E6%9C%9F%E8%BF%90%E8%A1%8C%E6%9F%90%E7%A8%8B%E5%BA%8F%5Cndisown%20%7BPID%7CJID%7D%20%20%20%20%20%20%20%20%20%20%23%20%E5%B0%86%E8%BF%9B%E7%A8%8B%E4%BB%8E%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8%EF%BC%88jobs%EF%BC%89%E7%A7%BB%E9%99%A4%5Cn%5Cnwait%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%AD%89%E5%BE%85%E6%89%80%E6%9C%89%E5%90%8E%E5%8F%B0%E8%BF%9B%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%93%E6%9D%9F%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%EF%BC%9ASSH%20%2F%20%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF%20%2F%20%E7%BD%91%E7%BB%9C%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnssh%20user%40host%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BB%A5%E7%94%A8%E6%88%B7%20user%20%E7%99%BB%E9%99%86%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%20host%5Cnssh%20-p%20%7Bport%7D%20user%40host%20%20%20%23%20%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E7%99%BB%E9%99%86%E4%B8%BB%E6%9C%BA%5Cnssh-copy-id%20user%40host%20%20%20%20%20%23%20%E6%8B%B7%E8%B4%9D%E4%BD%A0%E7%9A%84%20ssh%20key%20%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%EF%BC%8C%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%5Cnscp%20%7Bfn%7D%20user%40host%3Apath%20%20%20%23%20%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%5Cnscp%20user%40host%3Apath%20dest%20%20%20%23%20%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%E5%9B%9E%E6%9D%A5%5Cnscp%20-P%20%7Bport%7D%20...%20%20%20%20%20%20%20%20%20%23%20%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%E6%96%87%E4%BB%B6%5Cn%5Cnuname%20-a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E7%AD%89%E4%BF%A1%E6%81%AF%5Cnman%20%7Bhelp%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%B8%AE%E5%8A%A9%5Cnman%20-k%20%7Bkeyword%7D%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9B%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3%E9%87%8C%E5%8C%85%E5%90%AB%E4%BA%86%E8%AF%A5%E5%85%B3%E9%94%AE%E5%AD%97%5Cninfo%20%7Bhelp%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%20info%20pages%EF%BC%8C%E6%AF%94%20man%20%E6%9B%B4%E5%BC%BA%E7%9A%84%E5%B8%AE%E5%8A%A9%E7%B3%BB%E7%BB%9F%5Cnuptime%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4%5Cndate%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%97%A5%E6%9C%9F%5Cncal%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%97%A5%E5%8E%86%5Cnvmstat%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%86%85%E5%AD%98%E5%92%8C%20CPU%20%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%5Cnvmstat%2010%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%AF%8F%2010%20%E7%A7%92%E6%89%93%E5%8D%B0%E4%B8%80%E8%A1%8C%E5%86%85%E5%AD%98%E5%92%8C%20CPU%E6%83%85%E5%86%B5%EF%BC%8CCTRL%2BC%20%E9%80%80%E5%87%BA%5Cnfree%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%86%85%E5%AD%98%E5%92%8C%E4%BA%A4%E6%8D%A2%E5%8C%BA%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%5Cndf%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E7%A3%81%E7%9B%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5%5Cndu%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E7%9B%AE%E5%BD%95%E5%8D%A0%E7%94%A8%EF%BC%8Cdu%20.%20--max-depth%3D2%20%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9A%E6%B7%B1%E5%BA%A6%5Cnuname%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E5%8F%B7%5Cnhostname%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%A7%B0%5Cnshowkey%20-a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E7%BB%88%E7%AB%AF%E5%8F%91%E9%80%81%E7%9A%84%E6%8C%89%E9%94%AE%E7%BC%96%E7%A0%81%5Cn%5Cnping%20%7Bhost%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20ping%20%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%E5%B9%B6%E6%98%BE%E7%A4%BA%E7%BB%93%E6%9E%9C%EF%BC%8CCTRL%2BC%20%E9%80%80%E5%87%BA%5Cnping%20-c%20N%20%7Bhost%7D%20%20%20%20%20%20%20%20%20%20%23%20ping%20%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA%20N%20%E6%AC%A1%5Cntraceroute%20%7Bhost%7D%20%20%20%20%20%20%20%20%20%23%20%E4%BE%A6%E6%B5%8B%E8%B7%AF%E7%94%B1%E8%BF%9E%E9%80%9A%E6%83%85%E5%86%B5%5Cnmtr%20%7Bhost%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%AB%98%E7%BA%A7%E7%89%88%E6%9C%AC%20traceroute%5Cnhost%20%7Bdomain%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20DNS%20%E6%9F%A5%E8%AF%A2%EF%BC%8C%7Bdomain%7D%20%E5%89%8D%E9%9D%A2%E5%8F%AF%E5%8A%A0%20-a%20%E6%9F%A5%E7%9C%8B%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%5Cnwhois%20%7Bdomain%7D%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%E5%9F%9F%E5%90%8D%20whois%20%E4%BF%A1%E6%81%AF%5Cndig%20%7Bdomain%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%E5%9F%9F%E5%90%8D%20dns%20%E4%BF%A1%E6%81%AF%5Cnroute%20-n%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E8%A1%A8%5Cnnetstat%20-a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E7%AB%AF%E5%8F%A3%5Cnnetstat%20-an%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF%EF%BC%8C%E4%B8%8D%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D%5Cnnetstat%20-anp%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E8%BF%9E%E6%8E%A5%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%8C%85%E5%90%AB%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF%EF%BC%88%E9%9C%80%E8%A6%81%20sudo%EF%BC%89%5Cnnetstat%20-l%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%9B%91%E5%90%AC%E7%9A%84%E7%AB%AF%E5%8F%A3%5Cnnetstat%20-t%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%20TCP%20%E9%93%BE%E6%8E%A5%5Cnnetstat%20-lntu%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E6%AD%A3%E5%9C%A8%E7%9B%91%E5%90%AC%E7%9A%84%20TCP%20%E5%92%8C%20UDP%20%E4%BF%A1%E6%81%AF%5Cnnetstat%20-lntup%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E6%AD%A3%E5%9C%A8%E7%9B%91%E5%90%AC%E7%9A%84%20socket%20%E5%8F%8A%E8%BF%9B%E7%A8%8B%E4%BF%A1%E6%81%AF%5Cnnetstat%20-i%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E7%BD%91%E5%8D%A1%E4%BF%A1%E6%81%AF%5Cnnetstat%20-rn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E7%B3%BB%E7%BB%9F%E8%B7%AF%E7%94%B1%E8%A1%A8%EF%BC%8C%E5%90%8C%20route%20-n%5Cnss%20-an%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%AF%94%20netstat%20-an%20%E6%9B%B4%E5%BF%AB%E9%80%9F%E6%9B%B4%E8%AF%A6%E7%BB%86%5Cnss%20-s%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%9F%E8%AE%A1%20TCP%20%E7%9A%84%20established%2C%20wait%20%E7%AD%89%5Cn%5Cnwget%20%7Burl%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8F%AF%E5%8A%A0%20--no-check-certificate%20%E5%BF%BD%E7%95%A5%20ssl%20%E9%AA%8C%E8%AF%81%5Cnwget%20-qO-%20%7Burl%7D%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%B9%B6%E8%BE%93%E5%87%BA%E5%88%B0%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%EF%BC%88%E4%B8%8D%E4%BF%9D%E5%AD%98%EF%BC%89%5Cncurl%20-sL%20%7Burl%7D%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%90%8C%20wget%20-qO-%20%7Burl%7D%20%E6%B2%A1%E6%9C%89%20wget%20%E7%9A%84%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8%5Cn%5Cnsz%20%7Bfile%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E5%88%B0%E7%BB%88%E7%AB%AF%EF%BC%8Czmodem%20%E5%8D%8F%E8%AE%AE%5Cnrz%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%8E%A5%E6%94%B6%E7%BB%88%E7%AB%AF%E5%8F%91%E9%80%81%E8%BF%87%E6%9D%A5%E7%9A%84%E6%96%87%E4%BB%B6%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E5%8F%98%E9%87%8F%E6%93%8D%E4%BD%9C%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnvarname%3Dvalue%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%5Cnvarname%3Dvalue%20command%20%20%20%20%20%23%20%E5%AE%9A%E4%B9%89%E5%AD%90%E8%BF%9B%E7%A8%8B%E5%8F%98%E9%87%8F%E5%B9%B6%E6%89%A7%E8%A1%8C%E5%AD%90%E8%BF%9B%E7%A8%8B%5Cnecho%20%24varname%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%8F%98%E9%87%8F%E5%86%85%E5%AE%B9%5Cnecho%20%24%24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8D%20shell%20%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%8F%B7%5Cnecho%20%24!%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%9C%80%E8%BF%91%E8%B0%83%E7%94%A8%E7%9A%84%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E8%BF%9B%E7%A8%8B%E5%8F%B7%5Cnecho%20%24%3F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%9C%80%E8%BF%91%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E7%9A%84%E8%BF%94%E5%9B%9E%E7%A0%81%5Cnexport%20VARNAME%3Dvalue%20%20%20%20%20%20%23%20%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%88%E5%B0%86%E4%BC%9A%E5%BD%B1%E5%93%8D%E5%88%B0%E5%AD%90%E8%BF%9B%E7%A8%8B%EF%BC%89%5Cn%5Cnarray%5B0%5D%3DvalA%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%AE%9A%E4%B9%89%E6%95%B0%E7%BB%84%5Cnarray%5B1%5D%3DvalB%5Cnarray%5B2%5D%3DvalC%5Cnarray%3D(%5B0%5D%3DvalA%20%5B1%5D%3DvalB%20%5B2%5D%3DvalC)%20%20%20%23%20%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%5Cnarray%3D(valA%20valB%20valC)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%5Cn%5Cn%24%7Barray%5Bi%5D%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%5Cn%24%7B%23array%5B%40%5D%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%E6%95%B0%E7%BB%84%E7%9A%84%E9%95%BF%E5%BA%A6%5Cn%24%7B%23array%5Bi%5D%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E9%95%BF%E5%BA%A6%5Cn%5Cndeclare%20-a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E6%95%B0%E7%BB%84%5Cndeclare%20-f%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%87%BD%E6%95%B0%5Cndeclare%20-F%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%87%BD%E6%95%B0%EF%BC%8C%E4%BB%85%E6%98%BE%E7%A4%BA%E5%87%BD%E6%95%B0%E5%90%8D%5Cndeclare%20-i%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E6%95%B4%E6%95%B0%5Cndeclare%20-r%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E5%8F%AA%E8%AF%BB%E5%8F%98%E9%87%8F%5Cndeclare%20-x%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E8%A2%AB%E5%AF%BC%E5%87%BA%E6%88%90%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E4%B8%9C%E8%A5%BF%5Cndeclare%20-p%20varname%20%20%20%20%20%20%20%20%23%20%E8%BE%93%E5%87%BA%E5%8F%98%E9%87%8F%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9A%E4%B9%89%E7%9A%84%EF%BC%88%E7%B1%BB%E5%9E%8B%2B%E5%80%BC%EF%BC%89%5Cn%5Cn%24%7Bvarname%3A-word%7D%20%20%20%20%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%E5%8F%98%E9%87%8F%E4%B8%8D%E4%B8%BA%E7%A9%BA%E5%88%99%E8%BF%94%E5%9B%9E%E5%8F%98%E9%87%8F%EF%BC%8C%E5%90%A6%E5%88%99%E8%BF%94%E5%9B%9E%20word%5Cn%24%7Bvarname%3A%3Dword%7D%20%20%20%20%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%E5%8F%98%E9%87%8F%E4%B8%8D%E4%B8%BA%E7%A9%BA%E5%88%99%E8%BF%94%E5%9B%9E%E5%8F%98%E9%87%8F%EF%BC%8C%E5%90%A6%E5%88%99%E8%B5%8B%E5%80%BC%E6%88%90%20word%20%E5%B9%B6%E8%BF%94%E5%9B%9E%5Cn%24%7Bvarname%3A%3Fmessage%7D%20%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%E5%8F%98%E9%87%8F%E4%B8%8D%E4%B8%BA%E7%A9%BA%E5%88%99%E8%BF%94%E5%9B%9E%E5%8F%98%E9%87%8F%EF%BC%8C%E5%90%A6%E5%88%99%E6%89%93%E5%8D%B0%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF%E5%B9%B6%E9%80%80%E5%87%BA%5Cn%24%7Bvarname%3A%2Bword%7D%20%20%20%20%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%E5%8F%98%E9%87%8F%E4%B8%8D%E4%B8%BA%E7%A9%BA%E5%88%99%E8%BF%94%E5%9B%9E%20word%EF%BC%8C%E5%90%A6%E5%88%99%E8%BF%94%E5%9B%9E%20null%5Cn%24%7Bvarname%3Aoffset%3Alen%7D%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cn%5Cn%24%7Bvariable%23pattern%7D%20%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%E5%8F%98%E9%87%8F%E5%A4%B4%E9%83%A8%E5%8C%B9%E9%85%8D%20pattern%EF%BC%8C%E5%88%99%E5%88%A0%E9%99%A4%E6%9C%80%E5%B0%8F%E5%8C%B9%E9%85%8D%E9%83%A8%E5%88%86%E8%BF%94%E5%9B%9E%E5%89%A9%E4%B8%8B%E7%9A%84%5Cn%24%7Bvariable%23%23pattern%7D%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%E5%8F%98%E9%87%8F%E5%A4%B4%E9%83%A8%E5%8C%B9%E9%85%8D%20pattern%EF%BC%8C%E5%88%99%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E9%83%A8%E5%88%86%E8%BF%94%E5%9B%9E%E5%89%A9%E4%B8%8B%E7%9A%84%5Cn%24%7Bvariable%25pattern%7D%20%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%E5%8F%98%E9%87%8F%E5%B0%BE%E9%83%A8%E5%8C%B9%E9%85%8D%20pattern%EF%BC%8C%E5%88%99%E5%88%A0%E9%99%A4%E6%9C%80%E5%B0%8F%E5%8C%B9%E9%85%8D%E9%83%A8%E5%88%86%E8%BF%94%E5%9B%9E%E5%89%A9%E4%B8%8B%E7%9A%84%5Cn%24%7Bvariable%25%25pattern%7D%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%E5%8F%98%E9%87%8F%E5%B0%BE%E9%83%A8%E5%8C%B9%E9%85%8D%20pattern%EF%BC%8C%E5%88%99%E5%88%A0%E9%99%A4%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D%E9%83%A8%E5%88%86%E8%BF%94%E5%9B%9E%E5%89%A9%E4%B8%8B%E7%9A%84%5Cn%24%7Bvariable%2Fpattern%2Fstr%7D%20%20%20%23%20%E5%B0%86%E5%8F%98%E9%87%8F%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8C%B9%E9%85%8D%20pattern%20%E7%9A%84%E6%9B%BF%E6%8D%A2%E6%88%90%20str%EF%BC%8C%E5%B9%B6%E8%BF%94%E5%9B%9E%5Cn%24%7Bvariable%2F%2Fpattern%2Fstr%7D%20%20%23%20%E5%B0%86%E5%8F%98%E9%87%8F%E4%B8%AD%E6%89%80%E6%9C%89%E5%8C%B9%E9%85%8D%20pattern%20%E7%9A%84%E5%9C%B0%E6%96%B9%E6%9B%BF%E6%8D%A2%E6%88%90%20str%20%E5%B9%B6%E8%BF%94%E5%9B%9E%5Cn%5Cn%24%7B%23varname%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6%5Cn%5Cn*(patternlist)%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%9B%B6%E6%AC%A1%E6%88%96%E8%80%85%E5%A4%9A%E6%AC%A1%E5%8C%B9%E9%85%8D%5Cn%2B(patternlist)%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%B8%80%E6%AC%A1%E6%88%96%E8%80%85%E5%A4%9A%E6%AC%A1%E5%8C%B9%E9%85%8D%5Cn%3F(patternlist)%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%9B%B6%E6%AC%A1%E6%88%96%E8%80%85%E4%B8%80%E6%AC%A1%E5%8C%B9%E9%85%8D%5Cn%40(patternlist)%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8D%95%E8%AF%8D%E5%8C%B9%E9%85%8D%5Cn!(patternlist)%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%B8%8D%E5%8C%B9%E9%85%8D%5Cn%5Cnarray%3D(%24text)%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%8C%89%E7%A9%BA%E6%A0%BC%E5%88%86%E9%9A%94%20text%20%E6%88%90%E6%95%B0%E7%BB%84%EF%BC%8C%E5%B9%B6%E8%B5%8B%E5%80%BC%E7%BB%99%E5%8F%98%E9%87%8F%5CnIFS%3D%5C%22%2F%5C%22%20array%3D(%24text)%20%20%20%20%20%23%20%E6%8C%89%E6%96%9C%E6%9D%86%E5%88%86%E9%9A%94%E5%AD%97%E7%AC%A6%E4%B8%B2%20text%20%E6%88%90%E6%95%B0%E7%BB%84%EF%BC%8C%E5%B9%B6%E8%B5%8B%E5%80%BC%E7%BB%99%E5%8F%98%E9%87%8F%5Cntext%3D%5C%22%24%7Barray%5B*%5D%7D%5C%22%20%20%20%20%20%20%20%20%23%20%E7%94%A8%E7%A9%BA%E6%A0%BC%E9%93%BE%E6%8E%A5%E6%95%B0%E7%BB%84%E5%B9%B6%E8%B5%8B%E5%80%BC%E7%BB%99%E5%8F%98%E9%87%8F%5Cntext%3D%24(IFS%3D%2F%3B%20echo%20%5C%22%24%7Barray%5B*%5D%7D%5C%22)%20%20%23%20%E7%94%A8%E6%96%9C%E6%9D%A0%E9%93%BE%E6%8E%A5%E6%95%B0%E7%BB%84%E5%B9%B6%E8%B5%8B%E5%80%BC%E7%BB%99%E5%8F%98%E9%87%8F%5Cn%5Cn%24(UNIX%20command)%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4%EF%BC%8C%E5%B9%B6%E5%B0%86%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E5%86%85%E5%AE%B9%E6%8D%95%E8%8E%B7%E5%B9%B6%E8%BF%94%E5%9B%9E%5Cnvarname%3D%24(id%20-u%20user)%20%20%20%20%20%23%20%E5%B0%86%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%BA%20user%20%E7%9A%84%20uid%20%E8%B5%8B%E5%80%BC%E7%BB%99%20varname%20%E5%8F%98%E9%87%8F%5Cn%5Cnnum%3D%24(expr%201%20%2B%202)%20%20%20%20%20%20%20%20%20%23%20%E5%85%BC%E5%AE%B9%20posix%20sh%20%E7%9A%84%E8%AE%A1%E7%AE%97%EF%BC%8C%E4%BD%BF%E7%94%A8%20expr%20%E5%91%BD%E4%BB%A4%E8%AE%A1%E7%AE%97%E7%BB%93%E6%9E%9C%5Cnnum%3D%24(expr%20%24num%20%2B%201)%20%20%20%20%20%20%23%20%E6%95%B0%E5%AD%97%E8%87%AA%E5%A2%9E%5Cnexpr%202%20%5C%5C*%20%5C%5C(%202%20%2B%203%20%5C%5C)%20%20%20%20%20%23%20%E5%85%BC%E5%AE%B9%20posix%20sh%20%E7%9A%84%E5%A4%8D%E6%9D%82%E8%AE%A1%E7%AE%97%EF%BC%8C%E8%BE%93%E5%87%BA%2010%5Cn%5Cnnum%3D%24((1%20%2B%202))%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%AE%A1%E7%AE%97%201%2B2%20%E8%B5%8B%E5%80%BC%E7%BB%99%20num%EF%BC%8C%E4%BD%BF%E7%94%A8%20bash%20%E7%8B%AC%E6%9C%89%E7%9A%84%20%24((..))%20%E8%AE%A1%E7%AE%97%5Cnnum%3D%24((%24num%20%2B%201))%20%20%20%20%20%20%20%20%20%23%20%E5%8F%98%E9%87%8F%E9%80%92%E5%A2%9E%5Cnnum%3D%24((num%20%2B%201))%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%98%E9%87%8F%E9%80%92%E5%A2%9E%EF%BC%8C%E5%8F%8C%E6%8B%AC%E5%8F%B7%E5%86%85%E7%9A%84%20%24%20%E5%8F%AF%E4%BB%A5%E7%9C%81%E7%95%A5%5Cnnum%3D%24((1%20%2B%20(2%20%2B%203)%20*%202))%20%20%23%20%E5%A4%8D%E6%9D%82%E8%AE%A1%E7%AE%97%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E4%BA%8B%E4%BB%B6%E6%8C%87%E7%A4%BA%E7%AC%A6%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cn!!%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%B8%8A%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%5Cn!%5E%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%B8%8A%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%5Cn!%24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%B8%8A%E4%B8%80%E6%9D%A1%E5%91%BD%E4%BB%A4%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%5Cn!string%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9C%80%E8%BF%91%E4%B8%80%E6%9D%A1%E5%8C%85%E5%90%ABstring%E7%9A%84%E5%91%BD%E4%BB%A4%5Cn!%5Estring1%5Estring2%20%20%20%23%20%E6%9C%80%E8%BF%91%E4%B8%80%E6%9D%A1%E5%8C%85%E5%90%ABstring1%E7%9A%84%E5%91%BD%E4%BB%A4%2C%20%E5%BF%AB%E9%80%9F%E6%9B%BF%E6%8D%A2%E4%B8%BAstring2%2C%20%E7%9B%B8%E5%BD%93%E4%BA%8E!!%3As%2Fstring1%2Fstring2%2F%5Cn!%23%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9C%AC%E6%9D%A1%E5%91%BD%E4%BB%A4%E4%B9%8B%E5%89%8D%E6%89%80%E6%9C%89%E7%9A%84%E8%BE%93%E5%85%A5%E5%86%85%E5%AE%B9%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E5%87%BD%E6%95%B0%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cn%23%20%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%96%B0%E5%87%BD%E6%95%B0%5Cnfunction%20myfunc()%20%7B%5Cn%20%20%20%20%23%20%241%20%E4%BB%A3%E8%A1%A8%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%8C%24N%20%E4%BB%A3%E8%A1%A8%E7%AC%AC%20N%20%E4%B8%AA%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%23%20%24%23%20%E4%BB%A3%E8%A1%A8%E5%8F%82%E6%95%B0%E4%B8%AA%E6%95%B0%5Cn%20%20%20%20%23%20%240%20%E4%BB%A3%E8%A1%A8%E8%A2%AB%E8%B0%83%E7%94%A8%E8%80%85%E8%87%AA%E8%BA%AB%E7%9A%84%E5%90%8D%E5%AD%97%5Cn%20%20%20%20%23%20%24%40%20%E4%BB%A3%E8%A1%A8%E6%89%80%E6%9C%89%E5%8F%82%E6%95%B0%EF%BC%8C%E7%B1%BB%E5%9E%8B%E6%98%AF%E4%B8%AA%E6%95%B0%E7%BB%84%EF%BC%8C%E6%83%B3%E4%BC%A0%E9%80%92%E6%89%80%E6%9C%89%E5%8F%82%E6%95%B0%E7%BB%99%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4%E7%94%A8%20cmd%20%5C%22%24%40%5C%22%20%5Cn%20%20%20%20%23%20%24*%20%E7%A9%BA%E6%A0%BC%E9%93%BE%E6%8E%A5%E8%B5%B7%E6%9D%A5%E7%9A%84%E6%89%80%E6%9C%89%E5%8F%82%E6%95%B0%EF%BC%8C%E7%B1%BB%E5%9E%8B%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cn%20%20%20%20%7Bshell%20commands%20...%7D%5Cn%7D%5Cn%5Cnmyfunc%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%20myfunc%20%5Cnmyfunc%20arg1%20arg2%20arg3%20%20%20%20%20%23%20%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%5Cnmyfunc%20%5C%22%24%40%5C%22%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%B0%86%E6%89%80%E6%9C%89%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92%E7%BB%99%E5%87%BD%E6%95%B0%5Cnshift%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%82%E6%95%B0%E5%B7%A6%E7%A7%BB%5Cn%5Cnunset%20-f%20myfunc%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E5%87%BD%E6%95%B0%5Cndeclare%20-f%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%EF%BC%88%E5%85%BC%E5%AE%B9%20posix%20sh%20%E7%9A%84%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%EF%BC%89%EF%BC%9Aman%20test%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnstatement1%20%26%26%20statement2%20%20%23%20and%20%E6%93%8D%E4%BD%9C%E7%AC%A6%5Cnstatement1%20%7C%7C%20statement2%20%20%23%20or%20%E6%93%8D%E4%BD%9C%E7%AC%A6%5Cn%5Cnexp1%20-a%20exp2%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20exp1%20%E5%92%8C%20exp2%20%E5%90%8C%E6%97%B6%E4%B8%BA%E7%9C%9F%E6%97%B6%E8%BF%94%E5%9B%9E%E7%9C%9F%EF%BC%88POSIX%20XSI%E6%89%A9%E5%B1%95%EF%BC%89%5Cnexp1%20-o%20exp2%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20exp1%20%E5%92%8C%20exp2%20%E6%9C%89%E4%B8%80%E4%B8%AA%E4%B8%BA%E7%9C%9F%E5%B0%B1%E8%BF%94%E5%9B%9E%E7%9C%9F%EF%BC%88POSIX%20XSI%E6%89%A9%E5%B1%95%EF%BC%89%5Cn(%20expression%20)%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%20expression%20%E4%B8%BA%E7%9C%9F%E6%97%B6%E8%BF%94%E5%9B%9E%E7%9C%9F%EF%BC%8C%E8%BE%93%E5%85%A5%E6%B3%A8%E6%84%8F%E6%8B%AC%E5%8F%B7%E5%89%8D%E5%8F%8D%E6%96%9C%E6%9D%86%5Cn!%20expression%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%A6%82%E6%9E%9C%20expression%20%E4%B8%BA%E5%81%87%E9%82%A3%E8%BF%94%E5%9B%9E%E7%9C%9F%5Cn%5Cnstr1%20%3D%20str2%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89%EF%BC%8C%E5%A6%82%20%5B%20%5C%22%24x%5C%22%20%3D%20%5C%22%24y%5C%22%20%5D%20%26%26%20echo%20yes%5Cnstr1%20!%3D%20str2%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8D%E7%AD%89%EF%BC%8C%E5%A6%82%20%5B%20%5C%22%24x%5C%22%20!%3D%20%5C%22%24y%5C%22%20%5D%20%26%26%20echo%20yes%5Cnstr1%20%3C%20str2%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B0%8F%E4%BA%8E%EF%BC%8C%E5%A6%82%20%5B%20%5C%22%24x%5C%22%20%5C%5C%3C%20%5C%22%24y%5C%22%20%5D%20%26%26%20echo%20yes%5Cnstr2%20%3E%20str2%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%A7%E4%BA%8E%EF%BC%8C%E6%B3%A8%E6%84%8F%20%3C%20%E6%88%96%20%3E%20%E6%98%AF%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%8C%E8%BE%93%E5%85%A5%E6%97%B6%E8%A6%81%E5%8A%A0%E5%8F%8D%E6%96%9C%E6%9D%86%5Cn-n%20str1%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8D%E4%B8%BA%E7%A9%BA%EF%BC%88%E9%95%BF%E5%BA%A6%E5%A4%A7%E4%BA%8E%E9%9B%B6%EF%BC%89%5Cn-z%20str1%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%BA%E7%A9%BA%EF%BC%88%E9%95%BF%E5%BA%A6%E7%AD%89%E4%BA%8E%E9%9B%B6%EF%BC%89%5Cn%5Cn-a%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%A6%82%20%5B%20-a%20%2Ftmp%2Fabc%20%5D%20%26%26%20echo%20%5C%22exists%5C%22%5Cn-d%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%EF%BC%8C%E4%B8%94%E8%AF%A5%E6%96%87%E4%BB%B6%E6%98%AF%E4%B8%80%E4%B8%AA%E7%9B%AE%E5%BD%95%5Cn-e%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%92%8C%20-a%20%E7%AD%89%E4%BB%B7%5Cn-f%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%EF%BC%8C%E4%B8%94%E8%AF%A5%E6%96%87%E4%BB%B6%E6%98%AF%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E6%96%87%E4%BB%B6%EF%BC%88%E9%9D%9E%E7%9B%AE%E5%BD%95%E7%AD%89%EF%BC%89%5Cn-r%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%EF%BC%8C%E4%B8%94%E5%8F%AF%E8%AF%BB%5Cn-s%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%EF%BC%8C%E4%B8%94%E5%B0%BA%E5%AF%B8%E5%A4%A7%E4%BA%8E0%5Cn-w%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%EF%BC%8C%E4%B8%94%E5%8F%AF%E5%86%99%5Cn-x%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%EF%BC%8C%E4%B8%94%E6%89%A7%E8%A1%8C%5Cn-N%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%96%87%E4%BB%B6%E4%B8%8A%E6%AC%A1%E4%BF%AE%E6%94%B9%E8%BF%87%E5%90%8E%E8%BF%98%E6%B2%A1%E6%9C%89%E8%AF%BB%E5%8F%96%E8%BF%87%5Cn-O%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%B8%94%E5%B1%9E%E4%BA%8E%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%5Cn-G%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%B8%94%E5%8C%B9%E9%85%8D%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7%E7%BB%84%5Cnfile1%20-nt%20file2%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%96%87%E4%BB%B61%20%E6%AF%94%20%E6%96%87%E4%BB%B62%20%E6%96%B0%5Cnfile1%20-ot%20file2%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%96%87%E4%BB%B61%20%E6%AF%94%20%E6%96%87%E4%BB%B62%20%E6%97%A7%5Cn%5Cnnum1%20-eq%20num2%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%95%B0%E5%AD%97%E5%88%A4%E6%96%AD%EF%BC%9Anum1%20%3D%3D%20num2%5Cnnum1%20-ne%20num2%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%95%B0%E5%AD%97%E5%88%A4%E6%96%AD%EF%BC%9Anum1%20!%3D%20num2%5Cnnum1%20-lt%20num2%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%95%B0%E5%AD%97%E5%88%A4%E6%96%AD%EF%BC%9Anum1%20%3C%20num2%5Cnnum1%20-le%20num2%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%95%B0%E5%AD%97%E5%88%A4%E6%96%AD%EF%BC%9Anum1%20%3C%3D%20num2%5Cnnum1%20-gt%20num2%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%95%B0%E5%AD%97%E5%88%A4%E6%96%AD%EF%BC%9Anum1%20%3E%20num2%5Cnnum1%20-ge%20num2%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%95%B0%E5%AD%97%E5%88%A4%E6%96%AD%EF%BC%9Anum1%20%3E%3D%20num2%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E5%88%86%E6%94%AF%E6%8E%A7%E5%88%B6%EF%BC%9Aif%20%E5%92%8C%E7%BB%8F%E5%85%B8%20test%EF%BC%8C%E5%85%BC%E5%AE%B9%20posix%20sh%20%E7%9A%84%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cntest%20%7Bexpression%7D%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E4%B8%BA%E7%9C%9F%E7%9A%84%E8%AF%9D%20test%20%E7%A8%8B%E5%BA%8F%E8%BF%94%E5%9B%9E0%20%E5%90%A6%E5%88%99%E9%9D%9E%E9%9B%B6%5Cn%5B%20expression%20%5D%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E4%B8%BA%E7%9C%9F%E7%9A%84%E8%AF%9D%E8%BF%94%E5%9B%9E0%20%E5%90%A6%E5%88%99%E9%9D%9E%E9%9B%B6%5Cn%5Cntest%20%5C%22abc%5C%22%20%3D%20%5C%22def%5C%22%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E8%BF%94%E5%9B%9E%E5%80%BC%20echo%20%24%3F%20%E6%98%BE%E7%A4%BA%201%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%9D%A1%E4%BB%B6%E4%B8%BA%E5%81%87%5Cntest%20%5C%22abc%5C%22%20!%3D%20%5C%22def%5C%22%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E8%BF%94%E5%9B%9E%E5%80%BC%20echo%20%24%3F%20%E6%98%BE%E7%A4%BA%200%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%9D%A1%E4%BB%B6%E4%B8%BA%E7%9C%9F%5Cn%5Cntest%20-a%20%2Ftmp%3B%20echo%20%24%3F%20%20%20%20%20%23%20%E8%B0%83%E7%94%A8%20test%20%E5%88%A4%E6%96%AD%20%2Ftmp%20%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%B9%B6%E6%89%93%E5%8D%B0%20test%20%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%5B%20-a%20%2Ftmp%20%5D%3B%20echo%20%24%3F%20%20%20%20%20%20%23%20%E5%92%8C%E4%B8%8A%E9%9D%A2%E5%AE%8C%E5%85%A8%E7%AD%89%E4%BB%B7%EF%BC%8C%2Ftmp%20%E8%82%AF%E5%AE%9A%E6%98%AF%E5%AD%98%E5%9C%A8%E7%9A%84%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BE%93%E5%87%BA%E6%98%AF%200%5Cn%5Cntest%20cond%20%26%26%20cmd1%20%20%20%20%20%20%20%20%20%23%20%E5%88%A4%E6%96%AD%E6%9D%A1%E4%BB%B6%E4%B8%BA%E7%9C%9F%E6%97%B6%E6%89%A7%E8%A1%8C%20cmd1%5Cn%5B%20cond%20%5D%20%26%26%20cmd1%20%20%20%20%20%20%20%20%20%20%23%20%E5%92%8C%E4%B8%8A%E9%9D%A2%E5%AE%8C%E5%85%A8%E7%AD%89%E4%BB%B7%5Cn%5B%20cond%20%5D%20%26%26%20cmd1%20%7C%7C%20cmd2%20%20%23%20%E6%9D%A1%E4%BB%B6%E4%B8%BA%E7%9C%9F%E6%89%A7%E8%A1%8C%20cmd1%20%E5%90%A6%E5%88%99%E6%89%A7%E8%A1%8C%20cmd2%5Cn%5Cn%23%20%E5%88%A4%E6%96%AD%20%2Fetc%2Fpasswd%20%E6%96%87%E4%BB%B6%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%5Cn%23%20%E7%BB%8F%E5%85%B8%E7%9A%84%20if%20%E8%AF%AD%E5%8F%A5%E5%B0%B1%E6%98%AF%E5%88%A4%E6%96%AD%E5%90%8E%E9%9D%A2%E7%9A%84%E5%91%BD%E4%BB%A4%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BA0%E7%9A%84%E8%AF%9D%EF%BC%8C%E8%AE%A4%E4%B8%BA%E6%9D%A1%E4%BB%B6%E4%B8%BA%E7%9C%9F%EF%BC%8C%E5%90%A6%E5%88%99%E4%B8%BA%E5%81%87%5Cnif%20test%20-e%20%2Fetc%2Fpasswd%3B%20then%5Cn%20%20%20%20echo%20%5C%22alright%20it%20exists%20...%20%5C%22%5Cnelse%5Cn%20%20%20%20echo%20%5C%22it%20doesn't%20exist%20...%20%5C%22%5Cnfi%5Cn%5Cn%23%20%E5%92%8C%E4%B8%8A%E9%9D%A2%E5%AE%8C%E5%85%A8%E7%AD%89%E4%BB%B7%EF%BC%8C%5B%20%E6%98%AF%E4%B8%AA%E5%92%8C%20test%20%E4%B8%80%E6%A0%B7%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%EF%BC%8C%E4%BD%86%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8F%82%E6%95%B0%E5%BF%85%E9%A1%BB%E4%B8%BA%20%5D%5Cn%23%20%E8%BF%99%E4%B8%AA%E5%90%8D%E5%AD%97%E4%B8%BA%20%5C%22%5B%5C%22%20%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E4%B8%80%E8%88%AC%E5%B0%B1%E5%9C%A8%20%2Fbin%20%E6%88%96%20%2Fusr%2Fbin%20%E4%B8%8B%E9%9D%A2%EF%BC%8C%E6%AF%94%20test%20%E4%BC%98%E9%9B%85%E4%BA%9B%5Cnif%20%5B%20-e%20%2Fetc%2Fpasswd%20%5D%3B%20then%20%20%20%5Cn%20%20%20%20echo%20%5C%22alright%20it%20exists%20...%20%5C%22%5Cnelse%5Cn%20%20%20%20echo%20%5C%22it%20doesn't%20exist%20...%20%5C%22%5Cnfi%5Cn%5Cn%23%20%E5%92%8C%E4%B8%8A%E9%9D%A2%E4%B8%A4%E4%B8%AA%E5%AE%8C%E5%85%A8%E7%AD%89%E4%BB%B7%EF%BC%8C%E5%85%B6%E5%AE%9E%E5%88%B0%20bash%20%E6%97%B6%E4%BB%A3%20%5B%20%E5%B7%B2%E7%BB%8F%E6%98%AF%E5%86%85%E9%83%A8%E5%91%BD%E4%BB%A4%E4%BA%86%EF%BC%8C%E7%94%A8%20enable%20%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%5Cn%5B%20-e%20%2Fetc%2Fpasswd%20%5D%20%26%26%20echo%20%5C%22alright%20it%20exists%5C%22%20%7C%7C%20echo%20%5C%22it%20doesn't%20exist%5C%22%5Cn%5Cn%23%20%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%5Cnif%20%5B%20%5C%22%24varname%5C%22%20%3D%20%5C%22foo%5C%22%20%5D%3B%20then%5Cn%20%20%20%20echo%20%5C%22this%20is%20foo%5C%22%5Cnelif%20%5B%20%5C%22%24varname%5C%22%20%3D%20%5C%22bar%5C%22%20%5D%3B%20then%5Cn%20%20%20%20echo%20%5C%22this%20is%20bar%5C%22%5Cnelse%5Cn%20%20%20%20echo%20%5C%22neither%5C%22%5Cnfi%5Cn%5Cn%23%20%E5%A4%8D%E6%9D%82%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%EF%BC%8C%E6%B3%A8%E6%84%8F%20%7C%7C%20%E5%92%8C%20%26%26%20%E6%98%AF%E5%AE%8C%E5%85%A8%E5%85%BC%E5%AE%B9%20POSIX%20%E7%9A%84%E6%8E%A8%E8%8D%90%E5%86%99%E6%B3%95%5Cnif%20%5B%20%24x%20-gt%2010%20%5D%20%26%26%20%5B%20%24x%20-lt%2020%20%5D%3B%20then%5Cn%20%20%20%20echo%20%5C%22yes%2C%20between%2010%20and%2020%5C%22%5Cnfi%5Cn%5Cn%23%20%E5%8F%AF%E4%BB%A5%E7%94%A8%20%26%26%20%E5%91%BD%E4%BB%A4%E8%BF%9E%E6%8E%A5%E7%AC%A6%E6%9D%A5%E5%81%9A%E5%92%8C%E4%B8%8A%E9%9D%A2%E5%AE%8C%E5%85%A8%E7%AD%89%E4%BB%B7%E7%9A%84%E4%BA%8B%E6%83%85%5Cn%5B%20%24x%20-gt%2010%20%5D%20%26%26%20%5B%20%24x%20-lt%2020%20%5D%20%26%26%20echo%20%5C%22yes%2C%20between%2010%20and%2020%5C%22%5Cn%5Cn%23%20%E5%B0%8F%E6%8B%AC%E5%8F%B7%E5%92%8C%20-a%20-o%20%E6%98%AF%20POSIX%20XSI%20%E6%89%A9%E5%B1%95%E5%86%99%E6%B3%95%EF%BC%8C%E5%B0%8F%E6%8B%AC%E5%8F%B7%E6%98%AF%E5%AD%97%E9%9D%A2%E9%87%8F%EF%BC%8C%E8%BE%93%E5%85%A5%E6%97%B6%E5%89%8D%E9%9D%A2%E8%A6%81%E5%8A%A0%E5%8F%8D%E6%96%9C%E6%9D%86%5Cnif%20%5B%20%5C%5C(%20%24x%20-gt%2010%20%5C%5C)%20-a%20%5C%5C(%20%24x%20-lt%2020%20%5C%5C)%20%5D%3B%20then%5Cn%20%20%20%20echo%20%5C%22yes%2C%20between%2010%20and%2020%5C%22%5Cnfi%5Cn%5Cn%23%20%E5%90%8C%E6%A0%B7%E5%8F%AF%E4%BB%A5%E7%94%A8%20%26%26%20%E5%91%BD%E4%BB%A4%E8%BF%9E%E6%8E%A5%E7%AC%A6%E6%9D%A5%E5%81%9A%E5%92%8C%E4%B8%8A%E9%9D%A2%E5%AE%8C%E5%85%A8%E7%AD%89%E4%BB%B7%E7%9A%84%E4%BA%8B%E6%83%85%5Cn%5B%20%5C%5C(%20%24x%20-gt%2010%20%5C%5C)%20-a%20%5C%5C(%20%24x%20-lt%2020%20%5C%5C)%20%5D%20%26%26%20echo%20%5C%22yes%2C%20between%2010%20and%2020%5C%22%5Cn%5Cn%5Cn%23%20%E5%88%A4%E6%96%AD%E7%A8%8B%E5%BA%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E8%AF%9D%E5%B0%B1%E6%89%A7%E8%A1%8C%5Cn%5B%20-x%20%2Fbin%2Fls%20%5D%20%26%26%20%2Fbin%2Fls%20-l%5Cn%5Cn%23%20%E5%A6%82%E6%9E%9C%E4%B8%8D%E8%80%83%E8%99%91%E5%85%BC%E5%AE%B9%20posix%20sh%20%E5%92%8C%20dash%20%E8%BF%99%E4%BA%9B%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AF%E7%94%A8%20bash%20%E7%8B%AC%E6%9C%89%E7%9A%84%20((..))%20%E5%92%8C%20%5B%5B..%5D%5D%3A%5Cnhttps%3A%2F%2Fwww.ibm.com%2Fdeveloperworks%2Flibrary%2Fl-bash-test%2Findex.html%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%EF%BC%9Awhile%20%2F%20for%20%2F%20case%20%2F%20until%20%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cn%23%20while%20%E5%BE%AA%E7%8E%AF%5Cnwhile%20condition%3B%20do%5Cn%20%20%20%20statements%5Cndone%5Cn%5Cni%3D1%5Cnwhile%20%5B%20%24i%20-le%2010%20%5D%3B%20do%5Cn%20%20%20%20echo%20%24i%3B%20%5Cn%20%20%20%20i%3D%24(expr%20%24i%20%2B%201)%5Cndone%5Cn%5Cn%23%20for%20%E5%BE%AA%E7%8E%AF%EF%BC%9A%E4%B8%8A%E9%9D%A2%E7%9A%84%20while%20%E8%AF%AD%E5%8F%A5%E7%AD%89%E4%BB%B7%5Cnfor%20i%20in%20%7B1..10%7D%3B%20do%5Cn%20%20%20%20echo%20%24i%5Cndone%5Cn%5Cnfor%20name%20%5Bin%20list%5D%3B%20do%5Cn%20%20%20%20statements%5Cndone%5Cn%5Cn%23%20for%20%E5%88%97%E4%B8%BE%E6%9F%90%E7%9B%AE%E5%BD%95%E4%B8%8B%E9%9D%A2%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%5Cnfor%20f%20in%20%2Fhome%2F*%3B%20do%20%5Cn%20%20%20%20echo%20%24f%5Cndone%5Cn%5Cn%23%20bash%20%E7%8B%AC%E6%9C%89%E7%9A%84%20((%20..%20))%20%E8%AF%AD%E5%8F%A5%EF%BC%8C%E6%9B%B4%E6%8E%A5%E8%BF%91%20C%20%E8%AF%AD%E8%A8%80%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%8D%E5%85%BC%E5%AE%B9%20posix%20sh%5Cnfor%20((%20initialisation%20%3B%20ending%20condition%20%3B%20update%20))%3B%20do%5Cn%20%20%20%20statements%5Cndone%5Cn%5Cn%23%20%E5%92%8C%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%86%99%E6%B3%95%E7%AD%89%E4%BB%B7%5Cnfor%20((i%20%3D%200%3B%20i%20%3C%2010%3B%20i%2B%2B))%3B%20do%20echo%20%24i%3B%20done%5Cn%5Cn%23%20case%20%E5%88%A4%E6%96%AD%5Cncase%20expression%20in%20%5Cn%20%20%20%20pattern1%20)%5Cn%20%20%20%20%20%20%20%20statements%20%3B%3B%5Cn%20%20%20%20pattern2%20)%5Cn%20%20%20%20%20%20%20%20statements%20%3B%3B%5Cn%20%20%20%20*%20)%5Cn%20%20%20%20%20%20%20%20otherwise%20%3B%3B%5Cnesac%5Cn%5Cn%23%20until%20%E8%AF%AD%E5%8F%A5%5Cnuntil%20condition%3B%20do%5Cn%20%20%20%20statements%5Cndone%5Cn%5Cn%23%20select%20%E8%AF%AD%E5%8F%A5%5Cnselect%20name%20%5Bin%20list%5D%3B%20do%5Cn%20%20statements%20that%20can%20use%20%24name%5Cndone%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E5%91%BD%E4%BB%A4%E5%A4%84%E7%90%86%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cncommand%20ls%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%BF%BD%E7%95%A5%20alias%20%E7%9B%B4%E6%8E%A5%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F%E6%88%96%E8%80%85%E5%86%85%E5%BB%BA%E5%91%BD%E4%BB%A4%20ls%5Cnbuiltin%20cd%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%BF%BD%E7%95%A5%20alias%20%E7%9B%B4%E6%8E%A5%E8%BF%90%E8%A1%8C%E5%86%85%E5%BB%BA%E7%9A%84%20cd%20%E5%91%BD%E4%BB%A4%5Cnenable%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%20bash%20%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4%EF%BC%8C%E6%88%96%E7%A6%81%E6%AD%A2%E6%9F%90%E5%91%BD%E4%BB%A4%5Cnhelp%20%7Bbuiltin_command%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4%E7%9A%84%E5%B8%AE%E5%8A%A9%EF%BC%88%E4%BB%85%E9%99%90%20bash%20%E5%86%85%E7%BD%AE%E5%91%BD%E4%BB%A4%EF%BC%89%5Cn%5Cneval%20%24script%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%AF%B9%20script%20%E5%8F%98%E9%87%8F%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B1%82%E5%80%BC%EF%BC%88%E6%89%A7%E8%A1%8C%EF%BC%89%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E8%BE%93%E5%87%BA%2F%E8%BE%93%E5%85%A5%20%E9%87%8D%E5%AE%9A%E5%90%91%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cncmd1%20%7C%20cmd2%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%AE%A1%E9%81%93%EF%BC%8Ccmd1%20%E7%9A%84%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E6%8E%A5%E5%88%B0%20cmd2%20%E7%9A%84%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%5Cn%3C%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%B0%86%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%E9%87%8D%E5%AE%9A%E5%90%91%E4%B8%BA%E5%91%BD%E4%BB%A4%E7%9A%84%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%5Cn%3E%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%B0%86%E5%91%BD%E4%BB%A4%E7%9A%84%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6%EF%BC%8C%E4%BC%9A%E8%A6%86%E7%9B%96%E6%96%87%E4%BB%B6%5Cn%3E%3E%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%B0%86%E5%91%BD%E4%BB%A4%E7%9A%84%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%BD%E5%8A%A0%E4%B8%8D%E8%A6%86%E7%9B%96%5Cn%3E%7C%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%BC%BA%E5%88%B6%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6%EF%BC%8C%E5%8D%B3%E4%BE%BF%E8%AE%BE%E7%BD%AE%E8%BF%87%EF%BC%9Aset%20-o%20noclobber%5Cnn%3E%7C%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%BC%BA%E5%88%B6%E5%B0%86%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%E7%9A%84%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6%5Cn%3C%3E%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E4%BD%9C%E4%B8%BA%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E5%92%8C%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%5Cnn%3C%3E%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E4%BD%9C%E4%B8%BA%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%20%E7%9A%84%E8%BE%93%E5%87%BA%E5%92%8C%E8%BE%93%E5%85%A5%5Cnn%3E%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%87%8D%E5%AE%9A%E5%90%91%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%20%E7%9A%84%E8%BE%93%E5%87%BA%E5%88%B0%E6%96%87%E4%BB%B6%5Cnn%3C%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%87%8D%E5%AE%9A%E5%90%91%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%20%E7%9A%84%E8%BE%93%E5%85%A5%E4%B8%BA%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9%5Cnn%3E%26%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%B0%86%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%20dup%2F%E5%90%88%E5%B9%B6%20%E5%88%B0%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%5Cnn%3C%26%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%B0%86%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%20dump%2F%E5%90%88%E5%B9%B6%20%E5%AE%9A%E5%90%91%E4%B8%BA%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%5Cnn%3E%26m%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%20%E8%A2%AB%E4%BD%9C%E4%B8%BA%E6%8F%8F%E8%BF%B0%E7%AC%A6%20m%20%E7%9A%84%E5%89%AF%E6%9C%AC%EF%BC%8C%E8%BE%93%E5%87%BA%E7%94%A8%5Cnn%3C%26m%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%20%E8%A2%AB%E4%BD%9C%E4%B8%BA%E6%8F%8F%E8%BF%B0%E7%AC%A6%20m%20%E7%9A%84%E5%89%AF%E6%9C%AC%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%5Cn%26%3Efile%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%B0%86%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%E5%92%8C%E6%A0%87%E5%87%86%E9%94%99%E8%AF%AF%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E6%96%87%E4%BB%B6%5Cn%3C%26-%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%85%B3%E9%97%AD%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%5Cn%3E%26-%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%85%B3%E9%97%AD%E6%A0%87%E5%87%86%E8%BE%93%E5%87%BA%5Cnn%3E%26-%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%85%B3%E9%97%AD%E4%BD%9C%E4%B8%BA%E8%BE%93%E5%87%BA%E7%9A%84%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%5Cnn%3C%26-%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%85%B3%E9%97%AD%E4%BD%9C%E4%B8%BA%E8%BE%93%E5%85%A5%E7%9A%84%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E7%AC%A6%20n%5Cndiff%20%3C(cmd1)%20%3C(cmd2)%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%AF%94%E8%BE%83%E4%B8%A4%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9A%84%E8%BE%93%E5%87%BA%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%20-%20cut%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cncut%20-c%201-16%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%88%AA%E5%8F%96%E6%AF%8F%E8%A1%8C%E5%A4%B416%E4%B8%AA%E5%AD%97%E7%AC%A6%5Cncut%20-c%201-16%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%88%AA%E5%8F%96%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E4%B8%AD%E6%AF%8F%E8%A1%8C%E5%A4%B4%2016%E4%B8%AA%E5%AD%97%E7%AC%A6%5Cncut%20-c3-%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%88%AA%E5%8F%96%E6%AF%8F%E8%A1%8C%E4%BB%8E%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%AD%97%E7%AC%A6%E5%BC%80%E5%A7%8B%E5%88%B0%E8%A1%8C%E6%9C%AB%E7%9A%84%E5%86%85%E5%AE%B9%5Cncut%20-d'%3A'%20-f5%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%88%AA%E5%8F%96%E7%94%A8%E5%86%92%E5%8F%B7%E5%88%86%E9%9A%94%E7%9A%84%E7%AC%AC%E4%BA%94%E5%88%97%E5%86%85%E5%AE%B9%5Cncut%20-d'%3B'%20-f2%2C10%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%88%AA%E5%8F%96%E7%94%A8%E5%88%86%E5%8F%B7%E5%88%86%E9%9A%94%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%92%8C%E7%AC%AC%E5%8D%81%E5%88%97%E5%86%85%E5%AE%B9%5Cncut%20-d'%20'%20-f3-7%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%88%AA%E5%8F%96%E7%A9%BA%E6%A0%BC%E5%88%86%E9%9A%94%E7%9A%84%E4%B8%89%E5%88%B0%E4%B8%83%E5%88%97%5Cnecho%20%5C%22hello%5C%22%20%7C%20cut%20-c1-3%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%20hel%5Cnecho%20%5C%22hello%20sir%5C%22%20%7C%20cut%20-d'%20'%20-f2%20%20%20%23%20%E6%98%BE%E7%A4%BA%20sir%5Cnps%20%7C%20tr%20-s%20%5C%22%20%5C%22%20%7C%20cut%20-d%20%5C%22%20%5C%22%20-f%202%2C3%2C4%20%20%23%20cut%20%E6%90%AD%E9%85%8D%20tr%20%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%20-%20awk%20%2F%20sed%20%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnawk%20'%7Bprint%20%245%7D'%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6%E4%B8%AD%E4%BB%A5%E7%A9%BA%E6%A0%BC%E5%88%86%E9%9A%94%E7%9A%84%E7%AC%AC%E4%BA%94%E5%88%97%5Cnawk%20-F%20'%2C'%20'%7Bprint%20%245%7D'%20file%20%20%20%20%20%20%20%23%20%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6%E4%B8%AD%E4%BB%A5%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E7%9A%84%E7%AC%AC%E4%BA%94%E5%88%97%5Cnawk%20'%2Fstr%2F%20%7Bprint%20%242%7D'%20file%20%20%20%20%20%20%20%20%23%20%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8C%85%E5%90%AB%20str%20%E7%9A%84%E6%89%80%E6%9C%89%E8%A1%8C%E7%9A%84%E7%AC%AC%E4%BA%8C%E5%88%97%5Cnawk%20-F%20'%2C'%20'%7Bprint%20%24NF%7D'%20file%20%20%20%20%20%20%23%20%E6%89%93%E5%8D%B0%E9%80%97%E5%8F%B7%E5%88%86%E9%9A%94%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E6%AF%8F%E8%A1%8C%E6%9C%80%E5%90%8E%E4%B8%80%E5%88%97%20%5Cnawk%20'%7Bs%2B%3D%241%7D%20END%20%7Bprint%20s%7D'%20file%20%20%20%23%20%E8%AE%A1%E7%AE%97%E6%89%80%E6%9C%89%E7%AC%AC%E4%B8%80%E5%88%97%E7%9A%84%E5%90%88%5Cnawk%20'NR%253%3D%3D1'%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BB%8E%E7%AC%AC%E4%B8%80%E8%A1%8C%E5%BC%80%E5%A7%8B%EF%BC%8C%E6%AF%8F%E9%9A%94%E4%B8%89%E8%A1%8C%E6%89%93%E5%8D%B0%E4%B8%80%E8%A1%8C%5Cn%5Cnsed%20's%2Ffind%2Freplace%2F'%20file%20%20%20%20%20%20%20%20%20%23%20%E6%9B%BF%E6%8D%A2%E6%96%87%E4%BB%B6%E4%B8%AD%E9%A6%96%E6%AC%A1%E5%87%BA%E7%8E%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B9%B6%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C%20%5Cnsed%20'10s%2Ffind%2Freplace%2F'%20file%20%20%20%20%20%20%20%23%20%E6%9B%BF%E6%8D%A2%E6%96%87%E4%BB%B6%E7%AC%AC%2010%20%E8%A1%8C%E5%86%85%E5%AE%B9%5Cnsed%20'10%2C20s%2Ffind%2Freplace%2F'%20file%20%20%20%20%23%20%E6%9B%BF%E6%8D%A2%E6%96%87%E4%BB%B6%E4%B8%AD%2010-20%20%E8%A1%8C%E5%86%85%E5%AE%B9%5Cnsed%20-r%20's%2Fregex%2Freplace%2Fg'%20file%20%20%20%20%23%20%E6%9B%BF%E6%8D%A2%E6%96%87%E4%BB%B6%E4%B8%AD%E6%89%80%E6%9C%89%E5%87%BA%E7%8E%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cnsed%20-i%20's%2Ffind%2Freplace%2Fg'%20file%20%20%20%20%20%23%20%E6%9B%BF%E6%8D%A2%E6%96%87%E4%BB%B6%E4%B8%AD%E6%89%80%E6%9C%89%E5%87%BA%E7%8E%B0%E7%9A%84%E5%AD%97%E7%AC%A6%E5%B9%B6%E4%B8%94%E8%A6%86%E7%9B%96%E6%96%87%E4%BB%B6%5Cnsed%20-i%20'%2Ffind%2Fi%5C%5Cnewline'%20file%20%20%20%20%20%20%23%20%E5%9C%A8%E6%96%87%E4%BB%B6%E7%9A%84%E5%8C%B9%E9%85%8D%E6%96%87%E6%9C%AC%E5%89%8D%E6%8F%92%E5%85%A5%E8%A1%8C%5Cnsed%20-i%20'%2Ffind%2Fa%5C%5Cnewline'%20file%20%20%20%20%20%20%23%20%E5%9C%A8%E6%96%87%E4%BB%B6%E7%9A%84%E5%8C%B9%E9%85%8D%E6%96%87%E6%9C%AC%E5%90%8E%E6%8F%92%E5%85%A5%E8%A1%8C%5Cnsed%20'%2Fline%2Fs%2Ffind%2Freplace%2F'%20file%20%20%20%23%20%E5%85%88%E6%90%9C%E7%B4%A2%E8%A1%8C%E7%89%B9%E5%BE%81%E5%86%8D%E6%89%A7%E8%A1%8C%E6%9B%BF%E6%8D%A2%5Cnsed%20-e%20's%2Ff%2Fr%2F'%20-e%20's%2Ff%2Fr'%20file%20%20%20%20%23%20%E6%89%A7%E8%A1%8C%E5%A4%9A%E6%AC%A1%E6%9B%BF%E6%8D%A2%5Cnsed%20's%23find%23replace%23'%20file%20%20%20%20%20%20%20%20%20%23%20%E4%BD%BF%E7%94%A8%20%23%20%E6%9B%BF%E6%8D%A2%20%2F%20%E6%9D%A5%E9%81%BF%E5%85%8D%20pattern%20%E4%B8%AD%E6%9C%89%E6%96%9C%E6%9D%86%5Cnsed%20-i%20-r%20's%2F%5E%5C%5Cs%2B%2F%2Fg'%20file%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%AF%8F%E8%A1%8C%E5%A4%B4%E9%83%A8%E7%A9%BA%E6%A0%BC%5Cnsed%20'%2F%5E%24%2Fd'%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E7%A9%BA%E8%A1%8C%E5%B9%B6%E6%89%93%E5%8D%B0%5Cnsed%20-i%20's%2F%5C%5Cs%5C%5C%2B%24%2F%2F'%20file%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%AF%8F%E8%A1%8C%E6%9C%AB%E5%B0%BE%E5%A4%9A%E4%BD%99%E7%A9%BA%E6%A0%BC%5Cnsed%20-n%20'2p'%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6%E7%AC%AC%E4%BA%8C%E8%A1%8C%5Cnsed%20-n%20'2%2C5p'%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%89%93%E5%8D%B0%E6%96%87%E4%BB%B6%E7%AC%AC%E4%BA%8C%E5%88%B0%E7%AC%AC%E4%BA%94%E8%A1%8C%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E6%8E%92%E5%BA%8F%20-%20sort%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnsort%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%8E%92%E5%BA%8F%E6%96%87%E4%BB%B6%5Cnsort%20-r%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%8D%E5%90%91%E6%8E%92%E5%BA%8F%EF%BC%88%E9%99%8D%E5%BA%8F%EF%BC%89%5Cnsort%20-n%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E8%80%8C%E4%B8%8D%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83%5Cnsort%20-t%3A%20-k%203n%20%2Fetc%2Fpasswd%20%20%20%20%20%20%20%20%20%23%20%E6%8C%89%20passwd%20%E6%96%87%E4%BB%B6%E7%9A%84%E7%AC%AC%E4%B8%89%E5%88%97%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%5Cnsort%20-u%20file%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8E%BB%E9%87%8D%E6%8E%92%E5%BA%8F%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E5%BF%AB%E9%80%9F%E8%B7%B3%E8%BD%AC%20-%20https%3A%2F%2Fgithub.com%2Frupa%2Fz%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnsource%20%2Fpath%2Fto%2Fz.sh%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20.bashrc%20%E4%B8%AD%E5%88%9D%E5%A7%8B%E5%8C%96%20z.sh%5Cnz%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%B7%AF%E5%BE%84%E4%BB%A5%E5%8F%8A%E4%BB%96%E4%BB%AC%E7%9A%84%E6%9D%83%E9%87%8D%5Cnz%20foo%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%B7%B3%E5%88%B0%E5%8E%86%E5%8F%B2%E8%B7%AF%E5%BE%84%E4%B8%AD%E5%8C%B9%E9%85%8D%20foo%20%E7%9A%84%E6%9D%83%E9%87%8D%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9B%AE%E5%BD%95%5Cnz%20foo%20bar%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%B7%B3%E5%88%B0%E5%8E%86%E5%8F%B2%E8%B7%AF%E5%BE%84%E4%B8%AD%E5%8C%B9%E9%85%8D%20foo%20%E5%92%8C%20bar%20%E6%9D%83%E9%87%8D%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9B%AE%E5%BD%95%5Cnz%20-l%20foo%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E5%8E%86%E5%8F%B2%E8%B7%AF%E5%BE%84%E4%B8%AD%E5%8C%B9%E9%85%8D%20foo%20%E7%9A%84%E7%9B%AE%E5%BD%95%E5%8F%8A%E6%9D%83%E9%87%8D%5Cnz%20-r%20foo%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%8C%89%E7%85%A7%E6%9C%80%E9%AB%98%E8%AE%BF%E9%97%AE%E6%AC%A1%E6%95%B0%E4%BC%98%E5%85%88%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%E8%B7%B3%E8%BD%AC%5Cnz%20-t%20foo%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%8C%89%E7%85%A7%E6%9C%80%E8%BF%91%E8%AE%BF%E9%97%AE%E4%BC%98%E5%85%88%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%E8%B7%B3%E8%BD%AC%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E9%94%AE%E7%9B%98%E7%BB%91%E5%AE%9A%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnbind%20'%5C%22%5C%5Ceh%5C%22%3A%5C%22%5C%5CC-b%5C%22'%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%91%E5%AE%9A%20ALT%2Bh%20%E4%B8%BA%E5%85%89%E6%A0%87%E5%B7%A6%E7%A7%BB%EF%BC%8C%E5%90%8C%20CTRL%2Bb%20%2F%20%3CLeft%3E%5Cnbind%20'%5C%22%5C%5Cel%5C%22%3A%5C%22%5C%5CC-f%5C%22'%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%91%E5%AE%9A%20ALT%2Bl%20%E4%B8%BA%E5%85%89%E6%A0%87%E5%8F%B3%E7%A7%BB%EF%BC%8C%E5%90%8C%20CTRL%2Bf%20%2F%20%3CRight%3E%5Cnbind%20'%5C%22%5C%5Cej%5C%22%3A%5C%22%5C%5CC-n%5C%22'%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%91%E5%AE%9A%20ALT%2Bj%20%E4%B8%BA%E4%B8%8B%E6%9D%A1%E5%8E%86%E5%8F%B2%EF%BC%8C%E5%90%8C%20CTRL%2Bn%20%2F%20%3CDown%3E%5Cnbind%20'%5C%22%5C%5Cek%5C%22%3A%5C%22%5C%5CC-p%5C%22'%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%91%E5%AE%9A%20ALT%2Bk%20%E4%B8%BA%E4%B8%8A%E6%9D%A1%E5%8E%86%E5%8F%B2%EF%BC%8C%E5%90%8C%20CTRL%2Bp%20%2F%20%3CUp%3E%5Cnbind%20'%5C%22%5C%5CeH%5C%22%3A%5C%22%5C%5Ceb%5C%22'%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%91%E5%AE%9A%20ALT%2BH%20%E4%B8%BA%E5%85%89%E6%A0%87%E5%B7%A6%E7%A7%BB%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%EF%BC%8C%E5%90%8C%20ALT-b%20%5Cnbind%20'%5C%22%5C%5CeL%5C%22%3A%5C%22%5C%5Cef%5C%22'%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%91%E5%AE%9A%20ALT%2BL%20%E4%B8%BA%E5%85%89%E6%A0%87%E5%8F%B3%E7%A7%BB%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%EF%BC%8C%E5%90%8C%20ALT-f%20%5Cnbind%20'%5C%22%5C%5CeJ%5C%22%3A%5C%22%5C%5CC-a%5C%22'%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%91%E5%AE%9A%20ALT%2BJ%20%E4%B8%BA%E7%A7%BB%E5%8A%A8%E5%88%B0%E8%A1%8C%E9%A6%96%EF%BC%8C%E5%90%8C%20CTRL%2Ba%20%2F%20%3CHome%3E%5Cnbind%20'%5C%22%5C%5CeK%5C%22%3A%5C%22%5C%5CC-e%5C%22'%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%91%E5%AE%9A%20ALT%2BK%20%E4%B8%BA%E7%A7%BB%E5%8A%A8%E5%88%B0%E8%A1%8C%E6%9C%AB%EF%BC%8C%E5%90%8C%20CTRL%2Be%20%2F%20%3CEnd%3E%5Cnbind%20'%5C%22%5C%5Ce%3B%5C%22%3A%5C%22ls%20-l%5C%5Cn%5C%22'%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%91%E5%AE%9A%20ALT%2B%3B%20%E4%B8%BA%E6%89%A7%E8%A1%8C%20ls%20-l%20%E5%91%BD%E4%BB%A4%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%EF%BC%9Aip%20%2F%20ifconfig%20%2F%20nmap%20...%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnip%20a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%EF%BC%8C%E5%90%8C%20ip%20address%5Cnip%20a%20show%20eth1%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E7%BD%91%E5%8D%A1%20IP%20%E5%9C%B0%E5%9D%80%5Cnip%20a%20add%20172.16.1.23%2F24%20dev%20eth1%20%20%20%23%20%E6%B7%BB%E5%8A%A0%E7%BD%91%E5%8D%A1%20IP%20%E5%9C%B0%E5%9D%80%5Cnip%20a%20del%20172.16.1.23%2F24%20dev%20eth1%20%20%20%23%20%E5%88%A0%E9%99%A4%E7%BD%91%E5%8D%A1%20IP%20%E5%9C%B0%E5%9D%80%5Cnip%20link%20show%20dev%20eth0%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E7%BD%91%E5%8D%A1%E8%AE%BE%E5%A4%87%E5%B1%9E%E6%80%A7%5Cnip%20link%20set%20eth1%20up%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%BF%80%E6%B4%BB%E7%BD%91%E5%8D%A1%5Cnip%20link%20set%20eth1%20down%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%85%B3%E9%97%AD%E7%BD%91%E5%8D%A1%5Cnip%20link%20set%20eth1%20address%20%7Bmac%7D%20%20%20%20%20%23%20%E4%BF%AE%E6%94%B9%20MAC%20%E5%9C%B0%E5%9D%80%5Cnip%20neighbour%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%20ARP%20%E7%BC%93%E5%AD%98%5Cnip%20route%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E8%B7%AF%E7%94%B1%E8%A1%A8%5Cnip%20route%20add%2010.1.0.0%2F24%20via%2010.0.0.253%20dev%20eth0%20%20%20%20%23%20%E6%B7%BB%E5%8A%A0%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%5Cnip%20route%20del%2010.1.0.0%2F24%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%A0%E9%99%A4%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1%5Cn%5Cnifconfig%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E7%BD%91%E5%8D%A1%E5%92%8C%E6%8E%A5%E5%8F%A3%E4%BF%A1%E6%81%AF%5Cnifconfig%20-a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%E6%89%80%E6%9C%89%E7%BD%91%E5%8D%A1%EF%BC%88%E5%8C%85%E6%8B%AC%E5%BC%80%E6%9C%BA%E6%B2%A1%E5%90%AF%E5%8A%A8%E7%9A%84%EF%BC%89%E4%BF%A1%E6%81%AF%5Cnifconfig%20eth0%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%8C%87%E5%AE%9A%E8%AE%BE%E5%A4%87%E6%98%BE%E7%A4%BA%E4%BF%A1%E6%81%AF%5Cnifconfig%20eth0%20up%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%BF%80%E6%B4%BB%E7%BD%91%E5%8D%A1%5Cnifconfig%20eth0%20down%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%85%B3%E9%97%AD%E7%BD%91%E5%8D%A1%5Cnifconfig%20eth0%20192.168.120.56%20%20%20%20%20%20%20%23%20%E7%BB%99%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE%20IP%20%E5%9C%B0%E5%9D%80%5Cnifconfig%20eth0%2010.0.0.8%20netmask%20255.255.255.0%20up%20%20%20%20%20%23%20%E9%85%8D%E7%BD%AE%20IP%20%E5%B9%B6%E5%90%AF%E5%8A%A8%5Cnifconfig%20eth0%20hw%20ether%2000%3Aaa%3Abb%3Acc%3Add%3Aee%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BF%AE%E6%94%B9%20MAC%20%E5%9C%B0%E5%9D%80%5Cn%5Cnnmap%2010.0.0.12%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%89%AB%E6%8F%8F%E4%B8%BB%E6%9C%BA%201-1000%20%E7%AB%AF%E5%8F%A3%5Cnnmap%20-p%201024-65535%2010.0.0.12%20%20%20%20%20%20%20%23%20%E6%89%AB%E6%8F%8F%E7%BB%99%E5%AE%9A%E7%AB%AF%E5%8F%A3%5Cnnmap%2010.0.0.0%2F24%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E7%BB%99%E5%AE%9A%E7%BD%91%E6%AE%B5%E6%89%AB%E6%8F%8F%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E6%89%80%E6%9C%89%E4%B8%BB%E6%9C%BA%5Cnnmap%20-O%20-sV%2010.0.0.12%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%8E%A2%E6%B5%8B%E4%B8%BB%E6%9C%BA%E6%9C%8D%E5%8A%A1%E5%92%8C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E6%9C%89%E8%B6%A3%E7%9A%84%E5%91%BD%E4%BB%A4%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cnman%20hier%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%93%E6%9E%84%E5%92%8C%E5%90%AB%E4%B9%89%5Cnman%20test%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%20posix%20sh%20%E7%9A%84%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%B8%AE%E5%8A%A9%5Cnman%20ascii%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%98%BE%E7%A4%BA%20ascii%20%E8%A1%A8%5Cngetconf%20LONG_BIT%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%98%AF%2032%20%E4%BD%8D%E8%BF%98%E6%98%AF%2064%20%E4%BD%8D%5Cnbind%20-P%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%20bash%20%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%5Cnmount%20%7C%20column%20-t%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%BC%82%E4%BA%AE%E7%9A%84%E5%88%97%E5%87%BA%E5%BD%93%E5%89%8D%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%5Cncurl%20ip.cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%E5%A4%96%E7%BD%91%20ip%20%E5%9C%B0%E5%9D%80%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%95%86%E4%BF%A1%E6%81%AF%5Cndisown%20-a%20%26%26%20exit%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%85%B3%E9%97%AD%E6%89%80%E6%9C%89%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1%E5%B9%B6%E9%80%80%E5%87%BA%5Cncat%20%2Fetc%2Fissue%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%20Linux%20%E5%8F%91%E8%A1%8C%E7%89%88%E4%BF%A1%E6%81%AF%5Cnlsof%20-i%20port%3A80%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%93%AA%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%9C%A8%E4%BD%BF%E7%94%A8%2080%20%E7%AB%AF%E5%8F%A3%EF%BC%9F%5Cnshowkey%20-a%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%E6%8C%89%E9%94%AE%E7%9A%84%20ASCII%20%E7%A0%81%5Cnsvn%20diff%20%7C%20view%20-%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BD%BF%E7%94%A8%20Vim%20%E6%9D%A5%E6%98%BE%E7%A4%BA%E5%B8%A6%E8%89%B2%E5%BD%A9%E7%9A%84%20diff%20%E8%BE%93%E5%87%BA%5Cnmv%20filename.%7Bold%2Cnew%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%BF%AB%E9%80%9F%E6%96%87%E4%BB%B6%E6%94%B9%E5%90%8D%5Cntime%20read%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E4%BD%BF%E7%94%A8%20CTRL-D%20%E5%81%9C%E6%AD%A2%EF%BC%8C%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E8%AE%A1%E6%97%B6%E5%8A%9F%E8%83%BD%5Cncp%20file.txt%7B%2C.bak%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%BF%AB%E9%80%9F%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%5Cnsudo%20touch%20%2Fforcefsck%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%BC%BA%E5%88%B6%E5%9C%A8%E4%B8%8B%E6%AC%A1%E9%87%8D%E5%90%AF%E6%97%B6%E6%89%AB%E6%8F%8F%E7%A3%81%E7%9B%98%5Cnfind%20~%20-mmin%2060%20-type%20f%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E6%89%BE%20%24HOME%20%E7%9B%AE%E5%BD%95%E4%B8%AD%EF%BC%8C60%20%E5%88%86%E9%92%9F%E5%86%85%E4%BF%AE%E6%94%B9%E8%BF%87%E7%9A%84%E6%96%87%E4%BB%B6%5Cncurl%20wttr.in%2F~beijing%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E7%9C%8B%E5%8C%97%E4%BA%AC%E7%9A%84%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5%5Cnecho%20%24%7BSSH_CLIENT%25%25%20*%7D%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%E4%BD%A0%E6%98%AF%E4%BB%8E%E4%BB%80%E4%B9%88%20IP%20%E9%93%BE%E6%8E%A5%E5%88%B0%E5%BD%93%E5%89%8D%E4%B8%BB%E6%9C%BA%E4%B8%8A%E7%9A%84%5Cnecho%20%24%5BRANDOM%25X%2B1%5D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%8F%96%E5%BE%97%201%20%E5%88%B0%20X%20%E4%B9%8B%E9%97%B4%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%5Cnbind%20-x%20'%5C%22%5C%5CC-l%5C%22%3Als%20-l'%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E8%AE%BE%E7%BD%AE%20CTRL%2Bl%20%E4%B8%BA%E6%89%A7%E8%A1%8C%20ls%20-l%20%E5%91%BD%E4%BB%A4%5Cnfind%20%2F%20-type%20f%20-size%20%2B5M%20%20%20%20%20%20%20%20%20%20%20%23%20%E6%9F%A5%E6%89%BE%E5%A4%A7%E4%BA%8E%205M%20%E7%9A%84%E6%96%87%E4%BB%B6%5Cnchmod%20--reference%20f1%20f2%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E5%B0%86%20f2%20%E7%9A%84%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE%E6%88%90%20f1%20%E4%B8%80%E6%A8%A1%E4%B8%80%E6%A0%B7%E7%9A%84%5Cncurl%20-L%20cheat.sh%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%20%E9%80%9F%E6%9F%A5%E8%A1%A8%E5%A4%A7%E5%85%A8%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cn%23%20%E5%88%97%E5%87%BA%E6%9C%80%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4%5Cnhistory%20%7C%20awk%20'%7Ba%5B%242%5D%2B%2B%7DEND%7Bfor(i%20in%20a)%7Bprint%20a%5Bi%5D%20%5C%22%20%5C%22%20i%7D%7D'%20%7C%20sort%20-rn%20%7C%20head%5Cn%5Cn%23%20%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81%EF%BC%9AESTABLISHED%20%2F%20TIME_WAIT%20%2F%20FIN_WAIT1%20%2F%20FIN_WAIT2%20%5Cnnetstat%20-n%20%7C%20awk%20'%2F%5Etcp%2F%20%7B%2B%2Btt%5B%24NF%5D%7D%20END%20%7Bfor%20(a%20in%20tt)%20print%20a%2C%20tt%5Ba%5D%7D'%5Cn%5Cn%23%20%E9%80%9A%E8%BF%87%20SSH%20%E6%9D%A5%20mount%20%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%5Cnsshfs%20name%40server%3A%2Fpath%2Fto%2Ffolder%20%2Fpath%2Fto%2Fmount%2Fpoint%5Cn%5Cn%23%20%E6%98%BE%E7%A4%BA%E5%89%8D%E5%8D%81%E4%B8%AA%E8%BF%90%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B%E5%B9%B6%E6%8C%89%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E9%87%8F%E6%8E%92%E5%BA%8F%5Cnps%20aux%20%7C%20sort%20-nk%20%2B4%20%7C%20tail%5Cn%5Cn%23%20%E5%9C%A8%E5%8F%B3%E4%B8%8A%E8%A7%92%E6%98%BE%E7%A4%BA%E6%97%B6%E9%92%9F%5Cnwhile%20sleep%201%3Bdo%20tput%20sc%3Btput%20cup%200%20%24((%24(tput%20cols)-29))%3Bdate%3Btput%20rc%3Bdone%26%5Cn%5Cn%23%20%E4%BB%8E%E7%BD%91%E7%BB%9C%E4%B8%8A%E7%9A%84%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E4%B8%AD%E8%A7%A3%E5%87%BA%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E6%9D%A5%EF%BC%8C%E5%B9%B6%E9%81%BF%E5%85%8D%E4%BF%9D%E5%AD%98%E4%B8%AD%E9%97%B4%E6%96%87%E4%BB%B6%5Cnwget%20-qO%20-%20%5C%22http%3A%2F%2Fwww.tarball.com%2Ftarball.gz%5C%22%20%7C%20tar%20zxvf%20-%5Cn%5Cn%23%20%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%EF%BC%9A%E6%B5%8B%E8%AF%95%E5%A4%84%E7%90%86%E5%99%A8%E6%80%A7%E8%83%BD%5Cnpython%20-c%20%5C%22import%20test.pystone%3Bprint(test.pystone.pystones())%5C%22%5Cn%5Cn%23%20%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%EF%BC%9A%E6%B5%8B%E8%AF%95%E5%86%85%E5%AD%98%E5%B8%A6%E5%AE%BD%5Cndd%20if%3D%2Fdev%2Fzero%20of%3D%2Fdev%2Fnull%20bs%3D1M%20count%3D32768%5Cn%5Cn%23%20Linux%20%E4%B8%8B%E6%8C%82%E8%BD%BD%E4%B8%80%E4%B8%AA%20iso%20%E6%96%87%E4%BB%B6%5Cnmount%20%2Fpath%2Fto%2Ffile.iso%20%2Fmnt%2Fcdrom%20-oloop%5Cn%5Cn%23%20%E9%80%9A%E8%BF%87%E4%B8%BB%E6%9C%BA%20A%20%E7%9B%B4%E6%8E%A5%20ssh%20%E5%88%B0%E4%B8%BB%E6%9C%BA%20B%5Cnssh%20-t%20hostA%20ssh%20hostB%5Cn%5Cn%23%20%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E7%9A%84%E6%89%80%E6%9C%89%E5%9B%BE%E7%89%87%5Cnwget%20-r%20-l1%20--no-parent%20-nH%20-nd%20-P%2Ftmp%20-A%5C%22.gif%2C.jpg%5C%22%20http%3A%2F%2Fexample.com%2Fimages%5Cn%5Cn%23%20%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95%5Cnmkdir%20-p%20work%2F%7Bproject1%2Cproject2%7D%2F%7Bsrc%2Cbin%2Cbak%7D%5Cn%5Cn%23%20%E6%8C%89%E6%97%A5%E6%9C%9F%E8%8C%83%E5%9B%B4%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%5Cnfind%20.%20-type%20f%20-newermt%20%5C%222010-01-01%5C%22%20!%20-newermt%20%5C%222010-06-01%5C%22%5Cn%5Cn%23%20%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E7%9A%84%E8%BF%9B%E7%A8%8B%5Cnlsof%20-P%20-i%20-n%20%7C%20cut%20-f%201%20-d%20%5C%22%20%5C%22%7C%20uniq%20%7C%20tail%20-n%20%2B2%5Cn%5Cn%23%20Vim%20%E4%B8%AD%E4%BF%9D%E5%AD%98%E4%B8%80%E4%B8%AA%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E7%9A%84%E6%96%87%E4%BB%B6%5Cn%3Aw%20!sudo%20tee%20%3E%20%2Fdev%2Fnull%20%25%5Cn%5Cn%23%20%E5%9C%A8%20.bashrc%20%2F%20.bash_profile%20%E4%B8%AD%E5%8A%A0%E8%BD%BD%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%EF%BC%88%E6%AF%94%E5%A6%82%E4%BD%A0%E4%BF%9D%E5%AD%98%E5%9C%A8%20github%20%E4%B8%8A%E7%9A%84%E9%85%8D%E7%BD%AE%EF%BC%89%5Cnsource%20~%2Fgithub%2Fprofiles%2Fmy_bash_init.sh%5Cn%5Cn%23%20%E7%BB%88%E7%AB%AF%E4%B8%8B%E6%AD%A3%E7%A1%AE%E8%AE%BE%E7%BD%AE%20ALT%20%E9%94%AE%E5%92%8C%20BackSpace%20%E9%94%AE%5Cnhttp%3A%2F%2Fwww.skywind.me%2Fblog%2Farchives%2F2021%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E6%9C%89%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cn%23%20%E8%87%AA%E5%8A%A8%E8%A7%A3%E5%8E%8B%EF%BC%9A%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80%E5%90%8D%E5%B9%B6%E8%B0%83%E7%94%A8%E7%9B%B8%E5%BA%94%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4%5Cnfunction%20q-extract()%20%7B%5Cn%20%20%20%20if%20%5B%20-f%20%241%20%5D%20%3B%20then%5Cn%20%20%20%20%20%20%20%20case%20%241%20in%5Cn%20%20%20%20%20%20%20%20*.tar.bz2)%20%20%20tar%20-xvjf%20%241%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.tar.gz)%20%20%20%20tar%20-xvzf%20%241%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.tar.xz)%20%20%20%20tar%20-xvJf%20%241%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.bz2)%20%20%20%20%20%20%20bunzip2%20%241%20%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.rar)%20%20%20%20%20%20%20rar%20x%20%241%20%20%20%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.gz)%20%20%20%20%20%20%20%20gunzip%20%241%20%20%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.tar)%20%20%20%20%20%20%20tar%20-xvf%20%241%20%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.tbz2)%20%20%20%20%20%20tar%20-xvjf%20%241%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.tgz)%20%20%20%20%20%20%20tar%20-xvzf%20%241%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.zip)%20%20%20%20%20%20%20unzip%20%241%20%20%20%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.Z)%20%20%20%20%20%20%20%20%20uncompress%20%241%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.7z)%20%20%20%20%20%20%20%207z%20x%20%241%20%20%20%20%20%20%20%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*)%20%20%20%20%20%20%20%20%20%20%20echo%20%5C%22don't%20know%20how%20to%20extract%20'%241'...%5C%22%20%3B%3B%5Cn%20%20%20%20%20%20%20%20esac%5Cn%20%20%20%20else%5Cn%20%20%20%20%20%20%20%20echo%20%5C%22'%241'%20is%20not%20a%20valid%20file!%5C%22%5Cn%20%20%20%20fi%5Cn%7D%5Cn%5Cn%23%20%E8%87%AA%E5%8A%A8%E5%8E%8B%E7%BC%A9%EF%BC%9A%E5%88%A4%E6%96%AD%E5%90%8E%E7%BC%80%E5%90%8D%E5%B9%B6%E8%B0%83%E7%94%A8%E7%9B%B8%E5%BA%94%E5%8E%8B%E7%BC%A9%E7%A8%8B%E5%BA%8F%5Cnfunction%20q-compress()%20%7B%5Cn%20%20%20%20if%20%5B%20-n%20%5C%22%241%5C%22%20%5D%20%3B%20then%5Cn%20%20%20%20%20%20%20%20FILE%3D%241%5Cn%20%20%20%20%20%20%20%20case%20%24FILE%20in%5Cn%20%20%20%20%20%20%20%20*.tar)%20shift%20%26%26%20tar%20-cf%20%24FILE%20%24*%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.tar.bz2)%20shift%20%26%26%20tar%20-cjf%20%24FILE%20%24*%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.tar.xz)%20shift%20%26%26%20tar%20-cJf%20%24FILE%20%24*%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.tar.gz)%20shift%20%26%26%20tar%20-czf%20%24FILE%20%24*%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.tgz)%20shift%20%26%26%20tar%20-czf%20%24FILE%20%24*%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.zip)%20shift%20%26%26%20zip%20%24FILE%20%24*%20%3B%3B%5Cn%20%20%20%20%20%20%20%20*.rar)%20shift%20%26%26%20rar%20%24FILE%20%24*%20%3B%3B%5Cn%20%20%20%20%20%20%20%20esac%5Cn%20%20%20%20else%5Cn%20%20%20%20%20%20%20%20echo%20%5C%22usage%3A%20q-compress%20%3Cfoo.tar.gz%3E%20.%2Ffoo%20.%2Fbar%5C%22%5Cn%20%20%20%20fi%5Cn%7D%5Cn%5Cn%23%20%E6%BC%82%E4%BA%AE%E7%9A%84%E5%B8%A6%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E7%9A%84%20color%20cat%20%EF%BC%8C%E9%9C%80%E8%A6%81%E5%85%88%20pip%20install%20pygments%5Cnfunction%20ccat()%20%7B%5Cn%20%20%20%20local%20style%3D%5C%22monokai%5C%22%5Cn%20%20%20%20if%20%5B%20%24%23%20-eq%200%20%5D%3B%20then%5Cn%20%20%20%20%20%20%20%20pygmentize%20-P%20style%3D%24style%20-P%20tabsize%3D4%20-f%20terminal256%20-g%5Cn%20%20%20%20else%5Cn%20%20%20%20%20%20%20%20for%20NAME%20in%20%24%40%3B%20do%5Cn%20%20%20%20%20%20%20%20%20%20%20%20pygmentize%20-P%20style%3D%24style%20-P%20tabsize%3D4%20-f%20terminal256%20-g%20%5C%22%24NAME%5C%22%5Cn%20%20%20%20%20%20%20%20done%5Cn%20%20%20%20fi%5Cn%7D%5Cn%5Cn%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%23%20%E5%A5%BD%E7%8E%A9%E7%9A%84%E9%85%8D%E7%BD%AE%5Cn%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%23%5Cn%5Cn%23%20%E6%94%BE%E5%88%B0%E4%BD%A0%E7%9A%84%20~%2F.bashrc%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%EF%BC%8C%E7%BB%99%20man%20%E5%A2%9E%E5%8A%A0%E6%BC%82%E4%BA%AE%E7%9A%84%E8%89%B2%E5%BD%A9%E9%AB%98%E4%BA%AE%5Cnexport%20LESS_TERMCAP_mb%3D%24'%5C%5CE%5B1m%5C%5CE%5B32m'%5Cnexport%20LESS_TERMCAP_mh%3D%24'%5C%5CE%5B2m'%5Cnexport%20LESS_TERMCAP_mr%3D%24'%5C%5CE%5B7m'%5Cnexport%20LESS_TERMCAP_md%3D%24'%5C%5CE%5B1m%5C%5CE%5B36m'%5Cnexport%20LESS_TERMCAP_ZW%3D%5C%22%5C%22%5Cnexport%20LESS_TERMCAP_us%3D%24'%5C%5CE%5B4m%5C%5CE%5B1m%5C%5CE%5B37m'%5Cnexport%20LESS_TERMCAP_me%3D%24'%5C%5CE(B%5C%5CE%5Bm'%5Cnexport%20LESS_TERMCAP_ue%3D%24'%5C%5CE%5B24m%5C%5CE(B%5C%5CE%5Bm'%5Cnexport%20LESS_TERMCAP_ZO%3D%5C%22%5C%22%5Cnexport%20LESS_TERMCAP_ZN%3D%5C%22%5C%22%5Cnexport%20LESS_TERMCAP_se%3D%24'%5C%5CE%5B27m%5C%5CE(B%5C%5CE%5Bm'%5Cnexport%20LESS_TERMCAP_ZV%3D%5C%22%5C%22%5Cnexport%20LESS_TERMCAP_so%3D%24'%5C%5CE%5B1m%5C%5CE%5B33m%5C%5CE%5B44m'%5Cn%5Cn%23%20ALT%2Bhjkl%2FHJKL%20%E5%BF%AB%E9%80%9F%E7%A7%BB%E5%8A%A8%E5%85%89%E6%A0%87%EF%BC%8C%E5%B0%86%E4%B8%8B%E9%9D%A2%E5%86%85%E5%AE%B9%E6%B7%BB%E5%8A%A0%E5%88%B0%20~%2F.inputrc%20%E4%B8%AD%E5%8F%AF%E4%BD%9C%E7%94%A8%E6%89%80%E6%9C%89%E5%B7%A5%E5%85%B7%EF%BC%8C%5Cn%23%20%E5%8C%85%E6%8B%AC%20bash%2Fzsh%2Fpython%2Flua%20%E7%AD%89%E4%BD%BF%E7%94%A8%20readline%20%E7%9A%84%E5%B7%A5%E5%85%B7%EF%BC%8C%E5%B8%AE%E5%8A%A9%E8%A7%81%EF%BC%9Ainfo%20rluserman%5Cn%5C%22%5C%5Ceh%5C%22%3A%20backward-char%5Cn%5C%22%5C%5Cel%5C%22%3A%20forward-char%5Cn%5C%22%5C%5Cej%5C%22%3A%20next-history%5Cn%5C%22%5C%5Cek%5C%22%3A%20previous-history%5Cn%5C%22%5C%5CeH%5C%22%3A%20backward-word%5Cn%5C%22%5C%5CeL%5C%22%3A%20forward-word%5Cn%5C%22%5C%5CeJ%5C%22%3A%20beginning-of-line%5Cn%5C%22%5C%5CeK%5C%22%3A%20end-of-line%22%7D\"></card><p>参考：</p><p><span style=\"color:#d4d4d4\">https://github.com/Idnan/bash-guide</span></p><p><span style=\"color:#d4d4d4\">http://www.linuxstall.com/linux-command-line-tips-that-every-linux-user-should-know/</span></p><p><span style=\"color:#d4d4d4\">https://ss64.com/bash/syntax-keyboard.html</span></p><p><span style=\"color:#d4d4d4\">http://wiki.bash-hackers.org/commands/classictest</span></p><p><span style=\"color:#d4d4d4\">https://www.ibm.com/developerworks/library/l-bash-test/index.html</span></p><p><span style=\"color:#d4d4d4\">https://www.cyberciti.biz/faq/bash-loop-over-file/</span></p><p><span style=\"color:#d4d4d4\">https://linuxconfig.org/bash-scripting-tutorial</span></p><p><span style=\"color:#d4d4d4\">https://github.com/LeCoupa/awesome-cheatsheets/blob/master/languages/bash.sh</span></p><p><span style=\"color:#d4d4d4\">https://devhints.io/bash</span></p><p><span style=\"color:#d4d4d4\">https://github.com/jlevy/the-art-of-command-line</span></p><p><span style=\"color:#d4d4d4\">https://yq.aliyun.com/articles/68541</span></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-19T15:02:25.000Z",
    "deleted_at": null,
    "created_at": "2018-11-19T14:54:11.000Z",
    "updated_at": "2018-11-19T15:02:25.000Z",
    "published_at": "2018-11-19T15:02:25.000Z",
    "first_published_at": null,
    "word_count": 7919,
    "cover": null,
    "description": "这两天写shell代码的时候，发现好多命令都不太会。后来在网上查，发现一个好东东，和大家分享（中文速查表）############################################################################## # BASH CHEATSHE...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 977798,
    "slug": "uv2qkr",
    "title": "LinkedList实现过程",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "",
    "body_draft": "",
    "body_html": "",
    "body_lake": "",
    "public": 1,
    "status": 0,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-18T07:23:01.000Z",
    "deleted_at": null,
    "created_at": "2018-11-18T07:23:01.000Z",
    "updated_at": "2018-11-18T07:23:36.000Z",
    "published_at": null,
    "first_published_at": null,
    "word_count": 0,
    "cover": null,
    "description": "",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 964627,
    "slug": "eelc37",
    "title": "JAVA小抄（二）",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"fawvpg\"></a>\n### [](#fawvpg)1、一个\".java\"源文件中是否可以包括多个类（不是内部类）？有什么限制？\n可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。\n<a name=\"6fltra\"></a>\n### [](#6fltra)2、Java有没有goto?\njava中的保留字，现在没有在java中使用。（可以明确的说现在使用的人就是有病）\n\n<a name=\"hromhu\"></a>\n### [](#hromhu)3、说说&和&&的区别。\n&和&&都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。<br />&&还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str != null && !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&&改为&，则会抛出NullPointerException异常。If(x==33 & ++y>0) y会增长，If(x==33 && ++y>0)不会增长。<br />&还可以用作位运算符，当&操作符两边的表达式不是boolean类型时，&表示按位与操作，我们通常使用0x0f来与一个整数进行&运算，来获取该整数的最低4个bit位，例如，0x31 & 0x0f的结果为0x01。\n\n<a name=\"9o55hz\"></a>\n### [](#9o55hz)4、在JAVA中如何跳出当前的多重嵌套循环？\n在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。另外，我个人通常并不使用标号这种方式，而是让外层的循环条件表达式的结果可以受到里层循环体代码的控制。\n```java\n@Test\n    public void test2(){\n        boolean a = false;\n        ok:{\n            for(int i=0;i<10;i++){\n                if(i==5){\n                    break ok;\n                }\n                System.out.println(i);\n            }\n        }\n    }\n\n    @Test\n    public void test3(){\n        boolean a = true;\n            for(int i=0;i<10&&a;i++){\n                if(i==5){\n                    a = false;\n                }\n                System.out.println(i);\n            }\n    }\n```\n\n\n<a name=\"oqsnsg\"></a>\n### [](#oqsnsg)5、switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n在switch（expr1）中，expr1只能是一个整数表达式或者枚举常量（更大字体），整数表达式可以是int基本类型或Integer包装类型，由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。显然，long类型不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它不能作用于swtich语句中。\n```java\npublic static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        System.out.print(\"请输入一个学生的成绩：\");\n        String score = sc.next();\n        String level=\"\";//等级\n        switch(score){\n            case \"A\":level=\"90-100\";break;\n            case \"B\":level=\"80-89\";break;\n            case \"C\":level=\"70-79\";break;\n            case \"D\":level=\"60-69\";break;\n            case \"E\":level=\"0-59\";break;\n            default :level=\"error\";break;\n        }\n        System.out.println(\"您的成绩对应的等级是：\"+level);\n    }\n```\n\n1.switch后面的(),里面返回的是一个具体的数值：byte ,short,char ,int ,jdk1.5增加了枚举；JDK 1.7之后 可以是String<br />2.这个数值会依次跟case后面的数值进行比较，只要满足就执行后面的代码，直到遇到break结束<br />3.在每个分支后面要加上一个关键字break<br />4.default就是一个备胎的作用。其余的分支假如都没有走，那么一定会走default里面的代码。（类似if多分钟中的else结构）<br />default可以写在任意的位置上，但是要写break结束语句。<br />假如放在最后一行，break可以省略不写。（建议写在最后一行--可读性好）<br />5.switch能解决的，if都能解决，if能解决的 switch不一定能解决。\n\n<a name=\"u8ttcv\"></a>\n### [](#u8ttcv)6、short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?\n对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。<br />对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。\n```java\npublic void test4(){\n    short s1 = 1;\n    s1 = s1 + 1;\n}\n```\n\n\u0000\n<a name=\"1hqagi\"></a>\n### [](#1hqagi)7.char型变量中能不能存贮一个中文汉字(双字符)?为什么?\nchar型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。\n\n<a name=\"l2omtt\"></a>\n### [](#l2omtt)8、用最有效率的方法算出2乘以8等于几?\n8 << 1\n\n<a name=\"m9k6hf\"></a>\n### [](#m9k6hf)9、请设计一个一百亿的计算器\n这种问题就是想问你对long的表示范围的了解，10^10=(2^10)^10超过了long的表示范围，可以使用biginteger直接使用。如果非要实现可以将其保存为String 然后单个符号位进行计算。\n\n<a name=\"yh0orl\"></a>\n### [](#yh0orl)10、使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\n使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：<br />final StringBuffer a=new StringBuffer(\"immutable\");<br />执行如下语句将报告编译期错误：a=new StringBuffer(\"\");<br />但是，执行如下语句则可以通过编译： a.append(\" broken!\");  \n\n```java\n@Test\n    public void test5(){\n        final StringBuffer a = new StringBuffer(\"immutable\");\n//虽然不可以被重新赋值，但是可以进行添加元素；可以简单的理解为不可变指针数组追加元素问题。\n//        a = new StringBuffer(\"\");\n        a.append(\" broken!\");\n    }\n```\n\n\n\n",
    "body_draft": "### <a name=\"fawvpg\"></a>1、一个\".java\"源文件中是否可以包括多个类（不是内部类）？有什么限制？\n可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。\n### <a name=\"6fltra\"></a>2、Java有没有goto?\njava中的保留字，现在没有在java中使用。（可以明确的说现在使用的人就是有病）\n\n### <a name=\"hromhu\"></a>3、说说&和&&的区别。\n&和&&都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。\n&&还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str != null && !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&&改为&，则会抛出NullPointerException异常。If(x==33 & ++y>0) y会增长，If(x==33 && ++y>0)不会增长。\n&还可以用作位运算符，当&操作符两边的表达式不是boolean类型时，&表示按位与操作，我们通常使用0x0f来与一个整数进行&运算，来获取该整数的最低4个bit位，例如，0x31 & 0x0f的结果为0x01。\n\n### <a name=\"9o55hz\"></a>4、在JAVA中如何跳出当前的多重嵌套循环？\n在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。另外，我个人通常并不使用标号这种方式，而是让外层的循环条件表达式的结果可以受到里层循环体代码的控制。\n```java\n    @Test\n    public void test2(){\n        boolean a = false;\n        ok:{\n            for(int i=0;i<10;i++){\n                if(i==5){\n                    break ok;\n                }\n                System.out.println(i);\n            }\n        }\n    }\n\n    @Test\n    public void test3(){\n        boolean a = true;\n            for(int i=0;i<10&&a;i++){\n                if(i==5){\n                    a = false;\n                }\n                System.out.println(i);\n            }\n    }\n```\n\n\n### <a name=\"oqsnsg\"></a>5、switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n在switch（expr1）中，expr1只能是一个整数表达式或者枚举常量（更大字体），整数表达式可以是int基本类型或Integer包装类型，由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。显然，long类型不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它不能作用于swtich语句中。\n```java\n    public static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        System.out.print(\"请输入一个学生的成绩：\");\n        String score = sc.next();\n        String level=\"\";//等级\n        switch(score){\n            case \"A\":level=\"90-100\";break;\n            case \"B\":level=\"80-89\";break;\n            case \"C\":level=\"70-79\";break;\n            case \"D\":level=\"60-69\";break;\n            case \"E\":level=\"0-59\";break;\n            default :level=\"error\";break;\n        }\n        System.out.println(\"您的成绩对应的等级是：\"+level);\n    }\n\n```\n\n1.switch后面的(),里面返回的是一个具体的数值：byte ,short,char ,int ,jdk1.5增加了枚举；JDK 1.7之后 可以是String\n2.这个数值会依次跟case后面的数值进行比较，只要满足就执行后面的代码，直到遇到break结束\n3.在每个分支后面要加上一个关键字break\n4.default就是一个备胎的作用。其余的分支假如都没有走，那么一定会走default里面的代码。（类似if多分钟中的else结构）\ndefault可以写在任意的位置上，但是要写break结束语句。\n假如放在最后一行，break可以省略不写。（建议写在最后一行--可读性好）\n5.switch能解决的，if都能解决，if能解决的 switch不一定能解决。\n\n### <a name=\"u8ttcv\"></a>6、short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?\n对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。\n对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。\n```java\npublic void test4(){\n    short s1 = 1;\n    s1 = s1 + 1;\n}\n```\n\n\u0000\n### <a name=\"1hqagi\"></a>7.char型变量中能不能存贮一个中文汉字(双字符)?为什么?\nchar型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。\n\n### <a name=\"l2omtt\"></a>8、用最有效率的方法算出2乘以8等于几?\n8 << 1\n\n### <a name=\"m9k6hf\"></a>9、请设计一个一百亿的计算器\n这种问题就是想问你对long的表示范围的了解，10^10=(2^10)^10超过了long的表示范围，可以使用biginteger直接使用。如果非要实现可以将其保存为String 然后单个符号位进行计算。\n\n### <a name=\"yh0orl\"></a>10、使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\n使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：\nfinal StringBuffer a=new StringBuffer(\"immutable\");\n执行如下语句将报告编译期错误：a=new StringBuffer(\"\");\n但是，执行如下语句则可以通过编译： a.append(\" broken!\");  \n\n```java\n    @Test\n    public void test5(){\n        final StringBuffer a = new StringBuffer(\"immutable\");\n//虽然不可以被重新赋值，但是可以进行添加元素；可以简单的理解为不可变指针数组追加元素问题。\n//        a = new StringBuffer(\"\");\n        a.append(\" broken!\");\n    }\n```\n\n\n\n",
    "body_html": "<h3 id=\"fawvpg\"><a href=\"#fawvpg\"></a>1、一个&quot;.java&quot;源文件中是否可以包括多个类（不是内部类）？有什么限制？</h3><p>可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。</p><h3 id=\"6fltra\"><a href=\"#6fltra\"></a>2、Java有没有goto?</h3><p>java中的保留字，现在没有在java中使用。（可以明确的说现在使用的人就是有病）</p><p><br /></p><h3 id=\"hromhu\"><a href=\"#hromhu\"></a>3、说说&amp;和&amp;&amp;的区别。</h3><p>&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。</p><p>&amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str != null &amp;&amp; !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&amp;&amp;改为&amp;，则会抛出NullPointerException异常。If(x==33 &amp; ++y&gt;0) y会增长，If(x==33 &amp;&amp; ++y&gt;0)不会增长。</p><p>&amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作，我们通常使用0x0f来与一个整数进行&amp;运算，来获取该整数的最低4个bit位，例如，0x31 &amp; 0x0f的结果为0x01。</p><p><br /></p><h3 id=\"9o55hz\"><a href=\"#9o55hz\"></a>4、在JAVA中如何跳出当前的多重嵌套循环？</h3><p>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。另外，我个人通常并不使用标号这种方式，而是让外层的循环条件表达式的结果可以受到里层循环体代码的控制。</p><pre data-lang=\"java\"><code>@Test\n    public void test2(){\n        boolean a = false;\n        ok:{\n            for(int i=0;i&lt;10;i++){\n                if(i==5){\n                    break ok;\n                }\n                System.out.println(i);\n            }\n        }\n    }\n\n    @Test\n    public void test3(){\n        boolean a = true;\n            for(int i=0;i&lt;10&amp;&amp;a;i++){\n                if(i==5){\n                    a = false;\n                }\n                System.out.println(i);\n            }\n    }</code></pre><p><br /></p><p><br /></p><h3 id=\"oqsnsg\"><a href=\"#oqsnsg\"></a>5、switch语句能否作用在byte上，能否作用在long上，能否作用在String上?</h3><p>在switch（expr1）中，expr1只能是一个整数表达式或者枚举常量（更大字体），整数表达式可以是int基本类型或Integer包装类型，由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。显然，long类型不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它不能作用于swtich语句中。</p><pre data-lang=\"java\"><code>public static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        System.out.print(&quot;请输入一个学生的成绩：&quot;);\n        String score = sc.next();\n        String level=&quot;&quot;;//等级\n        switch(score){\n            case &quot;A&quot;:level=&quot;90-100&quot;;break;\n            case &quot;B&quot;:level=&quot;80-89&quot;;break;\n            case &quot;C&quot;:level=&quot;70-79&quot;;break;\n            case &quot;D&quot;:level=&quot;60-69&quot;;break;\n            case &quot;E&quot;:level=&quot;0-59&quot;;break;\n            default :level=&quot;error&quot;;break;\n        }\n        System.out.println(&quot;您的成绩对应的等级是：&quot;+level);\n    }</code></pre><p><br /></p><p>1.switch后面的(),里面返回的是一个具体的数值：byte ,short,char ,int ,jdk1.5增加了枚举；JDK 1.7之后 可以是String</p><p>2.这个数值会依次跟case后面的数值进行比较，只要满足就执行后面的代码，直到遇到break结束</p><p>3.在每个分支后面要加上一个关键字break</p><p>4.default就是一个备胎的作用。其余的分支假如都没有走，那么一定会走default里面的代码。（类似if多分钟中的else结构）</p><p>default可以写在任意的位置上，但是要写break结束语句。</p><p>假如放在最后一行，break可以省略不写。（建议写在最后一行--可读性好）</p><p>5.switch能解决的，if都能解决，if能解决的 switch不一定能解决。</p><p><br /></p><h3 id=\"u8ttcv\"><a href=\"#u8ttcv\"></a>6、short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?</h3><p>对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。</p><p>对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。</p><pre data-lang=\"java\"><code>public void test4(){\n    short s1 = 1;\n    s1 = s1 + 1;\n}</code></pre><p><br /></p><p>\u0000</p><h3 id=\"1hqagi\"><a href=\"#1hqagi\"></a>7.char型变量中能不能存贮一个中文汉字(双字符)?为什么?</h3><p>char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。</p><p><br /></p><h3 id=\"l2omtt\"><a href=\"#l2omtt\"></a>8、用最有效率的方法算出2乘以8等于几?</h3><p>8 &lt;&lt; 1</p><p><br /></p><h3 id=\"m9k6hf\"><a href=\"#m9k6hf\"></a>9、请设计一个一百亿的计算器</h3><p>这种问题就是想问你对long的表示范围的了解，10^10=(2^10)^10超过了long的表示范围，可以使用biginteger直接使用。如果非要实现可以将其保存为String 然后单个符号位进行计算。</p><p><br /></p><h3 id=\"yh0orl\"><a href=\"#yh0orl\"></a>10、使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</h3><p>使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：</p><p>final StringBuffer a=new StringBuffer(&quot;immutable&quot;);</p><p>执行如下语句将报告编译期错误：a=new StringBuffer(&quot;&quot;);</p><p>但是，执行如下语句则可以通过编译： a.append(&quot; broken!&quot;);  </p><p><br /></p><pre data-lang=\"java\"><code>@Test\n    public void test5(){\n        final StringBuffer a = new StringBuffer(&quot;immutable&quot;);\n//虽然不可以被重新赋值，但是可以进行添加元素；可以简单的理解为不可变指针数组追加元素问题。\n//        a = new StringBuffer(&quot;&quot;);\n        a.append(&quot; broken!&quot;);\n    }</code></pre><p><br /></p><p><br /></p><p><br /></p>",
    "body_lake": "<!doctype lake><h3 id=\"fawvpg\"><a href=\"#fawvpg\" id=\"1、一个-.java-源文件中是否可以包括多个类（不是内部类）？有什么限制？\"></a>1、一个&quot;.java&quot;源文件中是否可以包括多个类（不是内部类）？有什么限制？</h3><p>可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。</p><h3 id=\"6fltra\"><a href=\"#6fltra\" id=\"2、java有没有goto?\"></a>2、Java有没有goto?</h3><p>java中的保留字，现在没有在java中使用。（可以明确的说现在使用的人就是有病）</p><p><br /></p><h3 id=\"hromhu\"><a href=\"#hromhu\" id=\"3、说说&和&&的区别。\"></a>3、说说&amp;和&amp;&amp;的区别。</h3><p>&amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。</p><p>&amp;&amp;还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str != null &amp;&amp; !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&amp;&amp;改为&amp;，则会抛出NullPointerException异常。If(x==33 &amp; ++y&gt;0) y会增长，If(x==33 &amp;&amp; ++y&gt;0)不会增长。</p><p>&amp;还可以用作位运算符，当&amp;操作符两边的表达式不是boolean类型时，&amp;表示按位与操作，我们通常使用0x0f来与一个整数进行&amp;运算，来获取该整数的最低4个bit位，例如，0x31 &amp; 0x0f的结果为0x01。</p><p><br /></p><h3 id=\"9o55hz\"><a href=\"#9o55hz\" id=\"4、在java中如何跳出当前的多重嵌套循环？\"></a>4、在JAVA中如何跳出当前的多重嵌套循环？</h3><p>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。另外，我个人通常并不使用标号这种方式，而是让外层的循环条件表达式的结果可以受到里层循环体代码的控制。</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22334f93c6%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Test%5Cn%20%20%20%20public%20void%20test2()%7B%5Cn%20%20%20%20%20%20%20%20boolean%20a%20%3D%20false%3B%5Cn%20%20%20%20%20%20%20%20ok%3A%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for(int%20i%3D0%3Bi%3C10%3Bi%2B%2B)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D5)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20break%20ok%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(i)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test3()%7B%5Cn%20%20%20%20%20%20%20%20boolean%20a%20%3D%20true%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for(int%20i%3D0%3Bi%3C10%26%26a%3Bi%2B%2B)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(i%3D%3D5)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20a%20%3D%20false%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(i)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%22%7D\"></card><p><br /></p><p><br /></p><h3 id=\"oqsnsg\"><a href=\"#oqsnsg\" id=\"5、switch语句能否作用在byte上，能否作用在long上，能否作用在string上?\"></a>5、switch语句能否作用在byte上，能否作用在long上，能否作用在String上?</h3><p>在switch（expr1）中，expr1只能是一个整数表达式或者枚举常量（更大字体），整数表达式可以是int基本类型或Integer包装类型，由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。显然，long类型不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它不能作用于swtich语句中。</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fb947fa6%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20static%20void%20main(String%5B%5D%20args)%7B%5Cn%20%20%20%20%20%20%20%20Scanner%20sc%3Dnew%20Scanner(System.in)%3B%5Cn%20%20%20%20%20%20%20%20System.out.print(%5C%22%E8%AF%B7%E8%BE%93%E5%85%A5%E4%B8%80%E4%B8%AA%E5%AD%A6%E7%94%9F%E7%9A%84%E6%88%90%E7%BB%A9%EF%BC%9A%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20String%20score%20%3D%20sc.next()%3B%5Cn%20%20%20%20%20%20%20%20String%20level%3D%5C%22%5C%22%3B%2F%2F%E7%AD%89%E7%BA%A7%5Cn%20%20%20%20%20%20%20%20switch(score)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20case%20%5C%22A%5C%22%3Alevel%3D%5C%2290-100%5C%22%3Bbreak%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20case%20%5C%22B%5C%22%3Alevel%3D%5C%2280-89%5C%22%3Bbreak%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20case%20%5C%22C%5C%22%3Alevel%3D%5C%2270-79%5C%22%3Bbreak%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20case%20%5C%22D%5C%22%3Alevel%3D%5C%2260-69%5C%22%3Bbreak%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20case%20%5C%22E%5C%22%3Alevel%3D%5C%220-59%5C%22%3Bbreak%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20default%20%3Alevel%3D%5C%22error%5C%22%3Bbreak%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E6%82%A8%E7%9A%84%E6%88%90%E7%BB%A9%E5%AF%B9%E5%BA%94%E7%9A%84%E7%AD%89%E7%BA%A7%E6%98%AF%EF%BC%9A%5C%22%2Blevel)%3B%5Cn%20%20%20%20%7D%22%7D\"></card><p><br /></p><p>1.switch后面的(),里面返回的是一个具体的数值：byte ,short,char ,int ,jdk1.5增加了枚举；JDK 1.7之后 可以是String</p><p>2.这个数值会依次跟case后面的数值进行比较，只要满足就执行后面的代码，直到遇到break结束</p><p>3.在每个分支后面要加上一个关键字break</p><p>4.default就是一个备胎的作用。其余的分支假如都没有走，那么一定会走default里面的代码。（类似if多分钟中的else结构）</p><p>default可以写在任意的位置上，但是要写break结束语句。</p><p>假如放在最后一行，break可以省略不写。（建议写在最后一行--可读性好）</p><p>5.switch能解决的，if都能解决，if能解决的 switch不一定能解决。</p><p><br /></p><h3 id=\"u8ttcv\"><a href=\"#u8ttcv\" id=\"6、short-s1-=-1;-s1-=-s1-+-1;有什么错?-short-s1-=-1;-s1-+=-1;有什么错?\"></a>6、short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?</h3><p>对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。</p><p>对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%228d7320fa%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20void%20test4()%7B%5Cn%20%20%20%20short%20s1%20%3D%201%3B%5Cn%20%20%20%20s1%20%3D%20s1%20%2B%201%3B%5Cn%7D%22%7D\"></card><p><br /></p><p>\u0000</p><h3 id=\"1hqagi\"><a href=\"#1hqagi\" id=\"7.char型变量中能不能存贮一个中文汉字(双字符)?为什么?\"></a>7.char型变量中能不能存贮一个中文汉字(双字符)?为什么?</h3><p>char型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。</p><p><br /></p><h3 id=\"l2omtt\"><a href=\"#l2omtt\" id=\"8、用最有效率的方法算出2乘以8等于几?\"></a>8、用最有效率的方法算出2乘以8等于几?</h3><p>8 &lt;&lt; 1</p><p><br /></p><h3 id=\"m9k6hf\"><a href=\"#m9k6hf\" id=\"9、请设计一个一百亿的计算器\"></a>9、请设计一个一百亿的计算器</h3><p>这种问题就是想问你对long的表示范围的了解，10^10=(2^10)^10超过了long的表示范围，可以使用biginteger直接使用。如果非要实现可以将其保存为String 然后单个符号位进行计算。</p><p><br /></p><h3 id=\"yh0orl\"><a href=\"#yh0orl\" id=\"10、使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\"></a>10、使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</h3><p>使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：</p><p>final StringBuffer a=new StringBuffer(&quot;immutable&quot;);</p><p>执行如下语句将报告编译期错误：a=new StringBuffer(&quot;&quot;);</p><p>但是，执行如下语句则可以通过编译： a.append(&quot; broken!&quot;);  </p><p><br /></p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22c8f7448a%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Test%5Cn%20%20%20%20public%20void%20test5()%7B%5Cn%20%20%20%20%20%20%20%20final%20StringBuffer%20a%20%3D%20new%20StringBuffer(%5C%22immutable%5C%22)%3B%5Cn%2F%2F%E8%99%BD%E7%84%B6%E4%B8%8D%E5%8F%AF%E4%BB%A5%E8%A2%AB%E9%87%8D%E6%96%B0%E8%B5%8B%E5%80%BC%EF%BC%8C%E4%BD%86%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E6%B7%BB%E5%8A%A0%E5%85%83%E7%B4%A0%EF%BC%9B%E5%8F%AF%E4%BB%A5%E7%AE%80%E5%8D%95%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%BA%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84%E8%BF%BD%E5%8A%A0%E5%85%83%E7%B4%A0%E9%97%AE%E9%A2%98%E3%80%82%5Cn%2F%2F%20%20%20%20%20%20%20%20a%20%3D%20new%20StringBuffer(%5C%22%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20a.append(%5C%22%20broken!%5C%22)%3B%5Cn%20%20%20%20%7D%22%7D\"></card><p><br /></p><p><br /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-12T13:22:24.000Z",
    "deleted_at": null,
    "created_at": "2018-11-12T12:17:36.000Z",
    "updated_at": "2018-11-12T13:22:24.000Z",
    "published_at": "2018-11-12T13:22:24.000Z",
    "first_published_at": null,
    "word_count": 1558,
    "cover": null,
    "description": "1、一个&quot;.java&quot;源文件中是否可以包括多个类（不是内部类）？有什么限制？可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。2、Java有没有goto?java中的保留字，现在没有在java中使用。（可以明确的说现在使用的人就是有病）3...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 949130,
    "slug": "qupcc5",
    "title": "idea 内存限制更改",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "最近写安卓项目，内存经常爆。但是本机内存还是没有被吃满。<br />解决方法如下：<br />我猜是内存不够用了，就网上搜了一下修改idea的内存设置。\n\n方法如下：\n\n选中IntelliJ IDEA 14.app(这里的版本可以忽略), 然后右击 点击 “显示包内容”，在bin目录下找到idea.vmoptions并打开:\n\n如图：<br />![](https://cdn.nlark.com/yuque/0/2018/png/190217/1541560315373-df0391ff-120e-486a-ab1f-67b3a29058b2.png#width=747)\n\n![](https://cdn.nlark.com/yuque/0/2018/png/190217/1541560334967-ba857dbf-50f3-4e33-b122-8df00fc53097.png#width=747)\n\n\n打开后，把内容修改为：\n\n| ```\n-Xms40m  \n-Xmx2028m  \n-XX:PermSize=128M   \n-XX:MaxPermSize=1024m  \n-XX:ReservedCodeCacheSize=700m  \n-XX:+UseCompressedOops\n```\n |\n| --- |\n\n\n",
    "body_draft": "最近写安卓项目，内存经常爆。但是本机内存还是没有被吃满。\n解决方法如下：\n我猜是内存不够用了，就网上搜了一下修改idea的内存设置。\n\n方法如下：\n\n选中IntelliJ IDEA 14.app(这里的版本可以忽略), 然后右击 点击 “显示包内容”，在bin目录下找到idea.vmoptions并打开:\n\n如图：\n\n\n![image.png | left | 747x373](https://cdn.nlark.com/yuque/0/2018/png/190217/1541560315373-df0391ff-120e-486a-ab1f-67b3a29058b2.png \"\")\n\n\n\n\n![image.png | left | 747x242](https://cdn.nlark.com/yuque/0/2018/png/190217/1541560334967-ba857dbf-50f3-4e33-b122-8df00fc53097.png \"\")\n\n\n\n打开后，把内容修改为：\n\n<div class=\"bi-table\">\n  <table>\n    <colgroup>\n      <col width=\"700px\" />\n    </colgroup>\n    <tbody>\n      <tr>\n        <td rowspan=\"1\" colSpan=\"1\"><pre data-syntax=\"\"><code class=\"language-\">-Xms40m  \n-Xmx2028m  \n-XX:PermSize=128M   \n-XX:MaxPermSize=1024m  \n-XX:ReservedCodeCacheSize=700m  \n-XX:+UseCompressedOops\n</code></pre></td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n\n",
    "body_html": "<p>最近写安卓项目，内存经常爆。但是本机内存还是没有被吃满。</p><p>解决方法如下：</p><p>我猜是内存不够用了，就网上搜了一下修改idea的内存设置。</p><p><br /></p><p>方法如下：</p><p><br /></p><p>选中IntelliJ IDEA 14.app(这里的版本可以忽略), 然后右击 点击 “显示包内容”，在bin目录下找到idea.vmoptions并打开:</p><p><br /></p><p>如图：</p><p><img src=\"https://cdn.nlark.com/yuque/0/2018/png/190217/1541560315373-df0391ff-120e-486a-ab1f-67b3a29058b2.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br /></p><p><img src=\"https://cdn.nlark.com/yuque/0/2018/png/190217/1541560334967-ba857dbf-50f3-4e33-b122-8df00fc53097.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><p><br /></p><p><br /></p><p>打开后，把内容修改为：</p><table class=\"lake-table\" style=\"width: 750px;\"><colgroup><col width=\"750\"></col></colgroup><tbody><tr><td><pre><code>-Xms40m  \n-Xmx2028m  \n-XX:PermSize=128M   \n-XX:MaxPermSize=1024m  \n-XX:ReservedCodeCacheSize=700m  \n-XX:+UseCompressedOops</code></pre></td></tr></tbody></table><p><br /></p>",
    "body_lake": "<!doctype lake><p>最近写安卓项目，内存经常爆。但是本机内存还是没有被吃满。</p><p>解决方法如下：</p><p>我猜是内存不够用了，就网上搜了一下修改idea的内存设置。</p><p><br /></p><p>方法如下：</p><p><br /></p><p>选中IntelliJ IDEA 14.app(这里的版本可以忽略), 然后右击 点击 “显示包内容”，在bin目录下找到idea.vmoptions并打开:</p><p><br /></p><p>如图：</p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2018%2Fpng%2F190217%2F1541560315373-df0391ff-120e-486a-ab1f-67b3a29058b2.png%22%2C%22width%22%3A747%7D\"></card></p><p><br /></p><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2018%2Fpng%2F190217%2F1541560334967-ba857dbf-50f3-4e33-b122-8df00fc53097.png%22%2C%22width%22%3A747%7D\"></card></p><p><br /></p><p><br /></p><p>打开后，把内容修改为：</p><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%228d0f7cb6%22%2C%22rows%22%3A1%2C%22cols%22%3A1%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22750%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%3E%3Ctd%3E%3Ccard%20type%3D%5C%22block%5C%22%20name%3D%5C%22codeblock%5C%22%20value%3D%5C%22data%3A%257B%2522id%2522%253A%252293f69de0%2522%252C%2522code%2522%253A%2522-Xms40m%2520%2520%255Cn-Xmx2028m%2520%2520%255Cn-XX%253APermSize%253D128M%2520%2520%2520%255Cn-XX%253AMaxPermSize%253D1024m%2520%2520%255Cn-XX%253AReservedCodeCacheSize%253D700m%2520%2520%255Cn-XX%253A%252BUseCompressedOops%2522%257D%5C%22%3E%3C%2Fcard%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-07T03:12:21.000Z",
    "deleted_at": null,
    "created_at": "2018-11-06T15:23:41.000Z",
    "updated_at": "2018-11-07T03:12:21.000Z",
    "published_at": "2018-11-07T03:12:21.000Z",
    "first_published_at": null,
    "word_count": 118,
    "cover": null,
    "description": "最近写安卓项目，内存经常爆。但是本机内存还是没有被吃满。解决方法如下：我猜是内存不够用了，就网上搜了一下修改idea的内存设置。方法如下：选中IntelliJ IDEA 14.app(这里的版本可以忽略), 然后右击 点击 “显示包内容”，在bin目录下找到idea.vmoptions并打开:如图：...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 945623,
    "slug": "bmz6nq",
    "title": "Java 小抄（一）",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "之所以把这个文档叫做小抄的原因，是因为这个文档很杂碎，很小的知识点。\n```java\n#今天看到个东西，🤦‍♂️\nSystem.cout.println();\n#注意这是cout。报错没有这个方法\nString st = \" world\";\nst.concat(\"hello\");\n#注意这个方法返回的是concat会创建一个新的对象，新对象的内容是\"hello world\";\nSystem.out.println(st);\n#结果是 world\n```\n\n做题做到了这个题，虽然自己知道结果是什么但是忽然想到{}代码块的时候输出顺序是什么！\n```java\n@Test\n    public void test1(){\n        A a = new B();\n        a=new B();\n\nclass A{\n    static {\n        System.out.println(\"1\");\n    }\n    public A(){\n        System.out.println(\"A\");\n    }\n    {\n        System.out.println(\"a\");\n    }\n}\n\nclass B extends A{\n    static {//静态语块\n        System.out.println(\"2\");\n    }\n    public B(){//构造函数\n        System.out.println(\"B\");\n    }\n    {//构造语块\n        System.out.println(\"b\");\n    }\n}\n```\n虽然这个题很无聊，但是自己还是做的含糊不清。尤其是第二次 a = new B()的时候；发现自己对于这里掌握不是很好。查了一下需要有很多改进的地方。第一静态变量只会加载一次 仅仅是静态加载一次。<br />class B extends A 优先加载两个方法中的静态方法，然后加载静态代码块。<br />总结是优先级：1.静态语块（从父到子）。2.构造语块。3.构造函数\n",
    "body_draft": "之所以把这个文档叫做小抄的原因，是因为这个文档很杂碎，很小的知识点。\n```java\n#今天看到个东西，🤦‍♂️\nSystem.cout.println();\n#注意这是cout。报错没有这个方法\nString st = \" world\";\nst.concat(\"hello\");\n#注意这个方法返回的是concat会创建一个新的对象，新对象的内容是\"hello world\";\nSystem.out.println(st);\n#结果是 world\n```\n\n做题做到了这个题，虽然自己知道结果是什么但是忽然想到{}代码块的时候输出顺序是什么！\n```java\n    @Test\n    public void test1(){\n        A a = new B();\n        a=new B();\n\nclass A{\n    static {\n        System.out.println(\"1\");\n    }\n    public A(){\n        System.out.println(\"A\");\n    }\n    {\n        System.out.println(\"a\");\n    }\n}\n\nclass B extends A{\n    static {//静态语块\n        System.out.println(\"2\");\n    }\n    public B(){//构造函数\n        System.out.println(\"B\");\n    }\n    {//构造语块\n        System.out.println(\"b\");\n    }\n}\n```\n虽然这个题很无聊，但是自己还是做的含糊不清。尤其是第二次 a = new B()的时候；发现自己对于这里掌握不是很好。查了一下需要有很多改进的地方。第一静态变量只会加载一次 仅仅是静态加载一次。\nclass B extends A 优先加载两个方法中的静态方法，然后加载静态代码块。\n总结是优先级：1.静态语块（从父到子）。2.构造语块。3.构造函数\n",
    "body_html": "<p>之所以把这个文档叫做小抄的原因，是因为这个文档很杂碎，很小的知识点。</p><pre data-lang=\"java\"><code>#今天看到个东西，🤦‍♂️\nSystem.cout.println();\n#注意这是cout。报错没有这个方法\nString st = &quot; world&quot;;\nst.concat(&quot;hello&quot;);\n#注意这个方法返回的是concat会创建一个新的对象，新对象的内容是&quot;hello world&quot;;\nSystem.out.println(st);\n#结果是 world</code></pre><p><br /></p><p>做题做到了这个题，虽然自己知道结果是什么但是忽然想到{}代码块的时候输出顺序是什么！</p><pre data-lang=\"java\"><code>@Test\n    public void test1(){\n        A a = new B();\n        a=new B();\n\nclass A{\n    static {\n        System.out.println(&quot;1&quot;);\n    }\n    public A(){\n        System.out.println(&quot;A&quot;);\n    }\n    {\n        System.out.println(&quot;a&quot;);\n    }\n}\n\nclass B extends A{\n    static {//静态语块\n        System.out.println(&quot;2&quot;);\n    }\n    public B(){//构造函数\n        System.out.println(&quot;B&quot;);\n    }\n    {//构造语块\n        System.out.println(&quot;b&quot;);\n    }\n}</code></pre><p>虽然这个题很无聊，但是自己还是做的含糊不清。尤其是第二次 a = new B()的时候；发现自己对于这里掌握不是很好。查了一下需要有很多改进的地方。第一静态变量只会加载一次 仅仅是静态加载一次。</p><p>class B extends A 优先加载两个方法中的静态方法，然后加载静态代码块。</p><p>总结是优先级：1.静态语块（从父到子）。2.构造语块。3.构造函数</p>",
    "body_lake": "<!doctype lake><p>之所以把这个文档叫做小抄的原因，是因为这个文档很杂碎，很小的知识点。</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%227cabfbfe%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%23%E4%BB%8A%E5%A4%A9%E7%9C%8B%E5%88%B0%E4%B8%AA%E4%B8%9C%E8%A5%BF%EF%BC%8C%F0%9F%A4%A6%E2%80%8D%E2%99%82%EF%B8%8F%5CnSystem.cout.println()%3B%5Cn%23%E6%B3%A8%E6%84%8F%E8%BF%99%E6%98%AFcout%E3%80%82%E6%8A%A5%E9%94%99%E6%B2%A1%E6%9C%89%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%5CnString%20st%20%3D%20%5C%22%20world%5C%22%3B%5Cnst.concat(%5C%22hello%5C%22)%3B%5Cn%23%E6%B3%A8%E6%84%8F%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AFconcat%E4%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%96%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AE%B9%E6%98%AF%5C%22hello%20world%5C%22%3B%5CnSystem.out.println(st)%3B%5Cn%23%E7%BB%93%E6%9E%9C%E6%98%AF%20world%22%7D\"></card><p><br /></p><p>做题做到了这个题，虽然自己知道结果是什么但是忽然想到{}代码块的时候输出顺序是什么！</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22077eca23%22%2C%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Test%5Cn%20%20%20%20public%20void%20test1()%7B%5Cn%20%20%20%20%20%20%20%20A%20a%20%3D%20new%20B()%3B%5Cn%20%20%20%20%20%20%20%20a%3Dnew%20B()%3B%5Cn%5Cnclass%20A%7B%5Cn%20%20%20%20static%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%221%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20public%20A()%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22A%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22a%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cnclass%20B%20extends%20A%7B%5Cn%20%20%20%20static%20%7B%2F%2F%E9%9D%99%E6%80%81%E8%AF%AD%E5%9D%97%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%222%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20public%20B()%7B%2F%2F%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22B%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%7B%2F%2F%E6%9E%84%E9%80%A0%E8%AF%AD%E5%9D%97%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22b%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%7D\"></card><p>虽然这个题很无聊，但是自己还是做的含糊不清。尤其是第二次 a = new B()的时候；发现自己对于这里掌握不是很好。查了一下需要有很多改进的地方。第一静态变量只会加载一次 仅仅是静态加载一次。</p><p>class B extends A 优先加载两个方法中的静态方法，然后加载静态代码块。</p><p>总结是优先级：1.静态语块（从父到子）。2.构造语块。3.构造函数</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-06T01:54:31.000Z",
    "deleted_at": null,
    "created_at": "2018-11-05T12:24:15.000Z",
    "updated_at": "2018-11-06T01:54:31.000Z",
    "published_at": "2018-11-06T01:54:31.000Z",
    "first_published_at": null,
    "word_count": 348,
    "cover": null,
    "description": "之所以把这个文档叫做小抄的原因，是因为这个文档很杂碎，很小的知识点。#今天看到个东西，🤦‍♂️ System.cout.println(); #注意这是cout。报错没有这个方法 String st = &quot; world&quot;; st.concat(&quot;hello&quot;...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 921938,
    "slug": "ywrddy",
    "title": "数据结构",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"b2q2ih\"></a>\n## [](#b2q2ih)1.数据结构定义\n数据结构是什么？网络上的一些定义十分抽象，且各不相同，学完之后，反而对数据结构的概念更加模糊、更有敬畏之心。数据结构是指逻辑意义上的数据组织方式及其相应的处理方式。\n\n<a name=\"1rlmbn\"></a>\n# [](#1rlmbn)2.数据结构分类\n数据结构是算法的实现基石，它是一种体现基础逻辑思维的内功心法，也是计算机从业人员能力图谱中 的重要一环。若果不懂数据结构，很难写出优秀的代码。有缺陷的底层数据结构容易导致系统高风险、扩展性差，所以需要认真的对数据结构进行设计和审评。从直接前继和最直接后继个数维度来看，大体上可以将数据结构分为以下四种办法。\n```\n1.线性结构\n2.树结构\n3.图结构\n4.哈希结构\n```\n<a name=\"g3a3ly\"></a>\n### [](#g3a3ly)1.线性结构：\n0至1直接前继和直接后继。当线性结构非空时，有唯一的首元素和未元素。当线性结构非空时，有唯一的首元素与未元素，除两者之外，所有的元素都有唯一的直接前继和直接的后继。线性结构包含顺序表，链表，栈，队列等，其中栈和队列是访问受限结构。栈是后进先出，即Last-in,First-Out 简称LIFO；队列是先进先出，即FIrst-In，FIrst-Out，简称FIFO\n<a name=\"taqfbu\"></a>\n### [](#taqfbu)2.树结构：\n0至1个直接前继和0至n个后继（n大于等于2）。树是一种非常重要的有层次的的非线性数据结构，想自然的树一样。由于树结构比较稳定和均衡，在计算机中有广泛的应用。\n<a name=\"6rywkf\"></a>\n### [](#6rywkf)3.图结构：\n0至n个直接前继和后继（n大雨等于2）。图结构包括简单图、多重图、有向图和无向图等。\n<a name=\"wty9py\"></a>\n### [](#wty9py)4.哈希结构：\n0至n个直接前继和直接后继。哈希通过某种特定的哈希函数将索引与存储值关系关联起来，他是一种查找效率非常高的数据结构。\n\n算法耗能排序：常数级O（1）、对数级O（logn）、线性级O（n）、线性对数级O（nlogn）、平方级O（n^2）、立方级O（n^3）、指数级O（2^n）等\n\n在设计程序的时候应该考虑随着数据规模的增长，程序的性能不应该有很大的起伏。\n\n\n",
    "body_draft": "## <a name=\"b2q2ih\"></a>1.数据结构定义\n数据结构是什么？网络上的一些定义十分抽象，且各不相同，学完之后，反而对数据结构的概念更加模糊、更有敬畏之心。数据结构是指<span data-type=\"color\" style=\"color:#F5222D\">逻辑意义</span>上的<span data-type=\"color\" style=\"color:#F5222D\">数据组织方</span>式及其相应的<span data-type=\"color\" style=\"color:#F5222D\">处理方式。</span>\n\n# <a name=\"1rlmbn\"></a>2.数据结构分类\n数据结构是算法的实现基石，它是一种体现基础逻辑思维的内功心法，也是计算机从业人员能力图谱中 的重要一环。若果不懂数据结构，很难写出优秀的代码。有缺陷的底层数据结构容易导致系统高风险、扩展性差，所以需要认真的对数据结构进行设计和审评。从直接前继和最直接后继个数维度来看，大体上可以将数据结构分为以下四种办法。\n```plain\n1.线性结构\n2.树结构\n3.图结构\n4.哈希结构\n```\n### <a name=\"g3a3ly\"></a>1.线性结构：\n0至1直接前继和直接后继。当线性结构非空时，有唯一的首元素和未元素。当线性结构非空时，有唯一的首元素与未元素，除两者之外，所有的元素都有唯一的直接前继和直接的后继。线性结构包含顺序表，链表，栈，队列等，其中栈和队列是访问受限结构。栈是后进先出，即Last-in,First-Out 简称LIFO；队列是先进先出，即FIrst-In，FIrst-Out，简称FIFO\n### <a name=\"taqfbu\"></a>2.树结构：\n0至1个直接前继和0至n个后继（n大于等于2）。树是一种非常重要的有层次的的非线性数据结构，想自然的树一样。由于树结构比较稳定和均衡，在计算机中有广泛的应用。\n### <a name=\"6rywkf\"></a>3.图结构：\n0至n个直接前继和后继（n大雨等于2）。图结构包括简单图、多重图、有向图和无向图等。\n### <a name=\"wty9py\"></a>4.哈希结构：\n0至n个直接前继和直接后继。哈希通过某种特定的哈希函数将索引与存储值关系关联起来，他是一种查找效率非常高的数据结构。\n\n算法耗能排序：常数级O（1）、对数级O（logn）、线性级O（n）、线性对数级O（nlogn）、平方级O（n^2）、立方级O（n^3）、指数级O（2^n）等\n\n在设计程序的时候应该考虑随着数据规模的增长，程序的性能不应该有很大的起伏。\n\n\n",
    "body_html": "<h2 id=\"b2q2ih\"><a href=\"#b2q2ih\"></a>1.数据结构定义</h2><p>数据结构是什么？网络上的一些定义十分抽象，且各不相同，学完之后，反而对数据结构的概念更加模糊、更有敬畏之心。数据结构是指<span style=\"color: #F5222D;\">逻辑意义</span>上的<span style=\"color: #F5222D;\">数据组织方</span>式及其相应的<span style=\"color: #F5222D;\">处理方式。</span></p><p><br /></p><h1 id=\"1rlmbn\"><a href=\"#1rlmbn\"></a>2.数据结构分类</h1><p>数据结构是算法的实现基石，它是一种体现基础逻辑思维的内功心法，也是计算机从业人员能力图谱中 的重要一环。若果不懂数据结构，很难写出优秀的代码。有缺陷的底层数据结构容易导致系统高风险、扩展性差，所以需要认真的对数据结构进行设计和审评。从直接前继和最直接后继个数维度来看，大体上可以将数据结构分为以下四种办法。</p><pre><code>1.线性结构\n2.树结构\n3.图结构\n4.哈希结构</code></pre><h3 id=\"g3a3ly\"><a href=\"#g3a3ly\"></a>1.线性结构：</h3><p>0至1直接前继和直接后继。当线性结构非空时，有唯一的首元素和未元素。当线性结构非空时，有唯一的首元素与未元素，除两者之外，所有的元素都有唯一的直接前继和直接的后继。线性结构包含顺序表，链表，栈，队列等，其中栈和队列是访问受限结构。栈是后进先出，即Last-in,First-Out 简称LIFO；队列是先进先出，即FIrst-In，FIrst-Out，简称FIFO</p><h3 id=\"taqfbu\"><a href=\"#taqfbu\"></a>2.树结构：</h3><p>0至1个直接前继和0至n个后继（n大于等于2）。树是一种非常重要的有层次的的非线性数据结构，想自然的树一样。由于树结构比较稳定和均衡，在计算机中有广泛的应用。</p><h3 id=\"6rywkf\"><a href=\"#6rywkf\"></a>3.图结构：</h3><p>0至n个直接前继和后继（n大雨等于2）。图结构包括简单图、多重图、有向图和无向图等。</p><h3 id=\"wty9py\"><a href=\"#wty9py\"></a>4.哈希结构：</h3><p>0至n个直接前继和直接后继。哈希通过某种特定的哈希函数将索引与存储值关系关联起来，他是一种查找效率非常高的数据结构。</p><p><br /></p><p>算法耗能排序：常数级O（1）、对数级O（logn）、线性级O（n）、线性对数级O（nlogn）、平方级O（n^2）、立方级O（n^3）、指数级O（2^n）等</p><p><br /></p><p>在设计程序的时候应该考虑随着数据规模的增长，程序的性能不应该有很大的起伏。</p><p><br /></p><p><br /></p>",
    "body_lake": "<!doctype lake><h2 id=\"b2q2ih\"><a href=\"#b2q2ih\" id=\"1.数据结构定义\"></a>1.数据结构定义</h2><p>数据结构是什么？网络上的一些定义十分抽象，且各不相同，学完之后，反而对数据结构的概念更加模糊、更有敬畏之心。数据结构是指<span style=\"color:#F5222D\">逻辑意义</span>上的<span style=\"color:#F5222D\">数据组织方</span>式及其相应的<span style=\"color:#F5222D\">处理方式。</span></p><p><br /></p><h1 id=\"1rlmbn\"><a href=\"#1rlmbn\" id=\"2.数据结构分类\"></a>2.数据结构分类</h1><p>数据结构是算法的实现基石，它是一种体现基础逻辑思维的内功心法，也是计算机从业人员能力图谱中 的重要一环。若果不懂数据结构，很难写出优秀的代码。有缺陷的底层数据结构容易导致系统高风险、扩展性差，所以需要认真的对数据结构进行设计和审评。从直接前继和最直接后继个数维度来看，大体上可以将数据结构分为以下四种办法。</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%221349d70d%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%221.%E7%BA%BF%E6%80%A7%E7%BB%93%E6%9E%84%5Cn2.%E6%A0%91%E7%BB%93%E6%9E%84%5Cn3.%E5%9B%BE%E7%BB%93%E6%9E%84%5Cn4.%E5%93%88%E5%B8%8C%E7%BB%93%E6%9E%84%22%7D\"></card><h3 id=\"g3a3ly\"><a href=\"#g3a3ly\" id=\"1.线性结构：\"></a>1.线性结构：</h3><p>0至1直接前继和直接后继。当线性结构非空时，有唯一的首元素和未元素。当线性结构非空时，有唯一的首元素与未元素，除两者之外，所有的元素都有唯一的直接前继和直接的后继。线性结构包含顺序表，链表，栈，队列等，其中栈和队列是访问受限结构。栈是后进先出，即Last-in,First-Out 简称LIFO；队列是先进先出，即FIrst-In，FIrst-Out，简称FIFO</p><h3 id=\"taqfbu\"><a href=\"#taqfbu\" id=\"2.树结构：\"></a>2.树结构：</h3><p>0至1个直接前继和0至n个后继（n大于等于2）。树是一种非常重要的有层次的的非线性数据结构，想自然的树一样。由于树结构比较稳定和均衡，在计算机中有广泛的应用。</p><h3 id=\"6rywkf\"><a href=\"#6rywkf\" id=\"3.图结构：\"></a>3.图结构：</h3><p>0至n个直接前继和后继（n大雨等于2）。图结构包括简单图、多重图、有向图和无向图等。</p><h3 id=\"wty9py\"><a href=\"#wty9py\" id=\"4.哈希结构：\"></a>4.哈希结构：</h3><p>0至n个直接前继和直接后继。哈希通过某种特定的哈希函数将索引与存储值关系关联起来，他是一种查找效率非常高的数据结构。</p><p><br /></p><p>算法耗能排序：常数级O（1）、对数级O（logn）、线性级O（n）、线性对数级O（nlogn）、平方级O（n^2）、立方级O（n^3）、指数级O（2^n）等</p><p><br /></p><p>在设计程序的时候应该考虑随着数据规模的增长，程序的性能不应该有很大的起伏。</p><p><br /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-11-05T12:23:53.000Z",
    "deleted_at": null,
    "created_at": "2018-10-26T12:28:31.000Z",
    "updated_at": "2018-11-05T12:23:53.000Z",
    "published_at": "2018-11-05T12:23:53.000Z",
    "first_published_at": null,
    "word_count": 641,
    "cover": null,
    "description": "1.数据结构定义数据结构是什么？网络上的一些定义十分抽象，且各不相同，学完之后，反而对数据结构的概念更加模糊、更有敬畏之心。数据结构是指逻辑意义上的数据组织方式及其相应的处理方式。2.数据结构分类数据结构是算法的实现基石，它是一种体现基础逻辑思维的内功心法，也是计算机从业人员能力图谱中 的重要一环。...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 921934,
    "slug": "pvg1uh",
    "title": "Java 集合类",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "",
    "body_draft": "",
    "body_html": "",
    "body_lake": "",
    "public": 1,
    "status": 0,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-10-26T12:27:13.000Z",
    "deleted_at": null,
    "created_at": "2018-10-26T12:27:13.000Z",
    "updated_at": "2018-10-26T12:27:40.000Z",
    "published_at": null,
    "first_published_at": null,
    "word_count": 0,
    "cover": null,
    "description": "",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 921819,
    "slug": "hfkeer",
    "title": "浅谈框架（一）",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"hvllnw\"></a>\n## [](#hvllnw)这两天有个面试题，开发中为什么要使用框架？\n个人理解框架：<br />个人认为框架是一种应用的半成品，别人已经为你写好了应用的大部分，自己只需要来复写宽家内部的一些类，来实现框架中现有的子类变成自己需要的。框架提供了一些工具类，和一些通用化组建，目的是为了便捷的让开发人员生产自己的系统。<br />使用框架，可以加快开发速度，也更便于模块化开发。因为使用框架可以重用代码，利于开发效率的提升。只要编码符合规范，就可以将代码封装好插入到框架系统中。\n\n<a name=\"9ayryv\"></a>\n## [](#9ayryv)框架的好处是什么？\n框架的好处，让我个人理解：<br />使用起来便捷简单，<br />让新手更快上手，<br />然产品更快的开发，<br />系统更加稳定，<br />程序更加安全。\n\n\n\n\n",
    "body_draft": "## <a name=\"hvllnw\"></a>这两天有个面试题，开发中为什么要使用框架？\n个人理解框架：\n个人认为框架是一种应用的半成品，别人已经为你写好了应用的大部分，自己只需要来复写宽家内部的一些类，来实现框架中现有的子类变成自己需要的。框架提供了一些工具类，和一些通用化组建，目的是为了便捷的让开发人员生产自己的系统。\n使用框架，可以加快开发速度，也更便于模块化开发。因为使用框架可以重用代码，利于开发效率的提升。只要编码符合规范，就可以将代码封装好插入到框架系统中。\n\n## <a name=\"9ayryv\"></a>框架的好处是什么？\n框架的好处，让我个人理解：\n使用起来便捷简单，\n让新手更快上手，\n然产品更快的开发，\n系统更加稳定，\n程序更加安全。\n\n\n\n\n",
    "body_html": "<h2 id=\"hvllnw\"><a href=\"#hvllnw\"></a>这两天有个面试题，开发中为什么要使用框架？</h2><p>个人理解框架：</p><p>个人认为框架是一种应用的半成品，别人已经为你写好了应用的大部分，自己只需要来复写宽家内部的一些类，来实现框架中现有的子类变成自己需要的。框架提供了一些工具类，和一些通用化组建，目的是为了便捷的让开发人员生产自己的系统。</p><p style=\"padding-left: 2em;\">使用框架，可以加快开发速度，也更便于模块化开发。因为使用框架可以重用代码，利于开发效率的提升。只要编码符合规范，就可以将代码封装好插入到框架系统中。</p><p><br /></p><h2 id=\"9ayryv\"><a href=\"#9ayryv\"></a>框架的好处是什么？</h2><p>框架的好处，让我个人理解：</p><p>使用起来便捷简单，</p><p>让新手更快上手，</p><p>然产品更快的开发，</p><p>系统更加稳定，</p><p>程序更加安全。</p><p><br /></p><p><br /></p><p><br /></p><p><br /></p>",
    "body_lake": "<!doctype lake><h2 id=\"hvllnw\"><a href=\"#hvllnw\" id=\"这两天有个面试题，开发中为什么要使用框架？\"></a>这两天有个面试题，开发中为什么要使用框架？</h2><p>个人理解框架：</p><p>个人认为框架是一种应用的半成品，别人已经为你写好了应用的大部分，自己只需要来复写宽家内部的一些类，来实现框架中现有的子类变成自己需要的。框架提供了一些工具类，和一些通用化组建，目的是为了便捷的让开发人员生产自己的系统。</p><p style=\"padding-left: 2em\">使用框架，可以加快开发速度，也更便于模块化开发。因为使用框架可以重用代码，利于开发效率的提升。只要编码符合规范，就可以将代码封装好插入到框架系统中。</p><p><br /></p><h2 id=\"9ayryv\"><a href=\"#9ayryv\" id=\"框架的好处是什么？\"></a>框架的好处是什么？</h2><p>框架的好处，让我个人理解：</p><p>使用起来便捷简单，</p><p>让新手更快上手，</p><p>然产品更快的开发，</p><p>系统更加稳定，</p><p>程序更加安全。</p><p><br /></p><p><br /></p><p><br /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-10-26T12:25:45.000Z",
    "deleted_at": null,
    "created_at": "2018-10-26T10:40:51.000Z",
    "updated_at": "2018-10-26T12:25:45.000Z",
    "published_at": "2018-10-26T12:25:45.000Z",
    "first_published_at": null,
    "word_count": 248,
    "cover": null,
    "description": "...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 919497,
    "slug": "selxsh",
    "title": "ARM架构与8086架构node.js的Bug记录",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "之前希望吧hexo在个人电脑上的更成文件目录放在树莓派服务器上继续开发，主要是为了写一个定时器，定时完成hexo服务器与yuque服务器之间的数据同步问题。昨天晚上进行数据同步过程中发现。在arm架构上进行数据同步工程中，hexo不能生成数据对应的网页。可能是架构问题，具体原因未知，先在此记录一下。\n\n在博客目录下的node环境依赖包下面hexo_server下的index.js中port可以更改端口号。\n\n",
    "body_draft": "之前希望吧hexo在个人电脑上的更成文件目录放在树莓派服务器上继续开发，主要是为了写一个定时器，定时完成hexo服务器与yuque服务器之间的数据同步问题。昨天晚上进行数据同步过程中发现。在arm架构上进行数据同步工程中，hexo不能生成数据对应的网页。可能是架构问题，具体原因未知，先在此记录一下。\n\n在博客目录下的node环境依赖包下面hexo\\_server下的index.js中port可以更改端口号。\n\n",
    "body_html": "<p style=\"padding-left: 2em;\">之前希望吧hexo在个人电脑上的更成文件目录放在树莓派服务器上继续开发，主要是为了写一个定时器，定时完成hexo服务器与yuque服务器之间的数据同步问题。昨天晚上进行数据同步过程中发现。在arm架构上进行数据同步工程中，hexo不能生成数据对应的网页。可能是架构问题，具体原因未知，先在此记录一下。</p><p><br /></p><p style=\"padding-left: 2em;\">在博客目录下的node环境依赖包下面hexo_server下的index.js中port可以更改端口号。</p><p><br /></p>",
    "body_lake": "<!doctype lake><p style=\"padding-left: 2em\">之前希望吧hexo在个人电脑上的更成文件目录放在树莓派服务器上继续开发，主要是为了写一个定时器，定时完成hexo服务器与yuque服务器之间的数据同步问题。昨天晚上进行数据同步过程中发现。在arm架构上进行数据同步工程中，hexo不能生成数据对应的网页。可能是架构问题，具体原因未知，先在此记录一下。</p><p><br /></p><p style=\"padding-left: 2em\">在博客目录下的node环境依赖包下面hexo_server下的index.js中port可以更改端口号。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-10-25T14:39:00.000Z",
    "deleted_at": null,
    "created_at": "2018-10-25T14:26:36.000Z",
    "updated_at": "2018-10-25T14:39:00.000Z",
    "published_at": "2018-10-25T14:39:00.000Z",
    "first_published_at": null,
    "word_count": 156,
    "cover": null,
    "description": "之前希望吧hexo在个人电脑上的更成文件目录放在树莓派服务器上继续开发，主要是为了写一个定时器，定时完成hexo服务器与yuque服务器之间的数据同步问题。昨天晚上进行数据同步过程中发现。在arm架构上进行数据同步工程中，hexo不能生成数据对应的网页。可能是架构问题，具体原因未知，先在此记录一下。在博客目录下的node环境依赖包下面hexo_server下的index.js中port可以更改端口号。",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 919285,
    "slug": "fgyt71",
    "title": "网络知识个人总结（一）",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "经典协议\n\n| 7层网络协议osi | 功能 | TCP/IP协议族 | 5层网络协议 |\n| --- | --- | --- | --- |\n| 物理层 | 以二进制数据在物理媒体上传输数据 | ISO2110，IEEE802，IEEE802.2.......... | 物理层 |\n| 数据链路层 | 传输地址的帧以及错误检测功能 | SLIP,CSLIP,PPP,MTU,ARP,RARP | 数据链路层 |\n| 网络层 | 为数据包选择路由 | IP,ICMP,OSPF,BGP,IGM,ARP,RARP | 网络层 |\n| 交换层（传输） | 提供端到端的接口 | TCP,UDP | 交换层 |\n| 会话层 | 解除或简历与别的接点的联系 |  |  |\n| 表示层 | 数据格式转换，代码转化，数据加密 |  |  |\n| 应用层 | 文件传输，电子邮件，文件服务，虚拟终端 | TFTP,HTTP,SNMP,FTP,SMTP,DNS,RIP,Telnet | 应用层 |\n\n<a name=\"ilhbks\"></a>\n## [](#ilhbks)状态码：\n| 1XX | 2XX | 3XX 重定向 | 4XX 客户端 | 5XX 服务器 |\n| --- | --- | --- | --- | --- |\n| 连接状态信息 | 200 连接ok | 301 永久重定向 | 400 错误请求 | 500 服务器遇到了一个未曾预料的状况 |\n|  |  | 302 临时重定向 | 401 访问代码存在异常，身份验证错误 |  |\n|  |  | 303 临时重定向 | 403 服务被拒绝 | 503 服务器正忙，无资源 |\n|  |  | 304 特定条件下临时重定向 | 404 未找到 | 504 网关超时 |\n|  |  | 307 临时重定向（POST方法） |  |  |\n\n\n<a name=\"havake\"></a>\n## [](#havake)VPN 全称为Virtual Private Network\nVPN 工作在第二层第三层上，第二层是[PPTP](https://baike.baidu.com/item/PPTP)（TCP1723）、[L2TP](https://baike.baidu.com/item/L2TP)（UDP:500 (isakmp)，UDP:4500 (nat-t)<br />UDP:1701 (l2tp)）第三层是[IPSec](https://baike.baidu.com/item/IPSec)（UDP:500 (isakmp)，UDP:4500 (nat-t)）<br />有NAT是500 无NAT是4500\n\n\n\n<a name=\"ntycfe\"></a>\n## [](#ntycfe)地址\nA类地址的第一组数字为1～126。注意，数字0和 127不作为A类地址，数字127保留给内部回送函数，而数字0则表示该地址是本地宿主机，不能传送。\n\n范围：1.0.0.1到126.255.255.254\n\nB类地址的第一组数字为128～191。\n\n范围：128.0.0.1到191.255.255.254\n\nC类地址的第一组数字为192～223。\n\n范围：192.0.0.1到223.255.255.254\n\n0.0.0.0 是 默认ip地址，是缺省ip 127.0.0.x 是回环地址\n<a name=\"8334sw\"></a>\n#### [](#8334sw)私有IP地址分类及范围。\n\nA类：10.0.0.1 – 10.255.255.254\n\nB类：172.16.0.1 – 172.31.255.254\n\nC类：192.168.0.1 – 192.168.255.25\n\n<a name=\"lpzark\"></a>\n## [](#lpzark)DHCP 动态主机配置协议（网络层）\nDHCP的端口号为67 UDP<br />DHCP 主要组成是由3个东东组成，第一个是DHCP服务器，第二个是DHCP客户端 第三个DHCP中继器。<br />配置：ip，子网掩码，网关。<br />DHCP 未分配地址是169.254.x.x\n<a name=\"wcp6tq\"></a>\n## [](#wcp6tq)VLAN 虚拟局域网\n逻辑划分网络<br />根据端口换分静态，根据ip划分，根据mac地址划分动态的<br />\n\n\n<a name=\"qkzivq\"></a>\n## [](#qkzivq)DNS 域名系统\nDNS查询方式：递归，非递归，迭代\n\n[顶级域名](https://www.baidu.com/s?wd=%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)：又叫[一级域名](https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)，一串字符串中间一个点隔开，例如baidu.com，这里说明一下，www.baidu.com不是[一级域名](https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)！！而是[二级域名](https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)！<br />[二级域名](https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)：实际上就是一个[一级域名](https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)以下的主机名，一串字符串中间两个“.”隔开，例如pan.baidu.com（\"pan\"就是主机名）。<br />[三级域名](https://www.baidu.com/s?wd=%E4%B8%89%E7%BA%A7%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)：[二级域名](https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)的[子域名](https://www.baidu.com/s?wd=%E5%AD%90%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)，特征是包含三个“.”，一般来说[三级域名](https://www.baidu.com/s?wd=%E4%B8%89%E7%BA%A7%E5%9F%9F%E5%90%8D&tn=SE_PcZhidaonwhc_ngpagmjz&rsv_dl=gh_pc_zhidao)都是免费的。\n\nFTP 文件传输系统 利用21,20端口<br />SFTP 基于SSH的文件传输端口 利用22端口<br />HTTP版本分为1.0/1.1(添加流水线解决并发)/2.0只用于HTTPS，加密\n\n在DNS中，主机名又称主机名.域名\n<a name=\"sop7xl\"></a>\n## [](#sop7xl)**TCP/IP协议**\n可以让不同主机，不同架构，不同系统之间互相通信\n",
    "body_draft": "经典协议\n\n| 7层网络协议osi | 功能 | TCP/IP协议族 | 5层网络协议 |\n| --- | --- | --- | --- |\n| 物理层 | 以二进制数据在物理媒体上传输数据 | ISO2110，IEEE802，IEEE802.2.......... | 物理层 |\n| 数据链路层 | 传输地址的帧以及错误检测功能 | SLIP,CSLIP,PPP,MTU,ARP,RARP | 数据链路层 |\n| 网络层 | 为数据包选择路由 | IP,ICMP,OSPF,BGP,IGM,ARP,RARP | 网络层 |\n| 交换层（传输） | 提供端到端的接口 | TCP,UDP | 交换层 |\n| 会话层 | 解除或简历与别的接点的联系 |  |  |\n| 表示层 | 数据格式转换，代码转化，数据加密 |  |  |\n| 应用层 | 文件传输，电子邮件，文件服务，虚拟终端 | TFTP,HTTP,SNMP,FTP,SMTP,DNS,RIP,Telnet | 应用层 |\n\n## <a name=\"ilhbks\"></a>状态码：\n\n| 1XX | 2XX | 3XX 重定向 | 4XX 客户端 | 5XX 服务器 |\n| --- | --- | --- | --- | --- |\n| 连接状态信息 | 200 连接ok | 301 永久重定向 | 400 错误请求 | 500 服务器遇到了一个未曾预料的状况 |\n|  |  | 302 临时重定向 | 401 访问代码存在异常，身份验证错误 |  |\n|  |  | 303 临时重定向 | 403 服务被拒绝 | 503 服务器正忙，无资源 |\n|  |  | 304 特定条件下临时重定向 | 404 未找到 | 504 网关超时 |\n|  |  | 307 临时重定向（POST方法） |  |  |\n\n\n## <a name=\"havake\"></a>VPN <span data-type=\"color\" style=\"color:rgb(79, 79, 79)\"><span data-type=\"background\" style=\"background-color:rgb(238, 240, 244)\">全称为Virtual Private Network</span></span>\nVPN 工作在第二层第三层上，第二层是[PPTP](https://baike.baidu.com/item/PPTP)（TCP1723）<span data-type=\"color\" style=\"color:rgb(51, 51, 51)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">、</span></span>[L2TP](https://baike.baidu.com/item/L2TP)（<span data-type=\"color\" style=\"color:rgb(51, 51, 51)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">UDP:500 (isakmp)，UDP:4500 (nat-t)</span></span>\n<span data-type=\"color\" style=\"color:rgb(51, 51, 51)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">UDP:1701 (l2tp)</span></span>）第三层是[IPSec](https://baike.baidu.com/item/IPSec)（<span data-type=\"color\" style=\"color:rgb(51, 51, 51)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">UDP:500 (isakmp)，UDP:4500 (nat-t)</span></span>）\n有NAT是500 无NAT是4500\n\n\n\n## <a name=\"ntycfe\"></a>地址\nA类地址的第一组数字为1～126。注意，数字0和 127不作为A类地址，数字127保留给内部回送函数，而数字0则表示该地址是本地宿主机，不能传送。\n\n范围：1.0.0.1到126.255.255.254\n\nB类地址的第一组数字为128～191。\n\n范围：128.0.0.1到191.255.255.254\n\nC类地址的第一组数字为192～223。\n\n范围：192.0.0.1到223.255.255.254\n\n0.0.0.0 是 默认ip地址，是缺省ip 127.0.0.x 是回环地址\n#### <a name=\"8334sw\"></a>私有IP地址分类及范围。\n\nA类：10.0.0.1 – 10.255.255.254\n\nB类：172.16.0.1 – 172.31.255.254\n\nC类：192.168.0.1 – 192.168.255.25\n\n## <a name=\"lpzark\"></a>DHCP 动态主机配置协议（网络层）\nDHCP的端口号为67 UDP\nDHCP 主要组成是由3个东东组成，第一个是DHCP服务器，第二个是DHCP客户端 第三个DHCP中继器。\n配置：ip，子网掩码，网关。\nDHCP 未分配地址是169.254.x.x\n## <a name=\"wcp6tq\"></a>VLAN <span data-type=\"color\" style=\"color:rgb(51, 51, 51)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">虚拟局域网</span></span>\n逻辑划分网络\n根据端口换分静态，根据ip划分，根据mac地址划分动态的\n\n\n## <a name=\"qkzivq\"></a><span data-type=\"color\" style=\"color:rgb(31, 73, 125)\">DNS 域名系统</span>\nDNS查询方式：递归，非递归，迭代\n\n[顶级域名](https://www.baidu.com/s?wd=%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)：又叫[一级域名](https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)，一串字符串中间一个点隔开，例如baidu.com，这里说明一下，www.baidu.com不是[一级域名](https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)！！而是[二级域名](https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)！\n[二级域名](https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)：实际上就是一个[一级域名](https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)以下的主机名，一串字符串中间两个“.”隔开，例如pan.baidu.com（\"pan\"就是主机名）。\n[三级域名](https://www.baidu.com/s?wd=%E4%B8%89%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)：[二级域名](https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)的[子域名](https://www.baidu.com/s?wd=%E5%AD%90%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)，特征是包含三个“.”，一般来说[三级域名](https://www.baidu.com/s?wd=%E4%B8%89%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao)都是免费的。\n\nFTP 文件传输系统 利用21,20端口\nSFTP 基于SSH的文件传输端口 利用22端口\nHTTP版本分为1.0/1.1(添加流水线解决并发)/2.0只用于HTTPS，加密\n\n<span data-type=\"color\" style=\"color:rgb(79, 79, 79)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">在DNS中，主机名又称主机名.域名</span></span>\n## <a name=\"sop7xl\"></a><span data-type=\"color\" style=\"color:rgb(79, 79, 79)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\"><strong>TCP/IP协议</strong></span></span>\n可以让不同主机，不同架构，不同系统之间互相通信\n",
    "body_html": "<p>经典协议</p><table class=\"lake-table\" style=\"width: 1067px;\"><colgroup><col width=\"131\"></col><col width=\"160\"></col><col width=\"339\"></col><col width=\"437\"></col></colgroup><tbody><tr><td><p>7层网络协议osi</p></td><td><p>功能</p></td><td><p>TCP/IP协议族</p></td><td><p>5层网络协议</p></td></tr><tr><td><p>物理层</p></td><td><p>以二进制数据在物理媒体上传输数据</p></td><td><p>ISO2110，IEEE802，IEEE802.2..........</p></td><td><p>物理层</p></td></tr><tr><td><p>数据链路层</p></td><td><p>传输地址的帧以及错误检测功能</p></td><td><p>SLIP,CSLIP,PPP,MTU,ARP,RARP</p></td><td><p>数据链路层</p></td></tr><tr><td><p>网络层</p></td><td><p>为数据包选择路由</p></td><td><p>IP,ICMP,OSPF,BGP,IGM,ARP,RARP</p></td><td><p>网络层</p></td></tr><tr><td><p>交换层（传输）</p></td><td><p>提供端到端的接口</p></td><td><p>TCP,UDP</p></td><td><p>交换层</p></td></tr><tr><td><p>会话层</p></td><td><p>解除或简历与别的接点的联系</p></td><td><p><br /></p></td><td><p><br /></p></td></tr><tr><td><p>表示层</p></td><td><p>数据格式转换，代码转化，数据加密</p></td><td><p><br /></p></td><td><p><br /></p></td></tr><tr><td><p>应用层</p></td><td><p>文件传输，电子邮件，文件服务，虚拟终端</p></td><td><p>TFTP,HTTP,SNMP,FTP,SMTP,DNS,RIP,Telnet</p></td><td><p>应用层</p></td></tr></tbody></table><h2 id=\"ilhbks\"><a href=\"#ilhbks\"></a>状态码：</h2><table class=\"lake-table\" style=\"width: 852px;\"><colgroup><col width=\"136\"></col><col width=\"150\"></col><col width=\"135\"></col><col width=\"190\"></col><col width=\"241\"></col></colgroup><tbody><tr><td><p>1XX</p></td><td><p>2XX</p></td><td><p>3XX 重定向</p></td><td><p>4XX 客户端</p></td><td><p>5XX 服务器</p></td></tr><tr><td><p>连接状态信息</p></td><td><p>200 连接ok</p></td><td><p>301 永久重定向</p></td><td><p>400 错误请求</p></td><td><p>500 服务器遇到了一个未曾预料的状况</p></td></tr><tr><td><p><br /></p></td><td><p><br /></p></td><td><p>302 临时重定向</p></td><td><p>401 访问代码存在异常，身份验证错误</p></td><td><p><br /></p></td></tr><tr><td><p><br /></p></td><td><p><br /></p></td><td><p>303 临时重定向</p></td><td><p>403 服务被拒绝</p></td><td><p>503 服务器正忙，无资源</p></td></tr><tr><td><p><br /></p></td><td><p><br /></p></td><td><p>304 特定条件下临时重定向</p></td><td><p>404 未找到</p></td><td><p>504 网关超时</p></td></tr><tr><td><p><br /></p></td><td><p><br /></p></td><td><p>307 临时重定向（POST方法）</p></td><td><p><br /></p></td><td><p><br /></p></td></tr></tbody></table><p><br /></p><h2 id=\"havake\"><a href=\"#havake\"></a>VPN <span style=\"color: #4F4F4F;\"><span style=\"background-color: #EEF0F4;\">全称为Virtual Private Network</span></span></h2><p>VPN 工作在第二层第三层上，第二层是<a href=\"https://baike.baidu.com/item/PPTP\" target=\"_blank\">PPTP</a>（TCP1723）<span style=\"color: #333333;\"><span style=\"background-color: #FFFFFF;\">、</span></span><a href=\"https://baike.baidu.com/item/L2TP\" target=\"_blank\">L2TP</a>（<span style=\"color: #333333;\"><span style=\"background-color: #FFFFFF;\">UDP:500 (isakmp)，UDP:4500 (nat-t)</span></span><br /><span style=\"color: #333333;\"><span style=\"background-color: #FFFFFF;\">UDP:1701 (l2tp)</span></span>）第三层是<a href=\"https://baike.baidu.com/item/IPSec\" target=\"_blank\">IPSec</a>（<span style=\"color: #333333;\"><span style=\"background-color: #FFFFFF;\">UDP:500 (isakmp)，UDP:4500 (nat-t)</span></span>）</p><p>有NAT是500 无NAT是4500</p><p><br /></p><p><br /></p><p><br /></p><h2 id=\"ntycfe\"><a href=\"#ntycfe\"></a>地址</h2><p>A类地址的第一组数字为1～126。注意，数字0和 127不作为A类地址，数字127保留给内部回送函数，而数字0则表示该地址是本地宿主机，不能传送。</p><p><br /></p><p>范围：1.0.0.1到126.255.255.254</p><p><br /></p><p>B类地址的第一组数字为128～191。</p><p><br /></p><p>范围：128.0.0.1到191.255.255.254</p><p><br /></p><p>C类地址的第一组数字为192～223。</p><p><br /></p><p>范围：192.0.0.1到223.255.255.254</p><p><br /></p><p>0.0.0.0 是 默认ip地址，是缺省ip 127.0.0.x 是回环地址</p><h4 id=\"8334sw\"><a href=\"#8334sw\"></a>私有IP地址分类及范围。</h4><p><br /></p><p>A类：10.0.0.1 – 10.255.255.254</p><p><br /></p><p>B类：172.16.0.1 – 172.31.255.254</p><p><br /></p><p>C类：192.168.0.1 – 192.168.255.25</p><p><br /></p><h2 id=\"lpzark\"><a href=\"#lpzark\"></a>DHCP 动态主机配置协议（网络层）</h2><p>DHCP的端口号为67 UDP</p><p>DHCP 主要组成是由3个东东组成，第一个是DHCP服务器，第二个是DHCP客户端 第三个DHCP中继器。</p><p>配置：ip，子网掩码，网关。</p><p>DHCP 未分配地址是169.254.x.x</p><h2 id=\"wcp6tq\"><a href=\"#wcp6tq\"></a>VLAN <span style=\"color: #333333;\"><span style=\"background-color: #FFFFFF;\">虚拟局域网</span></span></h2><p>逻辑划分网络</p><p>根据端口换分静态，根据ip划分，根据mac地址划分动态的</p><p style=\"padding-left: 2em;\"><br /></p><p><br /></p><h2 id=\"qkzivq\"><a href=\"#qkzivq\"></a><span style=\"color: #1F497D;\">DNS 域名系统</span></h2><p>DNS查询方式：递归，非递归，迭代</p><p><br /></p><p><a href=\"https://www.baidu.com/s?wd=%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">顶级域名</a>：又叫<a href=\"https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">一级域名</a>，一串字符串中间一个点隔开，例如baidu.com，这里说明一下，www.baidu.com不是<a href=\"https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">一级域名</a>！！而是<a href=\"https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">二级域名</a>！</p><p><a href=\"https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">二级域名</a>：实际上就是一个<a href=\"https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">一级域名</a>以下的主机名，一串字符串中间两个“.”隔开，例如pan.baidu.com（&quot;pan&quot;就是主机名）。</p><p><a href=\"https://www.baidu.com/s?wd=%E4%B8%89%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">三级域名</a>：<a href=\"https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">二级域名</a>的<a href=\"https://www.baidu.com/s?wd=%E5%AD%90%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">子域名</a>，特征是包含三个“.”，一般来说<a href=\"https://www.baidu.com/s?wd=%E4%B8%89%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\">三级域名</a>都是免费的。</p><p><br /></p><p>FTP 文件传输系统 利用21,20端口</p><p>SFTP 基于SSH的文件传输端口 利用22端口</p><p>HTTP版本分为1.0/1.1(添加流水线解决并发)/2.0只用于HTTPS，加密</p><p><br /></p><p><span style=\"color: #4F4F4F;\"><span style=\"background-color: #FFFFFF;\">在DNS中，主机名又称主机名.域名</span></span></p><h2 id=\"sop7xl\"><a href=\"#sop7xl\"></a><span style=\"color: #4F4F4F;\"><span style=\"background-color: #FFFFFF;\"><strong>TCP/IP协议</strong></span></span></h2><p>可以让不同主机，不同架构，不同系统之间互相通信</p>",
    "body_lake": "<!doctype lake><p>经典协议</p><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%2231e9b129%22%2C%22rows%22%3A8%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%201067px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22131%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22160%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22339%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22437%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%3E%3Ctd%3E%3Cp%3E7%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AEosi%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%8A%9F%E8%83%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3ETCP%2FIP%E5%8D%8F%E8%AE%AE%E6%97%8F%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E5%E5%B1%82%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%89%A9%E7%90%86%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E4%BB%A5%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E6%8D%AE%E5%9C%A8%E7%89%A9%E7%90%86%E5%AA%92%E4%BD%93%E4%B8%8A%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EISO2110%EF%BC%8CIEEE802%EF%BC%8CIEEE802.2..........%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E7%89%A9%E7%90%86%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E4%BC%A0%E8%BE%93%E5%9C%B0%E5%9D%80%E7%9A%84%E5%B8%A7%E4%BB%A5%E5%8F%8A%E9%94%99%E8%AF%AF%E6%A3%80%E6%B5%8B%E5%8A%9F%E8%83%BD%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3ESLIP%2CCSLIP%2CPPP%2CMTU%2CARP%2CRARP%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E7%BD%91%E7%BB%9C%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%8C%85%E9%80%89%E6%8B%A9%E8%B7%AF%E7%94%B1%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3EIP%2CICMP%2COSPF%2CBGP%2CIGM%2CARP%2CRARP%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E7%BD%91%E7%BB%9C%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E4%BA%A4%E6%8D%A2%E5%B1%82%EF%BC%88%E4%BC%A0%E8%BE%93%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%8F%90%E4%BE%9B%E7%AB%AF%E5%88%B0%E7%AB%AF%E7%9A%84%E6%8E%A5%E5%8F%A3%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3ETCP%2CUDP%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E4%BA%A4%E6%8D%A2%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E4%BC%9A%E8%AF%9D%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E8%A7%A3%E9%99%A4%E6%88%96%E7%AE%80%E5%8E%86%E4%B8%8E%E5%88%AB%E7%9A%84%E6%8E%A5%E7%82%B9%E7%9A%84%E8%81%94%E7%B3%BB%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E8%A1%A8%E7%A4%BA%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%EF%BC%8C%E4%BB%A3%E7%A0%81%E8%BD%AC%E5%8C%96%EF%BC%8C%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E5%BA%94%E7%94%A8%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%EF%BC%8C%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%EF%BC%8C%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%EF%BC%8C%E8%99%9A%E6%8B%9F%E7%BB%88%E7%AB%AF%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3ETFTP%2CHTTP%2CSNMP%2CFTP%2CSMTP%2CDNS%2CRIP%2CTelnet%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%E5%BA%94%E7%94%A8%E5%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%7D\"></card><h2 id=\"ilhbks\"><a href=\"#ilhbks\" id=\"状态码：\"></a>状态码：</h2><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%22ae532249%22%2C%22rows%22%3A6%2C%22cols%22%3A5%2C%22html%22%3A%22%3Ctable%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20852px%3B%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22136%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22150%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22135%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22190%5C%22%20%2F%3E%3Ccol%20width%3D%5C%22241%5C%22%20%2F%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%3E%3Ctd%3E%3Cp%3E1XX%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E2XX%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E3XX%20%E9%87%8D%E5%AE%9A%E5%90%91%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E4XX%20%E5%AE%A2%E6%88%B7%E7%AB%AF%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E5XX%20%E6%9C%8D%E5%8A%A1%E5%99%A8%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E4%BF%A1%E6%81%AF%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E200%20%E8%BF%9E%E6%8E%A5ok%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E301%20%E6%B0%B8%E4%B9%85%E9%87%8D%E5%AE%9A%E5%90%91%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E400%20%E9%94%99%E8%AF%AF%E8%AF%B7%E6%B1%82%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E500%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%81%87%E5%88%B0%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%AA%E6%9B%BE%E9%A2%84%E6%96%99%E7%9A%84%E7%8A%B6%E5%86%B5%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E302%20%E4%B8%B4%E6%97%B6%E9%87%8D%E5%AE%9A%E5%90%91%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E401%20%E8%AE%BF%E9%97%AE%E4%BB%A3%E7%A0%81%E5%AD%98%E5%9C%A8%E5%BC%82%E5%B8%B8%EF%BC%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E303%20%E4%B8%B4%E6%97%B6%E9%87%8D%E5%AE%9A%E5%90%91%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E403%20%E6%9C%8D%E5%8A%A1%E8%A2%AB%E6%8B%92%E7%BB%9D%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E503%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%AD%A3%E5%BF%99%EF%BC%8C%E6%97%A0%E8%B5%84%E6%BA%90%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E304%20%E7%89%B9%E5%AE%9A%E6%9D%A1%E4%BB%B6%E4%B8%8B%E4%B8%B4%E6%97%B6%E9%87%8D%E5%AE%9A%E5%90%91%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E404%20%E6%9C%AA%E6%89%BE%E5%88%B0%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E504%20%E7%BD%91%E5%85%B3%E8%B6%85%E6%97%B6%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E307%20%E4%B8%B4%E6%97%B6%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%88POST%E6%96%B9%E6%B3%95%EF%BC%89%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%3E%3Cp%3E%3Cbr%20%2F%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%7D\"></card><p><br /></p><h2 id=\"havake\"><a href=\"#havake\" id=\"span,[object-object],vpn-,span,[object-object],span,[object-object],全称为virtual-private-network\"></a>VPN <span style=\"color:rgb(79, 79, 79)\"><span style=\"background-color:rgb(238, 240, 244)\">全称为Virtual Private Network</span></span></h2><p>VPN 工作在第二层第三层上，第二层是<a href=\"https://baike.baidu.com/item/PPTP\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">PPTP</a>（TCP1723）<span style=\"color:rgb(51, 51, 51)\"><span style=\"background-color:rgb(255, 255, 255)\">、</span></span><a href=\"https://baike.baidu.com/item/L2TP\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">L2TP</a>（<span style=\"color:rgb(51, 51, 51)\"><span style=\"background-color:rgb(255, 255, 255)\">UDP:500 (isakmp)，UDP:4500 (nat-t)</span></span><br /><span style=\"color:rgb(51, 51, 51)\"><span style=\"background-color:rgb(255, 255, 255)\">UDP:1701 (l2tp)</span></span>）第三层是<a href=\"https://baike.baidu.com/item/IPSec\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">IPSec</a>（<span style=\"color:rgb(51, 51, 51)\"><span style=\"background-color:rgb(255, 255, 255)\">UDP:500 (isakmp)，UDP:4500 (nat-t)</span></span>）</p><p>有NAT是500 无NAT是4500</p><p><br /></p><p><br /></p><p><br /></p><h2 id=\"ntycfe\"><a href=\"#ntycfe\" id=\"地址\"></a>地址</h2><p>A类地址的第一组数字为1～126。注意，数字0和 127不作为A类地址，数字127保留给内部回送函数，而数字0则表示该地址是本地宿主机，不能传送。</p><p><br /></p><p>范围：1.0.0.1到126.255.255.254</p><p><br /></p><p>B类地址的第一组数字为128～191。</p><p><br /></p><p>范围：128.0.0.1到191.255.255.254</p><p><br /></p><p>C类地址的第一组数字为192～223。</p><p><br /></p><p>范围：192.0.0.1到223.255.255.254</p><p><br /></p><p>0.0.0.0 是 默认ip地址，是缺省ip 127.0.0.x 是回环地址</p><h4 id=\"8334sw\"><a href=\"#8334sw\" id=\"私有ip地址分类及范围。\"></a>私有IP地址分类及范围。</h4><p><br /></p><p>A类：10.0.0.1 – 10.255.255.254</p><p><br /></p><p>B类：172.16.0.1 – 172.31.255.254</p><p><br /></p><p>C类：192.168.0.1 – 192.168.255.25</p><p><br /></p><h2 id=\"lpzark\"><a href=\"#lpzark\" id=\"dhcp-动态主机配置协议（网络层）\"></a>DHCP 动态主机配置协议（网络层）</h2><p>DHCP的端口号为67 UDP</p><p>DHCP 主要组成是由3个东东组成，第一个是DHCP服务器，第二个是DHCP客户端 第三个DHCP中继器。</p><p>配置：ip，子网掩码，网关。</p><p>DHCP 未分配地址是169.254.x.x</p><h2 id=\"wcp6tq\"><a href=\"#wcp6tq\" id=\"span,[object-object],vlan-,span,[object-object],span,[object-object],虚拟局域网\"></a>VLAN <span style=\"color:rgb(51, 51, 51)\"><span style=\"background-color:rgb(255, 255, 255)\">虚拟局域网</span></span></h2><p>逻辑划分网络</p><p>根据端口换分静态，根据ip划分，根据mac地址划分动态的</p><p style=\"padding-left: 2em\"><br /></p><p><br /></p><h2 id=\"qkzivq\"><a href=\"#qkzivq\" id=\"span,[object-object],span,[object-object],dns-域名系统\"></a><span style=\"color:rgb(31, 73, 125)\">DNS 域名系统</span></h2><p>DNS查询方式：递归，非递归，迭代</p><p><br /></p><p><a href=\"https://www.baidu.com/s?wd=%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">顶级域名</a>：又叫<a href=\"https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">一级域名</a>，一串字符串中间一个点隔开，例如baidu.com，这里说明一下，www.baidu.com不是<a href=\"https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">一级域名</a>！！而是<a href=\"https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">二级域名</a>！</p><p><a href=\"https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">二级域名</a>：实际上就是一个<a href=\"https://www.baidu.com/s?wd=%E4%B8%80%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">一级域名</a>以下的主机名，一串字符串中间两个“.”隔开，例如pan.baidu.com（&quot;pan&quot;就是主机名）。</p><p><a href=\"https://www.baidu.com/s?wd=%E4%B8%89%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">三级域名</a>：<a href=\"https://www.baidu.com/s?wd=%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">二级域名</a>的<a href=\"https://www.baidu.com/s?wd=%E5%AD%90%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">子域名</a>，特征是包含三个“.”，一般来说<a href=\"https://www.baidu.com/s?wd=%E4%B8%89%E7%BA%A7%E5%9F%9F%E5%90%8D&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">三级域名</a>都是免费的。</p><p><br /></p><p>FTP 文件传输系统 利用21,20端口</p><p>SFTP 基于SSH的文件传输端口 利用22端口</p><p>HTTP版本分为1.0/1.1(添加流水线解决并发)/2.0只用于HTTPS，加密</p><p><br /></p><p><span style=\"color:rgb(79, 79, 79)\"><span style=\"background-color:rgb(255, 255, 255)\">在DNS中，主机名又称主机名.域名</span></span></p><h2 id=\"sop7xl\"><a href=\"#sop7xl\" id=\"span,[object-object],span,[object-object],span,[object-object],strong,[object-object],tcp-ip协议\"></a><span style=\"color:rgb(79, 79, 79)\"><span style=\"background-color:rgb(255, 255, 255)\"><strong>TCP/IP协议</strong></span></span></h2><p>可以让不同主机，不同架构，不同系统之间互相通信</p>",
    "public": 1,
    "status": 1,
    "likes_count": 1,
    "comments_count": 0,
    "content_updated_at": "2018-10-25T16:58:26.000Z",
    "deleted_at": null,
    "created_at": "2018-10-25T12:42:35.000Z",
    "updated_at": "2018-12-14T01:41:31.000Z",
    "published_at": "2018-10-25T16:58:26.000Z",
    "first_published_at": null,
    "word_count": 887,
    "cover": null,
    "description": "经典协议7层网络协议osi功能TCP/IP协议族5层网络协议物理层以二进制数据在物理媒体上传输数据ISO2110，IEEE802，IEEE802.2..........物理层数据链路层传输地址的帧以及错误检测功能SLIP,CSLIP,PPP,MTU,ARP,RARP数据链路层网络层为数据包选择路由IP,ICMP,OSPF,BGP,IGM,ARP,RARP网络层交换层（传输）提供端到端的接口TCP,UDP...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 916155,
    "slug": "wxsiu9",
    "title": "数据库封锁知识",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "今天写代码的时候突然发自己对数据库封锁相关概念有些模糊，现在整理一下。<br />封锁协议是为了解决数据库数据更新的时候三个问题，1丢失更新，2读脏数据，3不可重复读这三个概念。\n<a name=\"ogxpki\"></a>\n## [](#ogxpki)造成原因\n1.丢失更新，一个事务更新覆盖了另一个事务的结果。<br />例如： 用户A将数据从100改为99，而用户B将数据从99改成100，这样用户A的数据操作丢失了。        \n\n2.读脏数据，事务T1修改某一数据，将其写回磁盘，事务T2读取同一数据后，由于某一原因，事务T1要求回滚，这时，T1数据被恢复成原来的数据，而T2读取到的数据与数据库中的数据不一致，是错误数据，又称脏数据。<br />3.不可重复读，事务T1读取数据后，事务T2执行了更新操作，T1使用的仍是更新前的数据，造成了数据不一致性。\n\n<a name=\"qlp2zi\"></a>\n## [](#qlp2zi)解决方法\n封锁技术：<br />这里的锁分两种，一种是排他锁（X锁），一种是共享锁（S锁）。<br />排他锁：**只**允许事务T对数据对象A进行读/写操作。<br />共享锁：允许所有事务对数据进行读，不允许写操作。\n\n封锁协议：<br />一级封锁协议，事务在修改数据A之前必须对其加X锁，直到结束才释放。一级封锁协议解决了数据更新丢失问题。<br />二级封锁协议，在一级封锁协议上，加上事务T在读取数据A之前必须加S锁，读完后释放S锁，二级封锁协议解决读脏数据问题。<br />三级封锁协议，在一级封锁协议上，加上事务T在读取数据A之前必须加S锁，**直到事务结束**才释放S锁，三级封锁协议解决读脏数据问题，而且防止不可重复读的问题。\n\n",
    "body_draft": "今天写代码的时候突然发自己对数据库封锁相关概念有些模糊，现在整理一下。\n封锁协议是为了解决数据库数据更新的时候三个问题，1丢失更新，2读脏数据，3不可重复读这三个概念。\n## <a name=\"ogxpki\"></a>造成原因\n1.丢失更新，一个事务更新覆盖了另一个事务的结果。\n例如： 用户A将数据从100改为99，而用户B将数据从99改成100，这样用户A的数据操作丢失了。        \n\n2.读脏数据，事务T1修改某一数据，将其写回磁盘，事务T2读取同一数据后，由于某一原因，事务T1要求回滚，这时，T1数据被恢复成原来的数据，而T2读取到的数据与数据库中的数据不一致，是错误数据，又称脏数据。\n3.不可重复读，事务T1读取数据后，事务T2执行了更新操作，T1使用的仍是更新前的数据，造成了数据不一致性。\n\n## <a name=\"qlp2zi\"></a>解决方法\n封锁技术：\n这里的锁分两种，一种是排他锁（X锁），一种是共享锁（S锁）。\n排他锁：<span data-type=\"color\" style=\"color:#F5222D\"><strong>只</strong></span>允许事务T对数据对象A进行读/写操作。\n共享锁：允许所有事务对数据进行读，不允许写操作。\n\n封锁协议：\n一级封锁协议，事务在修改数据A之前必须对其加X锁，直到结束才释放。一级封锁协议解决了数据更新丢失问题。\n二级封锁协议，在一级封锁协议上，加上事务T在读取数据A之前必须加S锁，读完后释放S锁，二级封锁协议解决读脏数据问题。\n三级封锁协议，在一级封锁协议上，加上事务T在读取数据A之前必须加S锁，<span data-type=\"color\" style=\"color:#F5222D\"><strong>直到事务结束</strong></span>才释放S锁，三级封锁协议解决读脏数据问题，而且防止不可重复读的问题。\n\n",
    "body_html": "<p>今天写代码的时候突然发自己对数据库封锁相关概念有些模糊，现在整理一下。</p><p>封锁协议是为了解决数据库数据更新的时候三个问题，1丢失更新，2读脏数据，3不可重复读这三个概念。</p><h2 id=\"ogxpki\"><a href=\"#ogxpki\"></a>造成原因</h2><p>1.丢失更新，一个事务更新覆盖了另一个事务的结果。</p><p style=\"padding-left: 2em;\">例如： 用户A将数据从100改为99，而用户B将数据从99改成100，这样用户A的数据操作丢失了。        </p><p><br /></p><p>2.读脏数据，事务T1修改某一数据，将其写回磁盘，事务T2读取同一数据后，由于某一原因，事务T1要求回滚，这时，T1数据被恢复成原来的数据，而T2读取到的数据与数据库中的数据不一致，是错误数据，又称脏数据。</p><p>3.不可重复读，事务T1读取数据后，事务T2执行了更新操作，T1使用的仍是更新前的数据，造成了数据不一致性。</p><p><br /></p><h2 id=\"qlp2zi\"><a href=\"#qlp2zi\"></a>解决方法</h2><p>封锁技术：</p><p style=\"padding-left: 2em;\">这里的锁分两种，一种是排他锁（X锁），一种是共享锁（S锁）。</p><p>排他锁：<span style=\"color: #F5222D;\"><strong>只</strong></span>允许事务T对数据对象A进行读/写操作。</p><p>共享锁：允许所有事务对数据进行读，不允许写操作。</p><p><br /></p><p>封锁协议：</p><p>一级封锁协议，事务在修改数据A之前必须对其加X锁，直到结束才释放。一级封锁协议解决了数据更新丢失问题。</p><p>二级封锁协议，在一级封锁协议上，加上事务T在读取数据A之前必须加S锁，读完后释放S锁，二级封锁协议解决读脏数据问题。</p><p>三级封锁协议，在一级封锁协议上，加上事务T在读取数据A之前必须加S锁，<span style=\"color: #F5222D;\"><strong>直到事务结束</strong></span>才释放S锁，三级封锁协议解决读脏数据问题，而且防止不可重复读的问题。</p><p><br /></p>",
    "body_lake": "<!doctype lake><p>今天写代码的时候突然发自己对数据库封锁相关概念有些模糊，现在整理一下。</p><p>封锁协议是为了解决数据库数据更新的时候三个问题，1丢失更新，2读脏数据，3不可重复读这三个概念。</p><h2 id=\"ogxpki\"><a href=\"#ogxpki\" id=\"造成原因\"></a>造成原因</h2><p>1.丢失更新，一个事务更新覆盖了另一个事务的结果。</p><p style=\"padding-left: 2em\">例如： 用户A将数据从100改为99，而用户B将数据从99改成100，这样用户A的数据操作丢失了。        </p><p><br /></p><p>2.读脏数据，事务T1修改某一数据，将其写回磁盘，事务T2读取同一数据后，由于某一原因，事务T1要求回滚，这时，T1数据被恢复成原来的数据，而T2读取到的数据与数据库中的数据不一致，是错误数据，又称脏数据。</p><p>3.不可重复读，事务T1读取数据后，事务T2执行了更新操作，T1使用的仍是更新前的数据，造成了数据不一致性。</p><p><br /></p><h2 id=\"qlp2zi\"><a href=\"#qlp2zi\" id=\"解决方法\"></a>解决方法</h2><p>封锁技术：</p><p style=\"padding-left: 2em\">这里的锁分两种，一种是排他锁（X锁），一种是共享锁（S锁）。</p><p>排他锁：<span style=\"color:#F5222D\"><strong>只</strong></span>允许事务T对数据对象A进行读/写操作。</p><p>共享锁：允许所有事务对数据进行读，不允许写操作。</p><p><br /></p><p>封锁协议：</p><p>一级封锁协议，事务在修改数据A之前必须对其加X锁，直到结束才释放。一级封锁协议解决了数据更新丢失问题。</p><p>二级封锁协议，在一级封锁协议上，加上事务T在读取数据A之前必须加S锁，读完后释放S锁，二级封锁协议解决读脏数据问题。</p><p>三级封锁协议，在一级封锁协议上，加上事务T在读取数据A之前必须加S锁，<span style=\"color:#F5222D\"><strong>直到事务结束</strong></span>才释放S锁，三级封锁协议解决读脏数据问题，而且防止不可重复读的问题。</p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-10-24T17:58:24.000Z",
    "deleted_at": null,
    "created_at": "2018-10-24T15:17:08.000Z",
    "updated_at": "2018-10-24T17:58:24.000Z",
    "published_at": "2018-10-24T17:58:24.000Z",
    "first_published_at": null,
    "word_count": 518,
    "cover": null,
    "description": "今天写代码的时候突然发自己对数据库封锁相关概念有些模糊，现在整理一下。封锁协议是为了解决数据库数据更新的时候三个问题，1丢失更新，2读脏数据，3不可重复读这三个概念。造成原因1.丢失更新，一个事务更新覆盖了另一个事务的结果。例如： 用户A将数据从100改为99，而用户B将数据从99改成100，这样用户A的数据操作丢失了。        2.读脏数据，事务T1修改某一数据，将其写回磁盘，事务T2读取同一数据后，由于某一原因，事务T1要求回滚，这时，T1数据被恢复成原来的数据，而T...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 915587,
    "slug": "nml5x9",
    "title": "1024 节日快乐",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n![](https://cdn.nlark.com/yuque/0/2018/png/190217/1540376483514-ff9ce0d7-4d04-49a8-8847-85c765aadf1b.png#width=547)\n\n",
    "body_draft": "\n<div data-type=\"alignment\" data-value=\"center\" style=\"text-align:center\">\n  <div data-type=\"p\">\n    <div id=\"47frqn\" data-type=\"image\" data-display=\"block\" data-align=\"\" data-src=\"https://cdn.nlark.com/yuque/0/2018/png/190217/1540376483514-ff9ce0d7-4d04-49a8-8847-85c765aadf1b.png\" data-width=\"547\">\n      <img src=\"https://cdn.nlark.com/yuque/0/2018/png/190217/1540376483514-ff9ce0d7-4d04-49a8-8847-85c765aadf1b.png\" width=\"547\" />\n    </div>\n  </div>\n</div>\n\n\n",
    "body_html": "<p><br /></p><p style=\"text-align: center;\"><img src=\"https://cdn.nlark.com/yuque/0/2018/png/190217/1540376483514-ff9ce0d7-4d04-49a8-8847-85c765aadf1b.png#width=547\" style=\"max-width: 600px; width: 547px;\" /></p><p><br /></p>",
    "body_lake": "<!doctype lake><p><br /></p><p style=\"text-align:center\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2018%2Fpng%2F190217%2F1540376483514-ff9ce0d7-4d04-49a8-8847-85c765aadf1b.png%22%2C%22width%22%3A547%7D\"></card></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-10-24T10:22:14.000Z",
    "deleted_at": null,
    "created_at": "2018-10-24T10:06:19.000Z",
    "updated_at": "2018-10-24T10:22:14.000Z",
    "published_at": "2018-10-24T10:22:14.000Z",
    "first_published_at": null,
    "word_count": 0,
    "cover": null,
    "description": "[图片]",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 900523,
    "slug": "re39nm",
    "title": "Java 集锦",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"3gy6hb\"></a>\n### [](#3gy6hb)String StringBuffer StringBuilder区别\nString 是不可修改的（开发常用）因为不可更改，所以效率高<br />StringBuffer 是线程安全的有synchronized 关键字（字符变化比较频繁，使用）<br />StringBuilder 不是线程安全的\n\n<a name=\"zwyixb\"></a>\n### [](#zwyixb)Runtime 单例设计模式\n具体查看文档，同getRuntime（）<br />Runtime 是一个私有方法，每一个程序在运行时都会自动启动它，当程序内产生垃圾后，会调用Runtime中 gc（） 类，用来回收内存。（该方法是不定期调用的）\n\n<a name=\"wu1qok\"></a>\n### [](#wu1qok)System 类\nSystem中有gc方法，从源码上看是调用Runtime的gc方法；<br />final ， finally ，finalize却别<br />Final 是一个关键字，用于定义不能被继承的父类，和不能重写的方法<br />Finally 是一个异常处理的统一处出口。<br />Finalize 是一个Object调用finalize来做类似于C++析构函数的作用。\n\n\n",
    "body_draft": "### <a name=\"3gy6hb\"></a>String StringBuffer StringBuilder区别\nString 是不可修改的（开发常用）因为不可更改，所以效率高\nStringBuffer 是线程安全的有synchronized 关键字（字符变化比较频繁，使用）\nStringBuilder 不是线程安全的\n\n### <a name=\"zwyixb\"></a>Runtime 单例设计模式\n具体查看文档，同getRuntime（）\nRuntime 是一个私有方法，每一个程序在运行时都会自动启动它，当程序内产生垃圾后，会调用Runtime中 gc（） 类，用来回收内存。（该方法是不定期调用的）\n\n### <a name=\"wu1qok\"></a>System 类\nSystem中有gc方法，从源码上看是调用Runtime的gc方法；\nfinal ， finally ，finalize却别\nFinal 是一个关键字，用于定义不能被继承的父类，和不能重写的方法\nFinally 是一个异常处理的统一处出口。\nFinalize 是一个Object调用finalize来做类似于C++析构函数的作用。\n\n\n",
    "body_html": "<h3 id=\"3gy6hb\"><a href=\"#3gy6hb\"></a>String StringBuffer StringBuilder区别</h3><p>String 是不可修改的（开发常用）因为不可更改，所以效率高<br />StringBuffer 是线程安全的有synchronized 关键字（字符变化比较频繁，使用）<br />StringBuilder 不是线程安全的</p><p><br /></p><h3 id=\"zwyixb\"><a href=\"#zwyixb\"></a>Runtime 单例设计模式</h3><p>具体查看文档，同getRuntime（）<br />Runtime 是一个私有方法，每一个程序在运行时都会自动启动它，当程序内产生垃圾后，会调用Runtime中 gc（） 类，用来回收内存。（该方法是不定期调用的）</p><p><br /></p><h3 id=\"wu1qok\"><a href=\"#wu1qok\"></a>System 类</h3><p>System中有gc方法，从源码上看是调用Runtime的gc方法；<br />final ， finally ，finalize却别<br />Final 是一个关键字，用于定义不能被继承的父类，和不能重写的方法<br />Finally 是一个异常处理的统一处出口。<br />Finalize 是一个Object调用finalize来做类似于C++析构函数的作用。</p><p><br /></p><p><br /></p>",
    "body_lake": "<!doctype lake><h3 id=\"3gy6hb\"><a href=\"#3gy6hb\" id=\"string-stringbuffer-stringbuilder区别\"></a>String StringBuffer StringBuilder区别</h3><p>String 是不可修改的（开发常用）因为不可更改，所以效率高<br />StringBuffer 是线程安全的有synchronized 关键字（字符变化比较频繁，使用）<br />StringBuilder 不是线程安全的</p><p><br /></p><h3 id=\"zwyixb\"><a href=\"#zwyixb\" id=\"runtime-单例设计模式\"></a>Runtime 单例设计模式</h3><p>具体查看文档，同getRuntime（）<br />Runtime 是一个私有方法，每一个程序在运行时都会自动启动它，当程序内产生垃圾后，会调用Runtime中 gc（） 类，用来回收内存。（该方法是不定期调用的）</p><p><br /></p><h3 id=\"wu1qok\"><a href=\"#wu1qok\" id=\"system-类\"></a>System 类</h3><p>System中有gc方法，从源码上看是调用Runtime的gc方法；<br />final ， finally ，finalize却别<br />Final 是一个关键字，用于定义不能被继承的父类，和不能重写的方法<br />Finally 是一个异常处理的统一处出口。<br />Finalize 是一个Object调用finalize来做类似于C++析构函数的作用。</p><p><br /></p><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-10-24T17:52:05.000Z",
    "deleted_at": null,
    "created_at": "2018-10-18T07:50:08.000Z",
    "updated_at": "2018-10-24T17:52:06.000Z",
    "published_at": "2018-10-24T17:52:05.000Z",
    "first_published_at": null,
    "word_count": 216,
    "cover": null,
    "description": "String StringBuffer StringBuilder区别String 是不可修改的（开发常用）因为不可更改，所以效率高 StringBuffer 是线程安全的有synchronized 关键字（字符变化比较频繁，使用） StringBuilder 不是线程安全的Runtime 单例设计模式具体查看文档，同getRuntime（） Runtime 是一个私有方法，每一个程序在运行时都会自动启动它，当程序内产生垃圾后，会调用Runtime中 gc...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 896024,
    "slug": "du8c8m",
    "title": "Java (二)探 多线程",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"4phbbs\"></a>\n## [](#4phbbs)runnable_or_callable\nRunable 与callable 是两个线程接口，这两个线程方法都是通过Thread类来启动线程，只不过runable内只有一个run方法，而callable是有返回值的，返回值类型为FutureTask。\n```\nhttps://github.com/zy84338719/java/tree/master/src/com/zhangyi/multithread/callable.java\n```\nJava 创建执行创建一个JVM进程，然后由JVM创建线程，主线程名称为main。\n<a name=\"559nex\"></a>\n### [](#559nex)记：JVM 是一个进程，所有的方法有主线程创建一个线程。\n\n<a name=\"1gqhgl\"></a>\n## [](#1gqhgl)线程优先级设置后，线程执行顺序有可能被提高\n主方法main线程优先级为中等优先级。\n",
    "body_draft": "## <a name=\"4phbbs\"></a>runnable\\_or\\_callable\nRunable 与callable 是两个线程接口，这两个线程方法都是通过Thread类来启动线程，只不过runable内只有一个run方法，而callable是有返回值的，返回值类型为FutureTask。\n```\nhttps://github.com/zy84338719/java/tree/master/src/com/zhangyi/multithread/callable.java\n```\nJava 创建执行创建一个JVM进程，然后由JVM创建线程，主线程名称为main。\n### <a name=\"559nex\"></a>记：JVM 是一个进程，所有的方法有主线程创建一个线程。\n\n## <a name=\"1gqhgl\"></a>线程优先级设置后，线程执行顺序有可能被提高\n主方法main线程优先级为中等优先级。\n",
    "body_html": "<h2 id=\"4phbbs\"><a href=\"#4phbbs\"></a>runnable_or_callable</h2><p>Runable 与callable 是两个线程接口，这两个线程方法都是通过Thread类来启动线程，只不过runable内只有一个run方法，而callable是有返回值的，返回值类型为FutureTask。</p><pre><code>https://github.com/zy84338719/java/tree/master/src/com/zhangyi/multithread/callable.java</code></pre><p>Java 创建执行创建一个JVM进程，然后由JVM创建线程，主线程名称为main。</p><h3 id=\"559nex\"><a href=\"#559nex\"></a>记：JVM 是一个进程，所有的方法有主线程创建一个线程。</h3><p><br /></p><h2 id=\"1gqhgl\"><a href=\"#1gqhgl\"></a>线程优先级设置后，线程执行顺序有可能被提高</h2><p>主方法main线程优先级为中等优先级。</p>",
    "body_lake": "<!doctype lake><h2 id=\"4phbbs\"><a href=\"#4phbbs\" id=\"runnable_or_callable\"></a>runnable_or_callable</h2><p>Runable 与callable 是两个线程接口，这两个线程方法都是通过Thread类来启动线程，只不过runable内只有一个run方法，而callable是有返回值的，返回值类型为FutureTask。</p><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22eecb3043%22%2C%22code%22%3A%22https%3A%2F%2Fgithub.com%2Fzy84338719%2Fjava%2Ftree%2Fmaster%2Fsrc%2Fcom%2Fzhangyi%2Fmultithread%2Fcallable.java%22%7D\"></card><p>Java 创建执行创建一个JVM进程，然后由JVM创建线程，主线程名称为main。</p><h3 id=\"559nex\"><a href=\"#559nex\" id=\"记：jvm-是一个进程，所有的方法有主线程创建一个线程。\"></a>记：JVM 是一个进程，所有的方法有主线程创建一个线程。</h3><p><br /></p><h2 id=\"1gqhgl\"><a href=\"#1gqhgl\" id=\"线程优先级设置后，线程执行顺序有可能被提高\"></a>线程优先级设置后，线程执行顺序有可能被提高</h2><p>主方法main线程优先级为中等优先级。</p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-10-16T16:51:35.000Z",
    "deleted_at": null,
    "created_at": "2018-10-16T16:28:08.000Z",
    "updated_at": "2018-10-16T16:51:35.000Z",
    "published_at": "2018-10-16T16:51:35.000Z",
    "first_published_at": null,
    "word_count": 155,
    "cover": null,
    "description": "runnable_or_callableRunable 与callable 是两个线程接口，这两个线程方法都是通过Thread类来启动线程，只不过runable内只有一个run方法，而callable是有返回值的，返回值类型为FutureTask。https://github.com/zy84338719/java/tree/master/src/com/zhangyi/multithread/callable.java Java 创建执行创建一个JVM进程，然后由JVM创建线程，主线程名称为main...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 895885,
    "slug": "nw9nh2",
    "title": "Spring 初探",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"0qxhah\"></a>\n### [](#0qxhah)MVC代表的含义：\n```\nMVC：Model + View + Controller(数据模型，视图，控制器)\n数据模型Model是和View视图之间进行传值交互数据的，Controller 是控制器，用来管理注解@Controller的类\n```\n<a name=\"0xevkk\"></a>\n## [](#0xevkk)Spring Boot优点缺点\n```\n优点\n1.快速构建项目\n2.对主流的开发框架无配置集成\n3.项目可以独立运行，无需依赖外部servlet容器\n4.提供运行时的应用监控\n5.极大地提高开发、部署效率；\n6.与云计算的天然集成\n```\n```\n缺点\n1.书少文档不多不够深入\n```\n\n",
    "body_draft": "### <a name=\"0qxhah\"></a>MVC代表的含义：\n```\nMVC：Model + View + Controller(数据模型，视图，控制器)\n数据模型Model是和View视图之间进行传值交互数据的，Controller 是控制器，用来管理注解@Controller的类\n```\n## <a name=\"0xevkk\"></a>Spring Boot优点缺点\n```\n优点\n1.快速构建项目\n2.对主流的开发框架无配置集成\n3.项目可以独立运行，无需依赖外部servlet容器\n4.提供运行时的应用监控\n5.极大地提高开发、部署效率；\n6.与云计算的天然集成\n```\n```缺点\n缺点\n1.书少文档不多不够深入\n```\n\n",
    "body_html": "<h3 id=\"0qxhah\"><a href=\"#0qxhah\"></a>MVC代表的含义：</h3><pre><code>MVC：Model + View + Controller(数据模型，视图，控制器)\n数据模型Model是和View视图之间进行传值交互数据的，Controller 是控制器，用来管理注解@Controller的类</code></pre><h2 id=\"0xevkk\"><a href=\"#0xevkk\"></a>Spring Boot优点缺点</h2><pre><code>优点\n1.快速构建项目\n2.对主流的开发框架无配置集成\n3.项目可以独立运行，无需依赖外部servlet容器\n4.提供运行时的应用监控\n5.极大地提高开发、部署效率；\n6.与云计算的天然集成</code></pre><pre><code>缺点\n1.书少文档不多不够深入</code></pre><p><br /></p>",
    "body_lake": "<!doctype lake><h3 id=\"0qxhah\"><a href=\"#0qxhah\" id=\"mvc代表的含义：\"></a>MVC代表的含义：</h3><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22fcf9c51c%22%2C%22code%22%3A%22MVC%EF%BC%9AModel%20%2B%20View%20%2B%20Controller(%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B%EF%BC%8C%E8%A7%86%E5%9B%BE%EF%BC%8C%E6%8E%A7%E5%88%B6%E5%99%A8)%5Cn%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8BModel%E6%98%AF%E5%92%8CView%E8%A7%86%E5%9B%BE%E4%B9%8B%E9%97%B4%E8%BF%9B%E8%A1%8C%E4%BC%A0%E5%80%BC%E4%BA%A4%E4%BA%92%E6%95%B0%E6%8D%AE%E7%9A%84%EF%BC%8CController%20%E6%98%AF%E6%8E%A7%E5%88%B6%E5%99%A8%EF%BC%8C%E7%94%A8%E6%9D%A5%E7%AE%A1%E7%90%86%E6%B3%A8%E8%A7%A3%40Controller%E7%9A%84%E7%B1%BB%22%7D\"></card><h2 id=\"0xevkk\"><a href=\"#0xevkk\" id=\"spring-boot优点缺点\"></a>Spring Boot优点缺点</h2><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22613eb0c9%22%2C%22code%22%3A%22%E4%BC%98%E7%82%B9%5Cn1.%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%5Cn2.%E5%AF%B9%E4%B8%BB%E6%B5%81%E7%9A%84%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%97%A0%E9%85%8D%E7%BD%AE%E9%9B%86%E6%88%90%5Cn3.%E9%A1%B9%E7%9B%AE%E5%8F%AF%E4%BB%A5%E7%8B%AC%E7%AB%8B%E8%BF%90%E8%A1%8C%EF%BC%8C%E6%97%A0%E9%9C%80%E4%BE%9D%E8%B5%96%E5%A4%96%E9%83%A8servlet%E5%AE%B9%E5%99%A8%5Cn4.%E6%8F%90%E4%BE%9B%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7%5Cn5.%E6%9E%81%E5%A4%A7%E5%9C%B0%E6%8F%90%E9%AB%98%E5%BC%80%E5%8F%91%E3%80%81%E9%83%A8%E7%BD%B2%E6%95%88%E7%8E%87%EF%BC%9B%5Cn6.%E4%B8%8E%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E5%A4%A9%E7%84%B6%E9%9B%86%E6%88%90%22%7D\"></card><card type=\"block\" name=\"codeblock\" value=\"data:%7B%22id%22%3A%22bb731e47%22%2C%22code%22%3A%22%E7%BC%BA%E7%82%B9%5Cn1.%E4%B9%A6%E5%B0%91%E6%96%87%E6%A1%A3%E4%B8%8D%E5%A4%9A%E4%B8%8D%E5%A4%9F%E6%B7%B1%E5%85%A5%22%7D\"></card><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-10-16T13:39:10.000Z",
    "deleted_at": null,
    "created_at": "2018-10-16T13:38:23.000Z",
    "updated_at": "2018-10-16T13:39:10.000Z",
    "published_at": "2018-10-16T13:39:10.000Z",
    "first_published_at": null,
    "word_count": 149,
    "cover": null,
    "description": "MVC代表的含义：MVC：Model + View + Controller(数据模型，视图，控制器) 数据模型Model是和View视图之间进行传值交互数据的，Controller 是控制器，用来管理注解@Controller的类 Spring Boot优点缺点优点 1.快速构建项目 2.对主流的开发框架无配置集成 3.项目可以独立运行，无需依赖外部servlet容器 4.提供运行时的应用监控 5.极大地提高开发、部署效率； 6.与云计算的天然集成 缺点 1.书少文档不多不够深入",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  },
  {
    "id": 892910,
    "slug": "cl1lys",
    "title": "apple产品国行港行？",
    "book_id": 163381,
    "book": {
      "id": 163381,
      "type": "Book",
      "slug": "blog",
      "name": "blog",
      "user_id": 190217,
      "description": "张易个人博客",
      "creator_id": 190217,
      "public": 1,
      "items_count": 46,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2019-03-28T18:32:30.725Z",
      "updated_at": "2019-03-28T18:32:30.000Z",
      "created_at": "2018-10-14T17:41:31.000Z",
      "namespace": "zhangyi-ul3zj/blog",
      "user": {
        "id": 190217,
        "type": "User",
        "login": "zhangyi-ul3zj",
        "name": "张易",
        "description": null,
        "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
        "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
        "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
        "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
        "books_count": 4,
        "public_books_count": 2,
        "followers_count": 2,
        "following_count": 1,
        "created_at": "2018-10-14T17:14:57.000Z",
        "updated_at": "2019-03-20T18:10:40.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 190217,
    "creator": {
      "id": 190217,
      "type": "User",
      "login": "zhangyi-ul3zj",
      "name": "张易",
      "description": null,
      "avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png",
      "large_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_320,h_320",
      "medium_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_160,h_160",
      "small_avatar_url": "https://gw.alipayobjects.com/zos/rmsportal/wYnHWSXDmBhiEmuwXsym.png?x-oss-process=image/resize,m_fill,w_80,h_80",
      "books_count": 4,
      "public_books_count": 2,
      "followers_count": 2,
      "following_count": 1,
      "created_at": "2018-10-14T17:14:57.000Z",
      "updated_at": "2019-03-20T18:10:40.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "<a name=\"6g30ec\"></a>\n### [](#6g30ec)每一次苹果手机出新款，总会听到有人嚷嚷着要去香港买最新版苹果手\n<a name=\"4k61dr\"></a>\n### [](#4k61dr)现在告诉一些中国大陆国行与其他版本在保修上的区别，（现在苹果产品品控有点闹心）。中国大陆三包法规定，更换产品零部件必须采用全新零件，这与苹果全球大多数地区售后政策不同，所以导致apple在中国大陆官网上的一系列解释。\n![](https://cdn.nlark.com/yuque/0/2018/png/190217/1539615747553-1e06468e-b052-499f-9eb5-a020a7863d82.png#width=747)\n<a name=\"uc8dag\"></a>\n### [](#uc8dag)非中国大陆销售的商品，享受apple care全球联保的同时，更换的零件/商品为翻新零件/或商品。也就是说，如果你是一个港版手机，当你去中国大陆的任何一家直营店去维修的时候，你的手机，不享受中国大陆维修政策，而享受购买当地的维修政策。\n<a name=\"uc8dag\"></a>\n### [](#uc8dag)当你的非国行设备，在中国大陆进行置换操作的时候，你的设备，会被换成大陆行货的翻新机。（这也就是非国行机器不太值钱的原因之一），当你用非国航机器置换成国行机器后，你的设备之前不是全网通，置换完毕后依然不是全网通。苹果的激活策略决定了你的机器网络属性。\n> <a name=\"0zrbbk\"></a>\n#### [](#0zrbbk)还有一点值得注意的是，苹果生产零部件的工厂有很多，当年6s芯片门，就是这个事情。不同的工厂生产出来了的产品品质有所不同。例如苹果屏幕供应商LCD JDI和LG，一个负责大面积供货，给富士康这样的公司，一个负责小范围供货给直营店做维修零件/机器，笔者自己用的电脑一年内经过5次维修，分别换了键盘帽，键盘电池总成X2，主板，屏幕。似乎每一次维修都会造成新的故障点，电子产品是个易耗品。且用且珍惜😢。\n\n<a name=\"eohyfb\"></a>\n### [](#eohyfb)总结一下，如果不怕麻烦，或者没有二手洁癖，可以选择“省钱”（实际上，当你遇到问题后并不省钱）的非国行（毕竟少了大概近20%的钱），如果你不差钱选择apple产品国行，推荐你买一个apple care+，如果你要求一年一换机器，推荐年年换新计划。\n\n",
    "body_draft": "### <a name=\"6g30ec\"></a><span data-type=\"color\" style=\"color:rgb(51, 51, 51)\"><span data-type=\"background\" style=\"background-color:rgb(255, 255, 255)\">每一次苹果手机出新款，总会听到有人嚷嚷着要去香港买最新版苹果手</span></span>\n### <a name=\"4k61dr\"></a>现在告诉一些中国大陆国行与其他版本在保修上的区别，（现在苹果产品品控有点闹心）。中国大陆三包法规定，更换产品零部件必须采用<span data-type=\"color\" style=\"color:#F5222D\">全新</span>零件，这与苹果全球大多数地区售后政策不同，所以导致apple在中国大陆官网上的一系列解释。\n\n\n![屏幕快照 2018-10-15 下午10.26.45.png | center | 747x505](https://cdn.nlark.com/yuque/0/2018/png/190217/1539615747553-1e06468e-b052-499f-9eb5-a020a7863d82.png \"\")\n\n### <a name=\"uc8dag\"></a>非中国大陆销售的商品，享受apple care全球联保的同时，更换的零件/商品为翻新零件/或商品。也就是说，如果你是一个港版手机，当你去中国大陆的任何一家直营店去维修的时候，你的手机，不享受中国大陆维修政策，而享受购买当地的维修政策。\n### <a name=\"uc8dag\"></a>当你的非国行设备，在中国大陆进行置换操作的时候，你的设备，\b会被换成大陆行货的翻新机。（这也就是非国行机器不太值钱的原因之一），当你用非国航机器置换成国行机器后，你的设备之前不是全网通，置换完毕后依然不是全网通。苹果的激活策略决定了你的机器网络属性。\n> #### <a name=\"0zrbbk\"></a>还有一点值得注意的是，苹果生产零部件的工厂有很多，当年6s芯片门，就是这个事情。不同的工厂生产出来了的产品品质有所不同。例如苹果屏幕供应商LCD JDI和LG，一个负责大面积供货，给富士康这样的公司，一个负责小范围供货给直营店做维修零件/机器，笔者自己用的电脑一年内经过5次维修，分别换了键盘帽，键盘电池总成X2，主板，屏幕。似乎每一次维修都会造成新的故障点，电子产品是个易耗品。且用且珍惜😢。\n### <a name=\"eohyfb\"></a>总结一下，如果不怕麻烦，或者没有二手洁癖，可以选择“省钱”（实际上，当你遇到问题后并不省钱）的非国行（毕竟少了大概近20%的钱），如果你不差钱选择apple产品国行，推荐你买一个apple care+，如果你要求一年一换机器，推荐年年换新计划。\n\n",
    "body_html": "<h3 id=\"6g30ec\"><a href=\"#6g30ec\"></a><span style=\"color: #333333;\"><span style=\"background-color: #FFFFFF;\">每一次苹果手机出新款，总会听到有人嚷嚷着要去香港买最新版苹果手</span></span></h3><h3 id=\"4k61dr\"><a href=\"#4k61dr\"></a>现在告诉一些中国大陆国行与其他版本在保修上的区别，（现在苹果产品品控有点闹心）。中国大陆三包法规定，更换产品零部件必须采用<span style=\"color: #F5222D;\">全新</span>零件，这与苹果全球大多数地区售后政策不同，所以导致apple在中国大陆官网上的一系列解释。</h3><p><img src=\"https://cdn.nlark.com/yuque/0/2018/png/190217/1539615747553-1e06468e-b052-499f-9eb5-a020a7863d82.png#width=747\" style=\"max-width: 600px; width: 747px;\" /></p><h3 id=\"uc8dag\"><a href=\"#uc8dag\"></a>非中国大陆销售的商品，享受apple care全球联保的同时，更换的零件/商品为翻新零件/或商品。也就是说，如果你是一个港版手机，当你去中国大陆的任何一家直营店去维修的时候，你的手机，不享受中国大陆维修政策，而享受购买当地的维修政策。</h3><h3 id=\"uc8dag\"><a href=\"#uc8dag\"></a>当你的非国行设备，在中国大陆进行置换操作的时候，你的设备，会被换成大陆行货的翻新机。（这也就是非国行机器不太值钱的原因之一），当你用非国航机器置换成国行机器后，你的设备之前不是全网通，置换完毕后依然不是全网通。苹果的激活策略决定了你的机器网络属性。</h3><blockquote><h4 id=\"0zrbbk\"><a href=\"#0zrbbk\"></a>还有一点值得注意的是，苹果生产零部件的工厂有很多，当年6s芯片门，就是这个事情。不同的工厂生产出来了的产品品质有所不同。例如苹果屏幕供应商LCD JDI和LG，一个负责大面积供货，给富士康这样的公司，一个负责小范围供货给直营店做维修零件/机器，笔者自己用的电脑一年内经过5次维修，分别换了键盘帽，键盘电池总成X2，主板，屏幕。似乎每一次维修都会造成新的故障点，电子产品是个易耗品。且用且珍惜😢。</h4></blockquote><h3 id=\"eohyfb\"><a href=\"#eohyfb\"></a>总结一下，如果不怕麻烦，或者没有二手洁癖，可以选择“省钱”（实际上，当你遇到问题后并不省钱）的非国行（毕竟少了大概近20%的钱），如果你不差钱选择apple产品国行，推荐你买一个apple care+，如果你要求一年一换机器，推荐年年换新计划。</h3><p><br /></p>",
    "body_lake": "<!doctype lake><h3 id=\"6g30ec\"><a href=\"#6g30ec\" id=\"span,[object-object],span,[object-object],span,[object-object],每一次苹果手机出新款，总会听到有人嚷嚷着要去香港买最新版苹果手\"></a><span style=\"color:rgb(51, 51, 51)\"><span style=\"background-color:rgb(255, 255, 255)\">每一次苹果手机出新款，总会听到有人嚷嚷着要去香港买最新版苹果手</span></span></h3><h3 id=\"4k61dr\"><a href=\"#4k61dr\" id=\"span,[object-object],现在告诉一些中国大陆国行与其他版本在保修上的区别，（现在苹果产品品控有点闹心）。中国大陆三包法规定，更换产品零部件必须采用,span,[object-object],全新,零件，这与苹果全球大多数地区售后政策不同，所以导致apple在中国大陆官网上的一系列解释。\"></a>现在告诉一些中国大陆国行与其他版本在保修上的区别，（现在苹果产品品控有点闹心）。中国大陆三包法规定，更换产品零部件必须采用<span style=\"color:#F5222D\">全新</span>零件，这与苹果全球大多数地区售后政策不同，所以导致apple在中国大陆官网上的一系列解释。</h3><p><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2018%2Fpng%2F190217%2F1539615747553-1e06468e-b052-499f-9eb5-a020a7863d82.png%22%2C%22width%22%3A747%7D\"></card></p><h3 id=\"uc8dag\"><a href=\"#uc8dag\" id=\"非中国大陆销售的商品，享受apple-care全球联保的同时，更换的零件-商品为翻新零件-或商品。也就是说，如果你是一个港版手机，当你去中国大陆的任何一家直营店去维修的时候，你的手机，不享受中国大陆维修政策，而享受购买当地的维修政策。\"></a>非中国大陆销售的商品，享受apple care全球联保的同时，更换的零件/商品为翻新零件/或商品。也就是说，如果你是一个港版手机，当你去中国大陆的任何一家直营店去维修的时候，你的手机，不享受中国大陆维修政策，而享受购买当地的维修政策。</h3><h3 id=\"uc8dag\"><a href=\"#uc8dag\" id=\"当你的非国行设备，在中国大陆进行置换操作的时候，你的设备，\b会被换成大陆行货的翻新机。（这也就是非国行机器不太值钱的原因之一），当你用非国航机器置换成国行机器后，你的设备之前不是全网通，置换完毕后依然不是全网通。苹果的激活策略决定了你的机器网络属性。\"></a>当你的非国行设备，在中国大陆进行置换操作的时候，你的设备，会被换成大陆行货的翻新机。（这也就是非国行机器不太值钱的原因之一），当你用非国航机器置换成国行机器后，你的设备之前不是全网通，置换完毕后依然不是全网通。苹果的激活策略决定了你的机器网络属性。</h3><blockquote><h4 id=\"0zrbbk\"><a href=\"#0zrbbk\" id=\"还有一点值得注意的是，苹果生产零部件的工厂有很多，当年6s芯片门，就是这个事情。不同的工厂生产出来了的产品品质有所不同。例如苹果屏幕供应商lcd-jdi和lg，一个负责大面积供货，给富士康这样的公司，一个负责小范围供货给直营店做维修零件-机器，笔者自己用的电脑一年内经过5次维修，分别换了键盘帽，键盘电池总成x2，主板，屏幕。似乎每一次维修都会造成新的故障点，电子产品是个易耗品。且用且珍惜😢。\"></a>还有一点值得注意的是，苹果生产零部件的工厂有很多，当年6s芯片门，就是这个事情。不同的工厂生产出来了的产品品质有所不同。例如苹果屏幕供应商LCD JDI和LG，一个负责大面积供货，给富士康这样的公司，一个负责小范围供货给直营店做维修零件/机器，笔者自己用的电脑一年内经过5次维修，分别换了键盘帽，键盘电池总成X2，主板，屏幕。似乎每一次维修都会造成新的故障点，电子产品是个易耗品。且用且珍惜😢。</h4></blockquote><h3 id=\"eohyfb\"><a href=\"#eohyfb\" id=\"总结一下，如果不怕麻烦，或者没有二手洁癖，可以选择“省钱”（实际上，当你遇到问题后并不省钱）的非国行（毕竟少了大概近20%的钱），如果你不差钱选择apple产品国行，推荐你买一个apple-care+，如果你要求一年一换机器，推荐年年换新计划。\"></a>总结一下，如果不怕麻烦，或者没有二手洁癖，可以选择“省钱”（实际上，当你遇到问题后并不省钱）的非国行（毕竟少了大概近20%的钱），如果你不差钱选择apple产品国行，推荐你买一个apple care+，如果你要求一年一换机器，推荐年年换新计划。</h3><p><br /></p>",
    "public": 1,
    "status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2018-10-16T04:35:30.000Z",
    "deleted_at": null,
    "created_at": "2018-10-15T14:22:14.000Z",
    "updated_at": "2018-10-16T04:35:30.000Z",
    "published_at": "2018-10-16T04:35:30.000Z",
    "first_published_at": null,
    "word_count": 601,
    "cover": null,
    "description": "每一次苹果手机出新款，总会听到有人嚷嚷着要去香港买最新版苹果手现在告诉一些中国大陆国行与其他版本在保修上的区别，（现在苹果产品品控有点闹心）。中国大陆三包法规定，更换产品零部件必须采用全新零件，这与苹果全球大多数地区售后政策不同，所以导致apple在中国大陆官网上的一系列解释。[图片]非中国大陆销售的商品，享受apple care...",
    "custom_description": null,
    "_serializer": "v2.doc_detail"
  }
]